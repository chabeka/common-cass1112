package fr.urssaf.image.sae.exploitation.servlet;

import java.io.File;
import java.io.IOException;
import java.io.Writer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jdom.Element;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;

import fr.urssaf.image.sae.exploitation.modele.CaptureMasseInfo;
import fr.urssaf.image.sae.exploitation.modele.ConfigurationDfce;
import fr.urssaf.image.sae.exploitation.service.CaptureMasseInfoService;
import fr.urssaf.image.sae.exploitation.service.ConfigDfceService;
import fr.urssaf.image.sae.exploitation.service.ConfigService;
import fr.urssaf.image.sae.exploitation.service.DfceInfoService;

/**
 * Servlet implementation class EtatDfceServlet
 */
public class EtatSaeServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	private static final String ETAT_DFCE_OK = "OK";
   private static final String ETAT_DFCE_KO = "KO";
   private static final String TEST = "test";
   private static final String VALEUR = "valeur";
   private static final String ETAT_CM_OUI = "OUI";
   private static final String ETAT_CM_NON = "NON";
   private static final String NAME = "name";
   
       
	 /**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected final void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
	   // Recupération du fichier de configuration de DFCE
	   File file = ConfigService.getCheminFichierConfigDfce();
	   
	   // Récupération de la configuration DFCE
	   ConfigurationDfce configDfce = ConfigDfceService.getConfigDfce(file);
	   
	   // Récupération du numéro de port JMX a partir du fichier de conf générale
	   int portJMX = ConfigService.getPortJMX();
	   
	   // Récupération de l'objet contenant les infos des états de la capture de masse
	   // a savoir s'il yen a deja une de lancer
	   // et son avancement si tel était le cas.
	   CaptureMasseInfo caputreMI = CaptureMasseInfoService.captureMasseEtat(portJMX);
	   
	   // Type MIME de la réponse HTTP
	   response.setContentType("text/xml; charset=UTF-8");
	   
	   // Appel de la méthode principale
	   serviceUp(configDfce, caputreMI, response.getWriter());
	   
		
	}
	
	/**
	 * Methode qui retourne les valeurs à la méthode doGet()<br>
	 * necessaire à la réponse affichée dans le navigateur.
	 * 
	 * @param configDfce 
	 *               fichier de configuration dfce
	 * @param writer 
	 *               afficher dans le navigateur de la réponse
	 * @throws IOException
	 *               exception
	 */
	public static final void serviceUp(ConfigurationDfce configDfce, CaptureMasseInfo captureMI, Writer writer) throws IOException {
	   
	   // Test de DFCE serveur up
      boolean dfceUp = DfceInfoService.isDfceUp(configDfce);
      
      // Test du couple DFCE + Cassandra
      boolean dfceConsultUp;
      if (dfceUp) {
         dfceConsultUp = DfceInfoService.isDfceConsultationUp(configDfce);
      } else {
         dfceConsultUp = false;
      }
      
      // Initialisation du flux XML
      Element xml = writeXml(dfceUp, dfceConsultUp, captureMI);
      
      //JDOM - Ecriture du flux XML
      XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
      out.output(xml, writer);
	   
	}
	

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected final void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	   doGet(request, response);
	}
	
	/**
	 * Ecriture du flux XML indiquant les etats de DFCE, couple DFCE/Cassandra<br>
	 * et l'etat de la capture de masse.
	 * 
	 * @param isDfceUp
	 *               boolean si dfce est up
	 * @param isDfceConsultUp 
	 *               si dfce/casandra is up
	 *               
	 * @return l'element Xml representant le flux              
	 */
	public static final Element writeXml(boolean isDfceUp, boolean isDfceConsultUp, CaptureMasseInfo captureMI) {

      // Element racine
      Element racine = new Element("application");
      racine.setAttribute(NAME, "SAE");
      
      racine = writeXmlDfce(racine, isDfceUp, isDfceConsultUp);
      
      writeXmlCaptureMasse(racine, captureMI);
      
      return racine;
      
	}
	
	
	/**
	 * Méthode permettant de générér un flux XML
    * pour savoir si l'API DFCE est actif
    * et si le couple DFCE/Cassandra est actif.
	 *  
	 * @param racine
	 * @param isDfceUp
	 * @param isDfceConsultUp
	 * @return element racine du flux XML
	 */
	private static Element writeXmlDfce(Element racine, boolean isDfceUp, boolean isDfceConsultUp) {
	   // Element fils - composants
      Element composant = new Element("composants");
      
      // Elements composant
      Element composant1 = new Element("composant");
      composant1.setAttribute(NAME, "dfce_serveur");
      if (isDfceUp) {
         composant1.setAttribute(TEST, ETAT_DFCE_OK);
      } else {
         composant1.setAttribute(TEST, ETAT_DFCE_KO);
      }
      
      composant.addContent(composant1);
      
      Element composant2 = new Element("composant");
      composant2.setAttribute(NAME, "dfce_consultation");
      if (isDfceConsultUp) {
         composant2.setAttribute(TEST, ETAT_DFCE_OK);
      } else {
         composant2.setAttribute(TEST, ETAT_DFCE_KO);
      }
      
      composant.addContent(composant2);
      
      racine.addContent(composant);
      
      return racine;
	}
	
	/**
    * Méthode permettant de générér un flux XML
    * pour savoir si l'API DFCE est actif
    * et si le couple DFCE/Cassandra est actif.
    *  
    * @param racine
    * @param isDfceUp
    * @param isDfceConsultUp
    * @return element racine du flux XML
    */
   private static Element writeXmlCaptureMasse(Element racine, CaptureMasseInfo captureMI) {
      // Element fils - informations
      Element composant = new Element("informations");
      
      // Elements info
      Element composant1 = new Element("info");
      composant1.setAttribute(NAME, "captureMasse_estEnCours");
      if (captureMI.isEnCours()) {
         composant1.setAttribute(VALEUR, ETAT_CM_OUI);
      } else {
         composant1.setAttribute(VALEUR, ETAT_CM_NON);
      }
      composant.addContent(composant1);
      
      Element composant2 = new Element("info");
      composant2.setAttribute(NAME, "captureMasse_avancement");
      composant2.setAttribute(VALEUR, captureMI.getEtatAvancement());
      composant.addContent(composant2);
      
      
      racine.addContent(composant);
      
      return racine;
   }
   
	
	

}
