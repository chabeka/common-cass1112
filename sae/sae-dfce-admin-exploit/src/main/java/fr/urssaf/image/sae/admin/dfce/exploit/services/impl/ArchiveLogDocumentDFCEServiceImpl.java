package fr.urssaf.image.sae.admin.dfce.exploit.services.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobExecutionException;
import org.springframework.batch.core.UnexpectedJobExecutionException;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.docubase.dfce.commons.jobs.JobUtils;

import fr.urssaf.image.sae.admin.dfce.exploit.exception.AdminDfceRuntimeException;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ArchiveLogsRunningEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.PurgeDocumentEventsException;
import fr.urssaf.image.sae.admin.dfce.exploit.messages.ResourceMessagesUtils;
import fr.urssaf.image.sae.admin.dfce.exploit.model.ConnectionParameter;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AbstractService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogDocumentDFCEService;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.Utils;

/**
 * Implémente l'interface : {@link ArchiveLogDocumentDFCEService}
 * <ul>
 * <li>Service de création du journal d'événement de type <b>Documents</b></li>
 * <li>Service de purge des journaux de type <b>Documents</b></li>
 * <li>Service de consultation du fichier d'archivage des logs de type
 * <b>Documents</b></li>
 * </ul>
 * 
 * 
 */
@Service
@Qualifier("archiveLogDocDFCEService")
public class ArchiveLogDocumentDFCEServiceImpl extends AbstractService
      implements ArchiveLogDocumentDFCEService {
   private static final Logger LOGGER = LoggerFactory
         .getLogger(ArchiveLogDocumentDFCEServiceImpl.class);

   private static final DateFormat DFCE_JOBS_DATE_FORMAT = new SimpleDateFormat(
         "yyyyMMddHHmmssSSS");

   @Override
   public final void createDocumentsEventLogs(
         final ConnectionParameter cnxParameter) throws ConnectionServiceEx,
         ArchiveLogsRunningEx {
      try {
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils.loadMessage("docEventLogs.start"),
               cnxParameter.getHost().getHostName());
         if (getServiceProvider().getArchiveService()
               .isDocumentLogsArchiveRunning()) {
            throw new ArchiveLogsRunningEx(ResourceMessagesUtils.loadMessage(
                  "docEventLogs.error", cnxParameter.getHost().getHostName()));
         }

         try {
            getServiceProvider().getJobAdministrationService()
                  .startNextInstance(JobUtils.DOCUMENT_LOGS_ARCHIVE_JOB);
         } catch (JobExecutionException e) {
            throw new AdminDfceRuntimeException(e);
         } catch (UnexpectedJobExecutionException e) {
            throw new AdminDfceRuntimeException(e);
         }

         LOGGER
               .debug(
                     "UUID de la dernière création réussi de la journalisation de type Documents {}",
                     getServiceProvider().getArchiveService()
                           .getLastDocumentLogsArchiveUUID());
         LOGGER
               .debug(
                     "Date de la dernière création réussi de la journalisation de type Documents {}",
                     Utils.dateToString(getServiceProvider()
                           .getArchiveService()
                           .getLastSucessfulDocumentLogsArchiveRunDate()));

         LOGGER.info(ResourceMessagesUtils.loadMessage("docEventLogs.end"),
               cnxParameter.getHost().getHostName());
      } finally {
         closeSAEConnection();
      }
   }

   @Override
   public final void extractDocumentsArchiveFile(
         final ConnectionParameter cnxParameter, final String filePath)
         throws ConnectionServiceEx, ArchiveLogsRunningEx {
      try {
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.start"), cnxParameter
               .getHost().getHostName());
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.filetpath"), filePath);
         final UUID docUuid = getServiceProvider().getArchiveService()
               .getLastDocumentLogsArchiveUUID();

         if (docUuid == null) {
            throw new AdminDfceRuntimeException(
                  "Aucun journal de cycle de vie des archives actuellement disponible dans la base");
         }
         LOGGER
               .debug(
                     "UUID de la dernière création réussi de la journalisation de type Documents  {}",
                     docUuid);

         LOGGER
               .debug(
                     "Date de la dernière création réussi de la journalisation de type Documents {}",
                     Utils.dateToString(getServiceProvider()
                           .getArchiveService()
                           .getLastSucessfulDocumentLogsArchiveRunDate()));

         buildArchiveLogFile(filePath, docUuid);
         LOGGER.info(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.end"), cnxParameter
               .getHost().getHostName());
      } finally {
         closeSAEConnection();
      }
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public final void purgeDocumentsEvents(
         final ConnectionParameter cnxParameter, final int archiveDuration)
         throws ConnectionServiceEx, PurgeDocumentEventsException {
      try {
         Date endDay = Utils.dateFromDeltaInDays(archiveDuration);
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils
               .loadMessage("purgeDocumentsEvents.start"), cnxParameter
               .getHost().getHostName());
         LOGGER
               .debug("La date demandée pour débuter la purge est : {}", endDay);
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("purgeEvents.archiveDuration"), archiveDuration);
         LOGGER.debug(ResourceMessagesUtils.loadMessage("purgeEvents.date"),
               Utils.dateToString(endDay));

         try {

            String sEndData = DFCE_JOBS_DATE_FORMAT.format(endDay);
            String jobParams = String.format(
                  "type=DOCUMENT, end.date(date)=%s", sEndData);
            getServiceProvider().getJobAdministrationService().start(
                  JobUtils.CLEAR_EVENT_JOB, jobParams);

         } catch (JobExecutionException e) {
            throw new PurgeDocumentEventsException(e);
         } catch (UnexpectedJobExecutionException e) {
            throw new PurgeDocumentEventsException(e);
         }

         LOGGER.info(ResourceMessagesUtils
               .loadMessage("purgeDocumentsEvents.end"), cnxParameter.getHost()
               .getHostName());

      } finally {
         closeSAEConnection();
      }

   }
}
