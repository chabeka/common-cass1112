package fr.urssaf.image.sae.admin.dfce.exploit.services.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.docubase.dfce.commons.jobs.JobUtils;
import com.docubase.dfce.exception.batch.DfceJobParametersInvalidException;
import com.docubase.dfce.exception.batch.UnexpectedDfceJobExecutionException;
import com.docubase.dfce.exception.batch.launch.DfceJobInstanceAlreadyExistsException;
import com.docubase.dfce.exception.batch.launch.DfceJobParametersNotFoundException;
import com.docubase.dfce.exception.batch.launch.NoSuchDfceJobException;
import com.docubase.dfce.exception.batch.repository.DfceJobExecutionAlreadyRunningException;
import com.docubase.dfce.exception.batch.repository.DfceJobInstanceAlreadyCompleteException;
import com.docubase.dfce.exception.batch.repository.DfceJobRestartException;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.AdminDfceRuntimeException;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ArchiveLogsRunningEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.PurgeDocumentEventsException;
import fr.urssaf.image.sae.admin.dfce.exploit.messages.ResourceMessagesUtils;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AbstractService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogDocumentDFCEService;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.Utils;

/**
 * Implémente l'interface : {@link ArchiveLogDocumentDFCEService}
 * <ul>
 * <li>Service de création du journal d'événement de type <b>Documents</b></li>
 * <li>Service de purge des journaux de type <b>Documents</b></li>
 * <li>Service de consultation du fichier d'archivage des logs de type
 * <b>Documents</b></li>
 * </ul>
 */
@Service
@Qualifier("archiveLogDocDFCEService")
public class ArchiveLogDocumentDFCEServiceImpl extends AbstractService
                                               implements
                                               ArchiveLogDocumentDFCEService {
   private static final Logger LOGGER = LoggerFactory
                                                     .getLogger(ArchiveLogDocumentDFCEServiceImpl.class);

   @Override
   public final void createDocumentsEventLogs(final DFCEConnection cnxParameter)
         throws ConnectionServiceEx, ArchiveLogsRunningEx {
      try {
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils.loadMessage("docEventLogs.start"),
                     cnxParameter.getHostName());
         if (getDFCEServices().isDocumentLogsArchiveRunning()) {
            throw new ArchiveLogsRunningEx(ResourceMessagesUtils.loadMessage(
                                                                             "docEventLogs.error",
                                                                             cnxParameter.getHostName()));
         }

         try {
            getDFCEServices().startNextInstance(JobUtils.DOCUMENT_LOGS_ARCHIVE_JOB);
         }
         catch (final NoSuchDfceJobException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobParametersNotFoundException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobRestartException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobExecutionAlreadyRunningException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobInstanceAlreadyCompleteException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobParametersInvalidException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final UnexpectedDfceJobExecutionException e) {
            throw new AdminDfceRuntimeException(e);
         }

         LOGGER
               .debug(
                      "UUID de la dernière création réussi de la journalisation de type Documents {}",
                      getDFCEServices().getLastDocumentLogsArchiveUUID());
         LOGGER
               .debug(
                      "Date de la dernière création réussi de la journalisation de type Documents {}",
                      Utils.dateToString(getDFCEServices().getLastSucessfulDocumentLogsArchiveRunDate()));

         LOGGER.info(ResourceMessagesUtils.loadMessage("docEventLogs.end"),
                     cnxParameter.getHostName());
      }
      finally {
         closeSAEConnection();
      }
   }

   @Override
   public final void extractDocumentsArchiveFile(
                                                 final DFCEConnection cnxParameter, final String filePath)
         throws ConnectionServiceEx, ArchiveLogsRunningEx {
      try {
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils
                                          .loadMessage("consultArchiveDocument.start"),
                     cnxParameter
                                 .getHostName());
         LOGGER.debug(ResourceMessagesUtils
                                           .loadMessage("consultArchiveDocument.filetpath"),
                      filePath);
         final UUID docUuid = getDFCEServices().getLastDocumentLogsArchiveUUID();

         if (docUuid == null) {
            throw new AdminDfceRuntimeException(
                                                "Aucun journal de cycle de vie des archives actuellement disponible dans la base");
         }
         LOGGER
               .debug(
                      "UUID de la dernière création réussi de la journalisation de type Documents  {}",
                      docUuid);

         LOGGER
               .debug(
                      "Date de la dernière création réussi de la journalisation de type Documents {}",
                      Utils.dateToString(getDFCEServices().getLastSucessfulDocumentLogsArchiveRunDate()));

         buildArchiveLogFile(filePath, docUuid);
         LOGGER.info(ResourceMessagesUtils
                                          .loadMessage("consultArchiveDocument.end"),
                     cnxParameter
                                 .getHostName());
      }
      finally {
         closeSAEConnection();
      }
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public final void purgeDocumentsEvents(final DFCEConnection cnxParameter,
                                          final int archiveDuration)
         throws ConnectionServiceEx,
         PurgeDocumentEventsException {
      try {
         final Date endDay = Utils.dateFromDeltaInDays(archiveDuration);
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils
                                          .loadMessage("purgeDocumentsEvents.start"),
                     cnxParameter
                                 .getHostName());
         LOGGER
               .debug("La date demandée pour débuter la purge est : {}", endDay);
         LOGGER.debug(ResourceMessagesUtils
                                           .loadMessage("purgeEvents.archiveDuration"),
                      archiveDuration);
         LOGGER.debug(ResourceMessagesUtils.loadMessage("purgeEvents.date"),
                      Utils.dateToString(endDay));

         try {
            final DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
            final String sEndData = dateFormat.format(endDay);
            final String jobParams = String.format(
                                                   "type=DOCUMENT, end.date(date)=%s",
                                                   sEndData);
            getDFCEServices().start(JobUtils.CLEAR_EVENT_JOB, jobParams);

         }
         catch (final NoSuchDfceJobException e) {
            throw new PurgeDocumentEventsException(e);
         }
         catch (final DfceJobInstanceAlreadyExistsException e) {
            throw new PurgeDocumentEventsException(e);
         }
         catch (final DfceJobParametersInvalidException e) {
            throw new PurgeDocumentEventsException(e);
         }

         LOGGER.info(ResourceMessagesUtils
                                          .loadMessage("purgeDocumentsEvents.end"),
                     cnxParameter
                                 .getHostName());

      }
      finally {
         closeSAEConnection();
      }

   }
}
