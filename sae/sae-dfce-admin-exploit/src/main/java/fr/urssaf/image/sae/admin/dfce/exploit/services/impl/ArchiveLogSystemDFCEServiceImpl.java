package fr.urssaf.image.sae.admin.dfce.exploit.services.impl;

import java.util.Date;
import java.util.UUID;

import org.apache.commons.lang.time.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import fr.urssaf.image.sae.admin.dfce.exploit.exception.ArchiveLogsRunningEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.messages.ResourceMessagesUtils;
import fr.urssaf.image.sae.admin.dfce.exploit.model.ConnectionParameter;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AbstractService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogSystemDFCEService;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.BaseUtils;

/**
 * Implémente l'interface : {@link ArchiveLogSystemDFCEService}
 * <ul>
 * <li>Service de création du journal d'événement de type <b>System</b></li>
 * <li>Service de purge des journaux de type <b>System</b></li>
 * <li>Service de consultation du fichier d'archivage de type <b>System</b></li>
 * </ul>
 * 
 * @author rhofir
 * 
 */
@Service
@Qualifier("archiveLogSystemDFCEService")
public class ArchiveLogSystemDFCEServiceImpl extends AbstractService implements
      ArchiveLogSystemDFCEService {
   private static final Logger LOGGER = LoggerFactory
         .getLogger(ArchiveLogSystemDFCEServiceImpl.class);

   @Override
   public final void createSystemEventLogs(
         final ConnectionParameter cnxParameter) throws ConnectionServiceEx,
         ArchiveLogsRunningEx {
      try {
         buildConnexionDFCE(cnxParameter);
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("systemEventLogs.start"), cnxParameter.getHost()
               .getHostName());
         if (getServiceProvider().getArchiveService()
               .isSystemLogsArchiveRunning()) {
            throw new ArchiveLogsRunningEx(ResourceMessagesUtils
                  .loadMessage("docEventLogs.error"));
         }
         getServiceProvider().getArchiveService().createNextSystemLogsArchive();
         LOGGER
               .debug(
                     "UUID de la dernière création réussi de la journalisation de type System {}",
                     getServiceProvider().getArchiveService()
                           .getLastSystemLogsArchiveUUID());
         LOGGER
               .debug(
                     "Date de la dernière création réussi de la journalisation de type System {}",
                     BaseUtils.dateToString(getServiceProvider()
                           .getArchiveService()
                           .getLastSucessfulSystemLogsArchiveRunDate()));
         LOGGER.debug(ResourceMessagesUtils.loadMessage("systemEventLogs.end"),
               cnxParameter.getHost().getHostName());
      } finally {
         closeConnection();
      }
   }

   @Override
   public final void purgeSystemEvents(final ConnectionParameter cnxParameter,
         final int archiveDuration) throws ConnectionServiceEx {
      try {
         Date endDay = null;
         buildConnexionDFCE(cnxParameter);
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("purgeSystemEvents.start"), cnxParameter.getHost()
               .getHostName());
         if (archiveDuration == -1) {
            endDay = DateUtils.addDays(new Date(), -30);
         } else {
            endDay = DateUtils.addDays(new Date(), archiveDuration);
         }
         final Date dateLast = getServiceProvider().getArchiveService()
               .getLastSucessfulSystemLogsArchiveRunDate();
         if (endDay.after(dateLast)) {
            endDay = dateLast;
         }

         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("purgeEvents.archiveDuration"), archiveDuration);
         LOGGER.debug(ResourceMessagesUtils.loadMessage("purgeEvents.date"),
               BaseUtils.dateToString(endDay));
         getServiceProvider().getArchiveService().clearSystemEventsTo(endDay);
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("purgeSystemEvents.end"), cnxParameter.getHost()
               .getHostName());
      } finally {
         closeConnection();
      }

   }

   @Override
   public final void extractSystemArchiveFile(
         final ConnectionParameter cnxParameter, final String filePath)
         throws ConnectionServiceEx, ArchiveLogsRunningEx {
      try {
         buildConnexionDFCE(cnxParameter);
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.start"), cnxParameter
               .getHost().getHostName());
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.filetpath"), filePath);
         final UUID docUuid = getServiceProvider().getArchiveService()
               .getLastSystemLogsArchiveUUID();
         LOGGER
               .debug(
                     "UUID de la dernière création réussi de la journalisation de type System  {}",
                     docUuid);
         LOGGER
               .debug(
                     "Date de la dernière création réussi de la journalisation de type System {}",
                     BaseUtils.dateToString(getServiceProvider()
                           .getArchiveService()
                           .getLastSucessfulSystemLogsArchiveRunDate()));
         buildArchiveLogFile(filePath, docUuid);
         LOGGER.debug(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.end"), cnxParameter
               .getHost().getHostName());
      } finally {
         closeConnection();
      }

   }
}
