package fr.urssaf.image.sae.admin.dfce.exploit.services.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.docubase.dfce.commons.jobs.JobUtils;
import com.docubase.dfce.exception.batch.DfceJobParametersInvalidException;
import com.docubase.dfce.exception.batch.UnexpectedDfceJobExecutionException;
import com.docubase.dfce.exception.batch.launch.DfceJobInstanceAlreadyExistsException;
import com.docubase.dfce.exception.batch.launch.DfceJobParametersNotFoundException;
import com.docubase.dfce.exception.batch.launch.NoSuchDfceJobException;
import com.docubase.dfce.exception.batch.repository.DfceJobExecutionAlreadyRunningException;
import com.docubase.dfce.exception.batch.repository.DfceJobInstanceAlreadyCompleteException;
import com.docubase.dfce.exception.batch.repository.DfceJobRestartException;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.AdminDfceRuntimeException;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ArchiveLogsRunningEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.PurgeSystemEventsException;
import fr.urssaf.image.sae.admin.dfce.exploit.messages.ResourceMessagesUtils;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AbstractService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogSystemDFCEService;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.Utils;

/**
 * Implémente l'interface : {@link ArchiveLogSystemDFCEService}
 * <ul>
 * <li>Service de création du journal d'événement de type <b>System</b></li>
 * <li>Service de purge des journaux de type <b>System</b></li>
 * <li>Service de consultation du fichier d'archivage de type <b>System</b></li>
 * </ul>
 */
@Service
@Qualifier("archiveLogSystemDFCEService")
public class ArchiveLogSystemDFCEServiceImpl extends AbstractService implements
                                             ArchiveLogSystemDFCEService {

   private static final Logger LOGGER = LoggerFactory
                                                     .getLogger(ArchiveLogSystemDFCEServiceImpl.class);

   /**
    * {@inheritDoc}
    * <p>
    * La redéfinition de cette méthode permet de s'affranchir de la conception
    * d'origine qui viole la loi de Déméter.
    * </p>
    */
   @Override
   protected void buildAndOpenSAEConnexion(final DFCEConnection connParams)
         throws ConnectionServiceEx {
      super.buildAndOpenSAEConnexion(connParams);
   }

   @Override
   public void createSystemEventLogs(final DFCEConnection connParams, final int days)
         throws ConnectionServiceEx, ArchiveLogsRunningEx {
      try {
         assert connParams != null;
         buildAndOpenSAEConnexion(connParams);
         checkSystemLogNotRunning(connParams);

         /**
          * Lancement du job de journalisation DFCE : si une durée est spécifiée
          * on la retranche de la date du jour avant de lancer la production de
          * journal.
          */
         try {
            if (days == -1) {
               logBeforeArchiveJob(connParams, days, null);
               getDFCEServices().startNextInstance(JobUtils.SYSTEM_LOGS_ARCHIVE_JOB);
            } else {
               final Date endDay = Utils.dateFromDeltaInDays(days);
               logBeforeArchiveJob(connParams, days, endDay);
               // TODO Redmine 3385 : appliquer endDay aux paramètres du job
               getDFCEServices().startNextInstance(JobUtils.SYSTEM_LOGS_ARCHIVE_JOB);
            }
            logAfterArchiveJob(connParams);
         }
         catch (final NoSuchDfceJobException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobParametersNotFoundException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobRestartException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobExecutionAlreadyRunningException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobInstanceAlreadyCompleteException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final DfceJobParametersInvalidException e) {
            throw new AdminDfceRuntimeException(e);
         }
         catch (final UnexpectedDfceJobExecutionException e) {
            throw new AdminDfceRuntimeException(e);
         }

      }
      finally {
         closeSAEConnection();
      }
   }

   @Override
   public void purgeSystemEvents(final DFCEConnection connParams, final int days)
         throws ConnectionServiceEx, PurgeSystemEventsException {
      try {
         assert connParams != null;
         assert days > 0;

         final Date endDate = Utils.dateFromDeltaInDays(days);
         logBeforePurgeJob(connParams, days, endDate);
         buildAndOpenSAEConnexion(connParams);
         // Lancement du job de purge DFCE
         try {

            final DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
            final String sEndDay = dateFormat.format(endDate);
            final String jobParams = String.format("type=SYSTEM, end.date(date)=%s",
                                                   sEndDay);

            getDFCEServices().start(JobUtils.CLEAR_EVENT_JOB, jobParams);

            logAfterPurgeJob(connParams);

         }
         catch (final NoSuchDfceJobException e) {
            throw new PurgeSystemEventsException(e);
         }
         catch (final DfceJobInstanceAlreadyExistsException e) {
            throw new PurgeSystemEventsException(e);
         }
         catch (final DfceJobParametersInvalidException e) {
            throw new PurgeSystemEventsException(e);
         }

      }
      finally {
         closeSAEConnection();
      }
   }

   @Override
   public final void extractSystemArchiveFile(
                                              final DFCEConnection cnxParameter, final String filePath)
         throws ConnectionServiceEx, ArchiveLogsRunningEx {
      try {
         buildAndOpenSAEConnexion(cnxParameter);
         LOGGER.info(ResourceMessagesUtils
                                          .loadMessage("consultArchiveDocument.start"),
                     cnxParameter
                                 .getHostName());
         LOGGER.debug(ResourceMessagesUtils
                                           .loadMessage("consultArchiveDocument.filetpath"),
                      filePath);
         final UUID docUuid = getDFCEServices().getLastSystemLogsArchiveUUID();

         if (docUuid == null) {
            throw new AdminDfceRuntimeException(
                                                "Aucun journal des événements actuellement disponible dans la base");
         }

         LOGGER
               .debug(
                      "UUID de la dernière création réussi de la journalisation de type System  {}",
                      docUuid);
         LOGGER
               .debug(
                      "Date de la dernière création réussi de la journalisation de type System {}",
                      Utils.dateToString(getDFCEServices().getLastSucessfulSystemLogsArchiveRunDate()));
         buildArchiveLogFile(filePath, docUuid);
         LOGGER.info(ResourceMessagesUtils
                                          .loadMessage("consultArchiveDocument.end"),
                     cnxParameter
                                 .getHostName());
      }
      finally {
         closeSAEConnection();
      }
   }

   /**
    * Lève une exception si le job DFCE de journalisation des événements du
    * système est déjà lancé.
    * 
    * @param connParams
    * @throws ArchiveLogsRunningEx
    *            si le job de journalisation est déjà lancé.
    */
   private void checkSystemLogNotRunning(final DFCEConnection connParams)
         throws ArchiveLogsRunningEx {
      if (getDFCEServices().isSystemLogsArchiveRunning()) {
         throw new ArchiveLogsRunningEx(ResourceMessagesUtils.loadMessage("systemEventLogs.error", connParams.getHostName()));
      }
   }

   /**
    * Informations à logger avant la journalisation des événements du système.
    * 
    * @param connParams
    *           paramètres de connexion à DFCE.
    * @param days
    *           nombre de jours à retrancher à la date actuelle.
    * @param computedDate
    *           date calculée à partir du paramètre <code>days</code>.
    */
   private void logBeforeArchiveJob(final DFCEConnection connParams, final int days,
                                    final Date computedDate) {

      LOGGER.info(ResourceMessagesUtils.loadMessage("systemEventLogs.start"),
                  connParams.getHostName());

      LOGGER.debug(ResourceMessagesUtils.loadMessage("systemEventLogs.days"),
                   days);

      if (computedDate != null) {
         LOGGER.debug(
                      ResourceMessagesUtils.loadMessage("systemEventLogs.date"),
                      Utils
                           .dateToString(computedDate));
      }
   }

   /**
    * Informations à logger après la journalisation des événements du système.
    * 
    * @param connParams
    *           paramètres de connexion à DFCE.
    */
   private void logAfterArchiveJob(final DFCEConnection connParams) {
      LOGGER.info(ResourceMessagesUtils.loadMessage("systemEventLogs.end"),
                  connParams.getHostName());

      if (getDFCEServices().isSystemLogsArchiveRunning()) {
         LOGGER.warn("Le job SystemLogsArchive est à l'état running");
      }
      LOGGER.debug("UUID du dernier journal système {}",
                   getDFCEServices().getLastSystemLogsArchiveUUID());
      LOGGER.debug("Date de création du dernier journal système {}",
                   Utils
                        .dateToString(getDFCEServices().getLastSucessfulSystemLogsArchiveRunDate()));
   }

   /**
    * Informations à logger avant la purge des événements du système.
    * 
    * @param connParams
    *           paramètres de connexion à DFCE.
    * @param days
    *           nombre de jours à retrancher à la date actuelle.
    * @param computedDate
    *           date calculée à partir du paramètre <code>days</code>.
    */
   private void logBeforePurgeJob(final DFCEConnection connParams, final int days,
                                  final Date computedDate) {
      LOGGER.info(ResourceMessagesUtils.loadMessage("purgeSystemEvents.start"),
                  connParams.getHostName());
      LOGGER.debug(ResourceMessagesUtils
                                        .loadMessage("purgeEvents.archiveDuration"),
                   days);
      LOGGER.debug(ResourceMessagesUtils.loadMessage("purgeSystemEvents.date"),
                   Utils.dateToString(computedDate));
   }

   /**
    * Informations à logger après la purge des événements du système.
    * 
    * @param connParams
    *           paramètres de connexion à DFCE.
    */
   private void logAfterPurgeJob(final DFCEConnection connParams) {
      LOGGER.info(ResourceMessagesUtils.loadMessage("purgeSystemEvents.end"),
                  connParams.getHostName());
   }

}
