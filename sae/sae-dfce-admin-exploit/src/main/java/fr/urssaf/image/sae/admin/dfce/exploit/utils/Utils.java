package fr.urssaf.image.sae.admin.dfce.exploit.utils;

import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Cette classe contient des méthodes utilitaires
 * 
 * @author rhofir
 * 
 */
public final class Utils {

   private static final Logger LOGGER = LoggerFactory
         .getLogger(BaseUtils.class);

   /** Cette classe n'est pas faite pour être instanciée. */
   private Utils() {
      assert false;
   }

   /**
    * Convertit une date en chaîne
    * 
    * @param date
    *           : La date à convertir
    * @return chaîne à partir d'une date
    */
   @SuppressWarnings("PMD.DataflowAnomalyAnalysis")
   public static String dateToString(final Date date) {
      String newDate = StringUtils.EMPTY;
      try {
         if (date != null) {
            final SimpleDateFormat formatter = new SimpleDateFormat(
                  Constantes.DATE_PATTERN, Constantes.DEFAULT_LOCAL);
            newDate = formatter.format(date);
         }
      } catch (Exception e) {
         LOGGER.error("Erreur de parsing. Détail : {}", e.getMessage());
      }
      return newDate;
   }

   /**
    * Simplifie l'écriture des boucles foreach quand l'argument peut être
    * {@code null}.
    * 
    * @param <T>
    *           le type des éléments
    * @param anIterable
    *           les éléments à parcourir
    * @return les éléments, ou une collection vide si l'argument était null
    */
   @SuppressWarnings("PMD.OnlyOneReturn")
   public static <T> Iterable<T> nullSafeIterable(final Iterable<T> anIterable) {
      if (anIterable == null) {
         return Collections.emptyList();
      } else {
         return anIterable;
      }
   }

   /**
    * Simplifie l'écriture des map
    * 
    * @param map
    *           le type des éléments
    * @param <K>
    *           : type
    * @param <V>
    *           : type
    * @return les éléments, ou une map vide si l'argument était null
    */
   @SuppressWarnings("PMD.OnlyOneReturn")
   public static <K, V> Map<K, V> nullSafeMap(final Map<K, V> map) {
      if (map == null) {
         return Collections.emptyMap();
      } else {
         return map;
      }
   }

}
