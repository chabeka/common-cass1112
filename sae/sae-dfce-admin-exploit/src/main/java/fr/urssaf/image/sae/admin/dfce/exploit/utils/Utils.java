package fr.urssaf.image.sae.admin.dfce.exploit.utils;

import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;

/**
 * Cette classe contient des méthodes utilitaires
 * 
 * 
 */
public final class Utils {

   /** Cette classe n'est pas faite pour être instanciée. */
   private Utils() {

   }
   
   /**
    * Retranche un nombre de jours à la date actuelle.
    * <br />
    * Exemples :
    * <code>
    * <ul>
    * <li>yesterday = dateFromDeltaInDays(1)</li>
    * <li>aWeekAgo = dateFromDeltaInDays(7)</li>
    * <ul>
    * </code>
    * 
    * @param days Nombre de jour à retrancher à la date d'aujourd'hui
    * @return Date antérieure à la date du jour (si days est positif)
    */
   public static Date dateFromDeltaInDays(int days) {
      return dateFromDeltaInDays(days, new Date());
   }
   
   /**
    * Retranche un nombre de jours à une date.
    * 
    * @param days Nombre de jour à retrancher à la date <code>fromDate</code>
    * @param fromDate Date de référence
    * @return Date antérieure à la date de référence (si days est positif)
    */   
   public static Date dateFromDeltaInDays(int days, Date fromDate) {
      return DateUtils.addDays(fromDate, -Math.abs(days));
   }   

   /**
    * Convertit une date en chaîne
    * 
    * @param date
    *           : La date à convertir
    * @return chaîne à partir d'une date
    */
   public static String dateToString(final Date date) {
      String newDate = StringUtils.EMPTY;

      if (date != null) {
         final SimpleDateFormat formatter = new SimpleDateFormat(
               Constantes.DATE_PATTERN, Constantes.DEFAULT_LOCAL);
         newDate = formatter.format(date);
      }

      return newDate;
   }

   /**
    * Simplifie l'écriture des boucles foreach quand l'argument peut être
    * {@code null}.
    * 
    * @param <T>
    *           le type des éléments
    * @param anIterable
    *           les éléments à parcourir
    * @return les éléments, ou une collection vide si l'argument était null
    */
   public static <T> Iterable<T> nullSafeIterable(final Iterable<T> anIterable) {
      if (anIterable == null) {
         return Collections.emptyList();
      } else {
         return anIterable;
      }
   }

}
