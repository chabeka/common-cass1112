/**
 * 
 */
package fr.urssaf.image.sae.admin.dfce.exploit.services.impl;

import java.util.Iterator;
import java.util.UUID;

import net.docubase.toolkit.model.ToolkitFactory;
import net.docubase.toolkit.model.base.Base;
import net.docubase.toolkit.model.document.Document;
import net.docubase.toolkit.model.search.SearchQuery;
import net.docubase.toolkit.service.ged.SearchService;
import net.docubase.toolkit.service.ged.StoreService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.docubase.dfce.exception.FrozenDocumentException;

import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.model.Configuration;
import fr.urssaf.image.sae.admin.dfce.exploit.model.ConnectionParameter;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AbstractService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogSystemDFCEService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.RollbackService;

/**
 * Implémente l'interface : {@link ArchiveLogSystemDFCEService}
 * <ul>
 * <li>Service de rollback de traitement de masse</li>
 * </ul>
 */
@Service
public class RollbackServiceImpl extends AbstractService implements
      RollbackService {

   private static final Logger LOGGER = LoggerFactory
         .getLogger(RollbackServiceImpl.class);

   @Autowired
   private Configuration configuration;

   /**
    * {@inheritDoc}
    */
   @Override
   public void rollback(ConnectionParameter cnxParameter, UUID idTraitement)
         throws ConnectionServiceEx {
      String trcPrefix = "rollback()";
      LOGGER.info("{} - début", trcPrefix);

      try {
         buildAndOpenSAEConnexion(cnxParameter);

         SearchService searchService = getServiceProvider().getSearchService();
         StoreService storeService = getServiceProvider().getStoreService();

         String query = "iti:" + idTraitement.toString();
         Base base = getServiceProvider().getBaseAdministrationService()
               .getBase(configuration.getBaseName());

         SearchQuery searchQuery = ToolkitFactory.getInstance()
               .createMonobaseQuery(query, base);

         Iterator<Document> iterator = searchService
               .createDocumentIterator(searchQuery);
         Document document;
         int count = 0;
         while (iterator.hasNext()) {
            document = iterator.next();
            try {
               storeService.deleteDocument(document.getUuid());
               LOGGER.debug("{} - Suppression du document {} "
                     + "concernant le traitement de masse {} "
                     + "réalisée avec succès. {} déjà supprimés", new Object[] { trcPrefix,
                     document.getUuid(), idTraitement.toString(), count });
               count++;

            } catch (FrozenDocumentException exception) {
               LOGGER.error("{} - Impossible de supprimer le document {} "
                     + "concernant le traitement de masse {}", new Object[] {
                     trcPrefix, document.getUuid(), idTraitement.toString() });
            }
         }

      } finally {
         closeSAEConnection();
      }

      LOGGER.info("{} - fin", trcPrefix);
   }
}
