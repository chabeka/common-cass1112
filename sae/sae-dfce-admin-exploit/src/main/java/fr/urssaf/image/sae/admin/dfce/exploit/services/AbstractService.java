package fr.urssaf.image.sae.admin.dfce.exploit.services;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.util.UUID;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.Validate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ArchiveLogsRunningEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.messages.ResourceMessagesUtils;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.BaseUtils;
import net.docubase.toolkit.model.base.Base;
import net.docubase.toolkit.model.document.Document;
import net.docubase.toolkit.service.ServiceProvider;

/**
 * Cette classe contient les éléments communs des différentes services.
 * 
 * 
 */
public abstract class AbstractService {
   private static final String DATABASE_ACTION = "database.action";
   private static final String DATABASE_IMPACT = "database.impact";
   private static final String PARAM_REQUIRED = "database.model.parameters.required";
   private ServiceProvider serviceProvider;
   private DFCEConnection cnxParameter;
   private static final Logger LOGGER = LoggerFactory
         .getLogger(AbstractService.class);

   /**
    * Ouvre la connection DFCE.
    * 
    * @throws ConnectionServiceEx
    *            Lorsqu'un problème survient lors de la connexion
    */
   public void openConnection() throws ConnectionServiceEx {
      setServiceProvider(ServiceProvider.newServiceProvider());
      try {
         String url = BaseUtils.buildUrlForConnection(cnxParameter);
         LOGGER.debug("Connexion au serveur DFCE {}", url);
         getServiceProvider().connect(cnxParameter.getLogin(),
               cnxParameter.getPassword(), url, cnxParameter.getTimeout());
         LOGGER.debug("Connexion OK");
      } catch (MalformedURLException malURLException) {
         throw new ConnectionServiceEx(ResourceMessagesUtils
               .loadMessage("url.connection.malformed"), malURLException);
      }
   }

   /**
    * Valider les paramètres d'entrée.
    * 
    * @param cnxParameter
    *           : Paramétrer de connexion à la base.
    */
   protected void checkParameters(final DFCEConnection cnxParameter) {
      Validate.notNull(cnxParameter, ResourceMessagesUtils.loadMessage(
            PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getHostName(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getHostPort(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getLogin(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getPassword(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
   }

   /**
    * Vérifie et ouvrir une connexion DFCE.
    * 
    * @param cnxParameter
    *           : Parameter de connexion DFCE.
    * @throws ConnectionServiceEx
    */
   protected void buildAndOpenSAEConnexion(final DFCEConnection cnxParameter)
         throws ConnectionServiceEx {
      setCnxParameter(cnxParameter);
      checkParameters(cnxParameter);
      openConnection();
   }

   /**
    * Ferme silencieusement la connexion à DFCE.
    */
   public void closeSAEConnection() {
      try {
         getServiceProvider().disconnect();
      } catch (Exception e) {
         LOGGER.error("Erreur lors de la déconnexion à DFCE", e);
      }
   }

   /**
    * Crée un fichier qui contient les logs de type System ou document
    * 
    * @param filePath
    *           : chemin de stockage des logs.
    * @param archiveId
    *           : Identifiant de l'archivage.
    * @throws ArchiveLogsRunningEx
    *            si erreur lors de la création de l'archive
    */
   protected void buildArchiveLogFile(final String filePath,
         final UUID archiveId) throws ArchiveLogsRunningEx {
      final Base archiveBase = getServiceProvider().getArchiveService()
            .getLogsArchiveBase();
      LOGGER.debug("Base d'archivage des fichiers de LOG {}", archiveBase
            .getBaseId());
      final Document archive = getServiceProvider().getSearchService()
            .getDocumentByUUID(archiveBase, archiveId);
      final InputStream documentFile = getServiceProvider().getStoreService()
            .getDocumentFile(archive);
      final String fileName = archive.getFilename() + "."
            + archive.getExtension();

      final File logDoc = new File(filePath, fileName);
      LOGGER.debug("Chemin du fichier de log {}", logDoc.getAbsoluteFile());
      FileOutputStream fos;
      try {
         fos = new FileOutputStream(logDoc);
         IOUtils.copy(documentFile, fos);
      } catch (IOException except) {

         throw new ArchiveLogsRunningEx(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.error"), except);
      }
   }

   /**
    * 
    * @return Les paramètres de connections
    */
   public DFCEConnection getCnxParameter() {
      return cnxParameter;
   }

   /**
    * 
    * @param cnxParameter
    *           : Les paramètres de connections.
    */
   public void setCnxParameter(final DFCEConnection cnxParameter) {
      this.cnxParameter = cnxParameter;
   }

   /**
    * Permet d'initialiser le service provider.
    * 
    * @param serviceProvider
    *           : Le service provider.
    */
   public void setServiceProvider(final ServiceProvider serviceProvider) {
      this.serviceProvider = serviceProvider;
   }

   /**
    * @return Le service provider
    */
   public ServiceProvider getServiceProvider() {
      return serviceProvider;
   }
}
