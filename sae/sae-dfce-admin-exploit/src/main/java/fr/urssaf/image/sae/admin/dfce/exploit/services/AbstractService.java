package fr.urssaf.image.sae.admin.dfce.exploit.services;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.util.UUID;

import net.docubase.toolkit.model.base.Base;
import net.docubase.toolkit.model.document.Document;
import net.docubase.toolkit.service.ServiceProvider;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.Validate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import fr.urssaf.image.sae.admin.dfce.exploit.exception.ArchiveLogsRunningEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.messages.ResourceMessagesUtils;
import fr.urssaf.image.sae.admin.dfce.exploit.model.ConnectionParameter;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.BaseUtils;

/**
 * Cette classe contient les éléments communs des différentes services.
 * 
 * @author rhofir
 * 
 */
@SuppressWarnings("PMD.AbstractClassWithoutAbstractMethod")
public abstract class AbstractService {
   private static final String DATABASE_ACTION = "database.action";
   private static final String DATABASE_IMPACT = "database.impact";
   private static final String PARAM_REQUIRED = "database.model.parameters.required";
   private ServiceProvider serviceProvider;
   private ConnectionParameter cnxParameter;
   private static final Logger LOGGER = LoggerFactory
         .getLogger(AbstractService.class);

   /**
    * {@inheritDoc}
    */
   public final void openConnection() throws ConnectionServiceEx {
      setServiceProvider(ServiceProvider.newServiceProvider());
      try {
         getServiceProvider().connect(cnxParameter.getUser().getLogin(),
               cnxParameter.getUser().getPassword(),
               BaseUtils.buildUrlForConnection(cnxParameter));
      } catch (MalformedURLException malURLException) {
         throw new ConnectionServiceEx(ResourceMessagesUtils.loadMessage(
               "url.connection.malformed", "connection.impact",
               "connection.action"), malURLException);
      }
   }

   /**
    * Valider les paramètres d'entrée.
    * 
    * @param cnxParameter
    *           : Paramétrer de connexion à la base.
    */
   protected final void checkParameters(final ConnectionParameter cnxParameter) {
      Validate.notNull(cnxParameter, ResourceMessagesUtils.loadMessage(
            PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getHost(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getHost().getHostName(),
            ResourceMessagesUtils.loadMessage(PARAM_REQUIRED, DATABASE_IMPACT,
                  DATABASE_ACTION));
      Validate.notNull(cnxParameter.getHost().getHostPort(),
            ResourceMessagesUtils.loadMessage(PARAM_REQUIRED, DATABASE_IMPACT,
                  DATABASE_ACTION));
      Validate.notNull(cnxParameter.getUser(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getUser().getLogin(), ResourceMessagesUtils
            .loadMessage(PARAM_REQUIRED, DATABASE_IMPACT, DATABASE_ACTION));
      Validate.notNull(cnxParameter.getUser().getPassword(),
            ResourceMessagesUtils.loadMessage(PARAM_REQUIRED, DATABASE_IMPACT,
                  DATABASE_ACTION));
   }

   /**
    * Vérifie et ouvrir une connexion DFCE.
    * 
    * @param cnxParameter
    *           : Parameter de connexion DFCE.
    * @throws ConnectionServiceEx
    */
   protected final void buildConnexionDFCE(
         final ConnectionParameter cnxParameter) throws ConnectionServiceEx {
      setCnxParameter(cnxParameter);
      checkParameters(cnxParameter);
      openConnection();
   }

   protected final void buildArchiveLogFile(final String filePath,
         final UUID archiveId) throws ArchiveLogsRunningEx {
      final Base archiveBase = getServiceProvider().getArchiveService()
            .getLogsArchiveBase();
      LOGGER.debug("Base d'archivage des fichiers de LOG {}", archiveBase
            .getBaseId());
      final Document archive = getServiceProvider().getSearchService()
            .getDocumentByUUID(archiveBase, archiveId);
      final InputStream documentFile = getServiceProvider().getStoreService()
            .getDocumentFile(archive);
      final String fileName = archive.getFilename() + "."
            + archive.getExtension();

      final File logDoc = new File(filePath, fileName);
      LOGGER.debug("Chemin du fichier de log {}", logDoc.getAbsoluteFile());
      FileOutputStream fos;
      try {
         fos = new FileOutputStream(logDoc);
         IOUtils.copy(documentFile, fos);
      } catch (Exception except) {
         LOGGER.error(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.error"), except
               .getMessage());
         throw new ArchiveLogsRunningEx(ResourceMessagesUtils
               .loadMessage("consultArchiveDocument.error"), except);
      }
   }

   /**
    * {@inheritDoc}
    */
   public final void closeConnection() {
      checkParameters(cnxParameter);
      getServiceProvider().disconnect();
   }

   /**
    * 
    * @return Les paramètres de connections
    */
   public final ConnectionParameter getCnxParameter() {
      return cnxParameter;
   }

   /**
    * 
    * @param cnxParameter
    *           : Les paramètres de connections.
    */
   public final void setCnxParameter(
         final ConnectionParameter cnxParameter) {
      this.cnxParameter = cnxParameter;
   }

   /**
    * Permet d'initialiser le service provider.
    * 
    * @param serviceProvider
    *           : Le service provider.
    */
   public final void setServiceProvider(final ServiceProvider serviceProvider) {
      this.serviceProvider = serviceProvider;
   }

   /**
    * @return Le service provider
    */
   public final ServiceProvider getServiceProvider() {
      return serviceProvider;
   }
}
