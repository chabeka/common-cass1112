package fr.urssaf.image.sae.admin.dfce.exploit.executable;

import org.apache.commons.lang.SystemUtils;
import org.easymock.EasyMock;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.BaseAdministrationPermissionEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.GeneralAdminDfceException;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogDocumentDFCEService;
import junit.framework.Assert;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-sae-dfce-admin-exploit-service-mock-test.xml" })
@SuppressWarnings("PMD.MethodNamingConventions")
public class ArchiveLogDocumentDFCEServiceMainTest {

   private AdministrationSAEMain administrationSAEMain;

   @Autowired
   private ArchiveLogDocumentDFCEService service;

   @Autowired
   private ApplicationContext context;

   @Before
   public void before() {

      administrationSAEMain = new AdministrationSAEMain("");

   }

   @After
   public void after() {

      EasyMock.reset(service);

   }

   private void assertService() {

      EasyMock.verify(service);
   }

   @Test
   public void creatDocumentEvent_success() throws ConnectionServiceEx,
         GeneralAdminDfceException {

      service
            .createDocumentsEventLogs(EasyMock.anyObject(DFCEConnection.class));

      EasyMock.replay(service);

      administrationSAEMain.executeService("createDocEvent", context,
            new String[0]);

      assertService();

   }

   @Test
   public void clearDocumentEvent_success() throws ConnectionServiceEx,
         GeneralAdminDfceException {

      service.purgeDocumentsEvents(EasyMock.anyObject(DFCEConnection.class),
            EasyMock.eq(30));

      EasyMock.replay(service);

      administrationSAEMain.executeService("clearDocEvent", context,
            new String[] { "30" });

      assertService();

   }

   @Test
   public void consultDocEvent_success() throws ConnectionServiceEx,
         GeneralAdminDfceException {

      String dir = SystemUtils.getJavaIoTmpDir().getAbsolutePath();

      service.extractDocumentsArchiveFile(EasyMock
            .anyObject(DFCEConnection.class), EasyMock.eq(dir));

      EasyMock.replay(service);

      administrationSAEMain.executeService("consultDocEvent", context,
            new String[] { dir });

      assertService();

   }

   @Test
   public void consultDocEvent_failure_depot_non_renseignee()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      assertConsultDocEvent_failure(null);
      assertConsultDocEvent_failure("");

   }

   private void assertConsultDocEvent_failure(String filePath)
         throws GeneralAdminDfceException, ConnectionServiceEx {

      try {

         administrationSAEMain.executeService("consultDocEvent", context,
               new String[] { filePath });

         Assert.fail("le service doit lever une IllegalArgumentException");

      } catch (IllegalArgumentException e) {

         Assert.assertEquals("le message de l'exception est inattendu",
               "Le chemin de dépot des fichier de log doit être renseigné.", e
                     .getMessage());
      }
   }

   @Test
   public void consultDocEvent_failure_depot_not_exist()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      try {

         administrationSAEMain.executeService("consultDocEvent", context,
               new String[] { "/fileNotExist" });

         Assert.fail("le service doit lever une BaseAdministrationServiceEx");

      } catch (BaseAdministrationPermissionEx e) {

         Assert
               .assertEquals(
                     "le message de l'exception est inattendu",
                     "Le SAE ne dispose pas des droits d'écriture dans le répertoire /fileNotExist",
                     e.getMessage());
      }

   }

   @Test
   public void clearDocumentEvent_failure_duree_non_renseignee()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      assertClearDocumentEvent_failure("aaa");
      assertClearDocumentEvent_failure("");
      assertClearDocumentEvent_failure(null);

   }

   private void assertClearDocumentEvent_failure(String duree)
         throws GeneralAdminDfceException, ConnectionServiceEx {

      try {

         administrationSAEMain.executeService("clearDocEvent", context,
               new String[] { duree });

         Assert.fail("le service doit lever une IllegalArgumentException");

      } catch (IllegalArgumentException e) {

         Assert.assertEquals("le message de l'exception est inattendu",
               "La durée de conservation doit être renseigné.", e.getMessage());
      }
   }

}
