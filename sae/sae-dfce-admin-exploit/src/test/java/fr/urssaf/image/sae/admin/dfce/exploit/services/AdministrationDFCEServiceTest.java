package fr.urssaf.image.sae.admin.dfce.exploit.services;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.util.Set;

import net.docubase.toolkit.model.reference.LifeCycleRule;
import net.docubase.toolkit.service.ServiceProvider;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.sae.admin.dfce.exploit.exception.AdminDfceRuntimeException;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.BaseAdministrationServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.model.ConnectionParameter;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.BaseUtils;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-sae-dfce-admin-exploit-test.xml" })
@SuppressWarnings("all")
public class AdministrationDFCEServiceTest {
   /** le répertoire de base */
   private static final String BASE_DIR = "src/test/resources/";

   /** le fichier xml de la base */
   public static File BASE_XML_FILE = new File(BASE_DIR + "data/"
         + "saeBase.xml");

   /** le fichier xml des durée de conservation */
   public static File CYCLE_XML_FILE = new File(BASE_DIR + "data/"
         + "LifeCycleRule.xml");

   @Autowired
   @Qualifier("administrationDfceService")
   private AdministrationDFCEService baseAdmiService;

   @Autowired
   private ConnectionParameter cnxParameter;

   /**
    * @return Le service AdministrationDFCEService.
    */
   public final AdministrationDFCEService getBaseAdmiService() {
      return baseAdmiService;
   }

   /**
    * @param baseAdmiService
    *           :Le service AdministrationDFCEService.
    */
   public void setBaseAdmiService(
         final AdministrationDFCEService baseAdmiService) {
      this.baseAdmiService = baseAdmiService;
   }

   /**
    * @return Le paramètre de connexion.
    */
   public final ConnectionParameter getCnxParameter() {
      return cnxParameter;
   }

   /**
    * @param cnxParameter
    *           :Le paramètre de connexion.
    */
   public void setCnxParameter(final ConnectionParameter cnxParameter) {
      this.cnxParameter = cnxParameter;
   }

   @Test
   @Ignore
   public void updateIndexes() throws ConnectionServiceEx {
      baseAdmiService.updateIndexes(cnxParameter);
   }

   @Test
   @Ignore
   public void createBase() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getUser().getLogin(), cnxParameter.getUser()
            .getPassword(), BaseUtils.buildUrlForConnection(cnxParameter));
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();

   }

   @Test(expected = BaseAdministrationServiceEx.class)
   @Ignore
   public void createBaseTwice() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      String baseIdTiwce = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);

   }

   @Test(expected = IllegalArgumentException.class)
   @Ignore
   public void createBaseFaildBaseNull() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      BASE_XML_FILE = null;
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getUser().getLogin(), cnxParameter.getUser()
            .getPassword(), BaseUtils.buildUrlForConnection(cnxParameter));
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();
   }

   @Test(expected = Exception.class)
   @Ignore
   public void createBaseFaildReverseOrder() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            CYCLE_XML_FILE, BASE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getUser().getLogin(), cnxParameter.getUser()
            .getPassword(), BaseUtils.buildUrlForConnection(cnxParameter));
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();
   }

   @Test(expected = IllegalArgumentException.class)
   @Ignore
   public void createBaseFaildDocumentsTypeNull() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      CYCLE_XML_FILE = null;
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getUser().getLogin(), cnxParameter.getUser()
            .getPassword(), BaseUtils.buildUrlForConnection(cnxParameter));
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();
   }

   @Test
   @Ignore
   public void updateLifeCycleRules() throws MalformedURLException,
         BaseAdministrationServiceEx, ConnectionServiceEx {
      BASE_XML_FILE = null;

      baseAdmiService.updateLifeCycleRules(cnxParameter, CYCLE_XML_FILE);

      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getUser().getLogin(), cnxParameter.getUser()
            .getPassword(), BaseUtils.buildUrlForConnection(cnxParameter));

      Set<LifeCycleRule> lifeCycles = service.getStorageAdministrationService()
            .getAllLifeCycleRules();

      // l'API rajoute logiquement à la liste un type de document qui est
      // DEFAULT_DOCUMENT_TYPE
      Assert
            .assertEquals(
                  "Incohérence entre le contenu du fichier LifeCycleRule.xml et la liste des types de documents renvoyés par l'API DFCE",
                  1040, lifeCycles.size());

   }
   
   @Test
   @Ignore
   public void reindexCategoriFailure() throws ConnectionServiceEx{
      String categories ="meta/meta2";
      try{
         baseAdmiService.reindexCategories(cnxParameter, categories);
      }catch(AdminDfceRuntimeException e){
         Assert.assertTrue("les métadonnées spécifiées ne respectent pas la syntaxe xxx|yy|zzzz".equals(e.getMessage()));
      }
      Assert.fail();
   }
   
   
   @Test
   @Ignore
   public void reindexCategoriSuccess() throws ConnectionServiceEx{
      String categories ="meta3|meta4";
      //TODO compléter le test
      try{
         baseAdmiService.reindexCategories(cnxParameter, categories);
      }catch(AdminDfceRuntimeException e){
         Assert.fail();
      }

   }
}
