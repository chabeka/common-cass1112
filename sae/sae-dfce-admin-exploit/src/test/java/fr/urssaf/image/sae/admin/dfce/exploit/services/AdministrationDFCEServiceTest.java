package fr.urssaf.image.sae.admin.dfce.exploit.services;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.util.Set;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.constantes.ReindexMetaConstantes;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.AdminDfceRuntimeException;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.BaseAdministrationServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.BaseUtils;
import net.docubase.toolkit.model.base.Base;
import net.docubase.toolkit.model.index.IndexInformation;
import net.docubase.toolkit.model.index.RangeIndexInformation;
import net.docubase.toolkit.model.reference.LifeCycleRule;
import net.docubase.toolkit.service.ServiceProvider;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-sae-dfce-admin-exploit-test.xml" })
@SuppressWarnings("all")
public class AdministrationDFCEServiceTest {
   /** le répertoire de base */
   private static final String BASE_DIR = "src/test/resources/";

   /** le fichier xml de la base */
   public static File BASE_XML_FILE = new File(BASE_DIR + "data/"
         + "saeBase.xml");

   /** le fichier xml des durée de conservation */
   public static File CYCLE_XML_FILE = new File(BASE_DIR + "data/"
         + "LifeCycleRule.xml");
   
   /**
    * Nom d'une base existante.
    */
   public static final String BASE_NAME = "SAE-INT";

   @Autowired
   @Qualifier("administrationDfceService")
   private AdministrationDFCEService baseAdmiService;

   @Autowired
   private DFCEConnection cnxParameter;

   /**
    * @return Le service AdministrationDFCEService.
    */
   public final AdministrationDFCEService getBaseAdmiService() {
      return baseAdmiService;
   }

   /**
    * @param baseAdmiService
    *           :Le service AdministrationDFCEService.
    */
   public void setBaseAdmiService(
         final AdministrationDFCEService baseAdmiService) {
      this.baseAdmiService = baseAdmiService;
   }

   /**
    * @return Le paramètre de connexion.
    */
   public final DFCEConnection getCnxParameter() {
      return cnxParameter;
   }

   /**
    * @param cnxParameter
    *           :Le paramètre de connexion.
    */
   public void setCnxParameter(final DFCEConnection cnxParameter) {
      this.cnxParameter = cnxParameter;
   }

   @Test
   @Ignore
   public void updateIndexes() throws ConnectionServiceEx {
      baseAdmiService.updateIndexes(cnxParameter);
   }

   @Test
   @Ignore
   public void createBase() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getLogin(), cnxParameter.getPassword(),
            BaseUtils.buildUrlForConnection(cnxParameter), cnxParameter
                  .getTimeout());
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();

   }

   @Test(expected = BaseAdministrationServiceEx.class)
   @Ignore
   public void createBaseTwice() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      String baseIdTiwce = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);

   }

   @Test(expected = IllegalArgumentException.class)
   @Ignore
   public void createBaseFaildBaseNull() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      BASE_XML_FILE = null;
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getLogin(), cnxParameter.getPassword(),
            BaseUtils.buildUrlForConnection(cnxParameter), cnxParameter
                  .getTimeout());
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();
   }

   @Test(expected = Exception.class)
   @Ignore
   public void createBaseFaildReverseOrder() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            CYCLE_XML_FILE, BASE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getLogin(), cnxParameter.getPassword(),
            BaseUtils.buildUrlForConnection(cnxParameter), cnxParameter
                  .getTimeout());
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();
   }

   @Test(expected = IllegalArgumentException.class)
   @Ignore
   public void createBaseFaildDocumentsTypeNull() throws ConnectionServiceEx,
         BaseAdministrationServiceEx, FileNotFoundException,
         MalformedURLException {
      CYCLE_XML_FILE = null;
      String baseId = baseAdmiService.createSAEBase(cnxParameter,
            BASE_XML_FILE, CYCLE_XML_FILE);
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getLogin(), cnxParameter.getPassword(),
            BaseUtils.buildUrlForConnection(cnxParameter), cnxParameter
                  .getTimeout());
      Assert.assertEquals(baseId.trim(), service.getBaseAdministrationService()
            .getBase(baseId.trim()).getBaseId());
      service.disconnect();
   }

   @Test
   @Ignore
   public void updateLifeCycleRules() throws MalformedURLException,
         BaseAdministrationServiceEx, ConnectionServiceEx {
      BASE_XML_FILE = null;

      baseAdmiService.updateLifeCycleRules(cnxParameter, CYCLE_XML_FILE);

      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getLogin(), cnxParameter.getPassword(),
            BaseUtils.buildUrlForConnection(cnxParameter), cnxParameter
                  .getTimeout());

      Set<LifeCycleRule> lifeCycles = service.getStorageAdministrationService()
            .getAllLifeCycleRules();

      // l'API rajoute logiquement à la liste un type de document qui est
      // DEFAULT_DOCUMENT_TYPE
      Assert
            .assertEquals(
                  "Incohérence entre le contenu du fichier LifeCycleRule.xml et la liste des types de documents renvoyés par l'API DFCE",
                  1040, lifeCycles.size());

   }

   @Test
   @Ignore
   public void reindexCategoriFailure() throws ConnectionServiceEx {
      String categories = "meta/meta2";
      try {
         baseAdmiService.reindexCategories(cnxParameter, categories);
      } catch (AdminDfceRuntimeException e) {
         Assert
               .assertTrue("les métadonnées spécifiées ne respectent pas la syntaxe xxx|yy|zzzz"
                     .equals(e.getMessage()));
      }
      Assert.fail();
   }

   @Test
   @Ignore
   public void reindexCategoriSuccess() throws ConnectionServiceEx {
      String categories = String.format("meta3%smeta4",
            ReindexMetaConstantes.SEPARATEUR_METAS);
      // TODO compléter le test
      try {
         baseAdmiService.reindexCategories(cnxParameter, categories);
      } catch (AdminDfceRuntimeException e) {
         Assert.fail();
      }

   }
   
   @Test
   @Ignore
   public void updateDocsStats() throws ConnectionServiceEx {
      baseAdmiService.updateDocsStats(cnxParameter);
   }
   
   @Test
   @Ignore
   public void splitIndex_newOne_iti() throws ConnectionServiceEx,
         MalformedURLException {
      String indexName = "iti";

      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);

      // lance le job du split en deux partie
      String additionalsParams = "strategy=NEW_ONE,range.index.to.split=[min_lower_bound TO max_upper_bound],cache.ttlms=1000";
      baseAdmiService.splitIndex(cnxParameter, indexName, additionalsParams);

      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void mergeIndex_iti() throws ConnectionServiceEx {
      String indexName = "iti";
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      // lance le job du split en deux partie
      String additionalsParams = "lower.bound=min_lower_bound,upper.bound=max_upper_bound,cache.ttlms=1000";
      baseAdmiService.mergeIndex(cnxParameter, indexName, additionalsParams);
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void splitIndex_manual_archivageDate() throws ConnectionServiceEx,
         MalformedURLException {
      String indexName = "SM_ARCHIVAGE_DATE";

      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);

      // lance le job du split en deux partie
      String additionalsParams = "strategy=MANUAL,range.index.to.split=[min_lower_bound TO max_upper_bound],cache.ttlms=1000,new.range.indexes=[min_lower_bound TO 20150501[|[20150501 TO 20150801[|[20150801 TO max_upper_bound]";
      baseAdmiService.splitIndex(cnxParameter, indexName, additionalsParams);

      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void mergeIndex_archivageDate() throws ConnectionServiceEx {
      String indexName = "SM_ARCHIVAGE_DATE";
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      // lance le job du split en deux partie
      String additionalsParams = "lower.bound=min_lower_bound,upper.bound=max_upper_bound,cache.ttlms=1000";
      baseAdmiService.mergeIndex(cnxParameter, indexName, additionalsParams);
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void splitIndex_equiDistributed_uuid() throws ConnectionServiceEx, MalformedURLException {
      String indexName = "SM_UUID";
      long tailleIndex = -1;
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      // recupere la taille de l'index
      final ServiceProvider service = ServiceProvider.newServiceProvider();
      service.connect(cnxParameter.getLogin(), cnxParameter.getPassword(),
            BaseUtils.buildUrlForConnection(cnxParameter), cnxParameter
                  .getTimeout());
      Base base = service.getBaseAdministrationService().getBase(cnxParameter.getBaseName());

      IndexInformation indexRecherche = service
            .getIndexAdministrationService().getIndexByNameInBase(
                  "SM_UUID", base.getUuid());
      if (indexRecherche != null 
            && indexRecherche.getRangeIndexes().size() == 1) {
         // dans ce cas de figure, la base comporte une plage d'index
         // on va la couper en deux
         RangeIndexInformation range = indexRecherche.getRangeIndexes().get(0);
         tailleIndex = (range.getTotalIndexUseCount() / 2) + 1;
      }
      service.disconnect();
      if (tailleIndex == -1) {
         Assert
               .fail("Ce test n'est prévu que pour splitter un index en deux parties egales. Cet index ne doit pas déjà être découpé en plusieurs plages");
      }

      // lance le job du split en deux partie
      String additionalsParams = "strategy=EQUI_DISTRIBUTED,range.index.to.split=[min_lower_bound TO max_upper_bound],cache.ttlms=1000,new.range.index.size(long)="
            + Long.toString(tailleIndex);
      baseAdmiService.splitIndex(cnxParameter, indexName, additionalsParams);
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void mergeIndex_uuid() throws ConnectionServiceEx {
      String indexName = "SM_UUID";
      
      // TODO: ce test ne passe pas, il doit y avoir un soucis dans le job dfce
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      // lance le job du split en deux partie
      String additionalsParams = "lower.bound=min_lower_bound,upper.bound=max_upper_bound,cache.ttlms=1000";
      baseAdmiService.mergeIndex(cnxParameter, indexName, additionalsParams);
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void getIndexesOverLimit() throws ConnectionServiceEx {
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      baseAdmiService.getIndexesOverLimit(cnxParameter, Integer.valueOf(100000));
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void getIndexesSize() throws ConnectionServiceEx {
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      baseAdmiService.getIndexesSize(cnxParameter);
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
   
   @Test
   @Ignore
   public void restartJob() throws ConnectionServiceEx {
      
      // changement du nom de la base
      String ancienneBase = cnxParameter.getBaseName();
      cnxParameter.setBaseName(BASE_NAME);
      
      baseAdmiService.restartJob(cnxParameter, Long.valueOf(1));
      
      // remet l'ancien nom de base
      cnxParameter.setBaseName(ancienneBase);
   }
}
