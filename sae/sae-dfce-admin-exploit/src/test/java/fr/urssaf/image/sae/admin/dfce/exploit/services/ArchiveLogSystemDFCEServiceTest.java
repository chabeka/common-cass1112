package fr.urssaf.image.sae.admin.dfce.exploit.services;

import static org.easymock.EasyMock.capture;
import static org.easymock.EasyMock.createMock;
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;
import static org.easymock.EasyMock.verify;

import java.util.Calendar;
import java.util.Date;

import junit.framework.Assert;
import net.docubase.toolkit.service.ged.ArchiveService;

import org.apache.commons.lang.time.DateUtils;
import org.easymock.Capture;
import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.model.ConnectionParameter;
import fr.urssaf.image.sae.admin.dfce.exploit.services.impl.ArchiveLogSystemDFCEServiceImpl;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.Utils;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-sae-dfce-admin-exploit-test.xml" })
@SuppressWarnings("all")
public class ArchiveLogSystemDFCEServiceTest extends ArchiveLogSystemDFCEServiceImpl {
   
   @Autowired
   ConnectionParameter connParams;

   @Override
   protected void buildAndOpenSAEConnexion(ConnectionParameter cnxParameter)
         throws ConnectionServiceEx { /* no-op */ }
   
   @Override
   public void closeSAEConnection() { /* no-op */ };
   
   /**
    * Teste la méthode utilitaire {@link Utils#dateFromDeltaInDays(int)}
    * @throws Exception
    */
   @Test
   public void currentDateDeltaUtils() throws Exception {
      Date delta0 = Utils.dateFromDeltaInDays(0);
      Date delta1 = Utils.dateFromDeltaInDays(1);
      Date delta30 = Utils.dateFromDeltaInDays(30);
      
      Date now = new Date();
      
      Assert.assertTrue(DateUtils.isSameDay(delta0, now));
      Assert.assertTrue(delta1.before(now));
      Assert.assertTrue(delta30.before(delta1));
   }
   
   /**
    * Teste la méthode utilitaire {@link Utils#dateFromDeltaInDays(int, Date)}
    * @throws Exception
    */
   @Test
   public void dateDeltaUtils() throws Exception {
      Calendar cal = Calendar.getInstance();
      cal.set(2013, 11, 25);
      Date xmas = cal.getTime();
      cal.set(2013, 9, 31);
      Date halloween = cal.getTime();
      
      Date xmasMinus55 = Utils.dateFromDeltaInDays(55, xmas);
      Assert.assertNotNull(xmasMinus55);
      Assert.assertTrue(DateUtils.isSameDay(halloween, xmasMinus55));
   }   
   
   /**
    * Teste que la purge DFCE recoive bien la date correspondant
    * au nombre de jour passé en paramètre au service SAE.
    *  
    * @throws Exception
    */
   @Test
   public void SaeDaysToDfceDate() throws Exception {
      ArchiveService dfceArchiveSrvMock = createMock(ArchiveService.class);
      Capture<Date> capturedDate = new Capture<Date>();
      dfceArchiveSrvMock.clearSystemEventsTo(capture(capturedDate));
      expect(dfceArchiveSrvMock).once();
      replay(dfceArchiveSrvMock);
      setArchiveService(dfceArchiveSrvMock);
      
      // SUT      
      this.purgeSystemEvents(this.connParams, 90);
      
      verify(dfceArchiveSrvMock);
      DateTime past = DateTime.now().minusDays(90);
      // Le service DFCE a-t-il reçu la bonne date ?
      Assert.assertTrue(DateUtils.isSameDay(past.toDate(), capturedDate.getValue()));
   }
}
