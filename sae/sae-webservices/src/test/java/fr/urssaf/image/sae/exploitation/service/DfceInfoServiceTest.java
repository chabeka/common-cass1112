package fr.urssaf.image.sae.exploitation.service;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.junit.Test;

import fr.urssaf.image.sae.exploitation.modele.ConfigurationDfce;


/**
 * Tests unitaires de la classe DfceInfoService
 * 
 *
 */
public class DfceInfoServiceTest {

   
   /**
    * On vérifie la méthode DfceInfoService.isDfceUp réussie en s'appuyant
    * sur une configuration DFCE qui pointe sur le serveur de développement,
    * qui est censé être toujours en ligne 
    * 
    * @throws FileNotFoundException
    * @throws IOException
    */
   @Test
   public void isDfceUpSuccess() throws FileNotFoundException, IOException {
      
      File file = new File("src/test/resources/exploitation/sae-dfce-config-success.properties");
      
      ConfigurationDfce configurationDfce = ConfigDfceService.getConfigDfce(file);
      
      boolean dfceIsUp = DfceInfoService.isDfceUp(configurationDfce);
      
      assertTrue("Le DFCE is Up devrait être à true !", dfceIsUp);
      
   }
   
   
   
   /**
    * On vérifie la méthode DfceInfoService.isDfceUp échoue en s'appuyant
    * sur une configuration DFCE qui pointe sur un serveur qui n'est pas accessible,
    * en l'occurence on met un numéro de port incorrect dans le fichier de conf.
    *  
    * @throws FileNotFoundException
    * @throws IOException
    */
   @Test
   public void isDfceUpFailure() throws FileNotFoundException, IOException {
      
      File file = new File("src/test/resources/exploitation/sae-dfce-config-failure.properties");
      
      ConfigurationDfce configurationDfce = ConfigDfceService.getConfigDfce(file);
      
      boolean dfceIsUp = DfceInfoService.isDfceUp(configurationDfce);
      
      assertFalse("Le DFCE is Up devrait être à false !", dfceIsUp);
      
   }
   
   
}
