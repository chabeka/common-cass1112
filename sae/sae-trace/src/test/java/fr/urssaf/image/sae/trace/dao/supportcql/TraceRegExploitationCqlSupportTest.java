/**
 *
 */
package fr.urssaf.image.sae.trace.dao.supportcql;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.time.DateUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.commons.cassandra.helper.CassandraServerBean;
import fr.urssaf.image.commons.cassandra.helper.ModeGestionAPI.MODE_API;
import fr.urssaf.image.sae.trace.dao.modelcql.TraceRegExploitationCql;
import fr.urssaf.image.sae.trace.dao.modelcql.TraceRegExploitationIndexCql;
import fr.urssaf.image.sae.trace.support.TimeUUIDEtTimestampSupport;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"/applicationContext-sae-trace-test.xml"})
public class TraceRegExploitationCqlSupportTest {

  private static final int MAX_COUNT = 100;

  private static final String VALUE = "valeur";

  private static final String KEY = "clé";

  private static final Date DATE = new Date();

  private static final String LOGIN = "LE LOGIN";

  private static final String CONTRAT = "contrat de service";

  private static final List<String> PAGMS = Arrays.asList("PAGM1", "PAGM2");

  private static final String CODE_EVT = "code événement";

  private static final String ACTION = "action";

  private static final Map<String, String> INFOS;
  static {
    INFOS = new HashMap<>();
    INFOS.put(KEY, VALUE);
  }

  @Autowired
  private TraceRegExploitationCqlSupport supportcql;

  @Autowired
  private CassandraServerBean server;

  @Autowired
  private TimeUUIDEtTimestampSupport timeUUIDSupport;

  @After
  public void after() throws Exception {
    server.resetData(true, MODE_API.DATASTAX);
  }

  @Test
  public void testCreateFindSuccess() {

    final UUID uuid = timeUUIDSupport.buildUUIDFromDate(new Date());
    createTrace(uuid);

    final Optional<TraceRegExploitationCql> exploitationOp = supportcql.find(uuid);
    Assert.assertTrue("L'objet est non null", exploitationOp.isPresent());
    checkBean(exploitationOp.get(), uuid);

    final List<TraceRegExploitationIndexCql> list = supportcql.findByDate(DATE, null);
    Assert.assertNotNull("la liste recherchée ne doit pas etre nulle", list);
    Assert.assertEquals("le nombre d'éléments de la liste doit etre correct", 1, list.size());
    checkBeanIndex(list.get(0), uuid);
  }

  @Test
  public void testDelete() {
    final UUID uuid = timeUUIDSupport.buildUUIDFromDate(new Date());
    createTrace(uuid);

    final long nbTracesPurgees = supportcql.delete(new Date());

    final Optional<TraceRegExploitationCql> exploitationOpt = supportcql.find(uuid);
    Assert.assertFalse("L'objet est non null", exploitationOpt.isPresent());
    // Assert.assertNull("aucune trace ne doit etre touvée", exploitationOpt);

    @SuppressWarnings("unused")
    final List<TraceRegExploitationIndexCql> list = supportcql.findByDate(DATE, null);
    Assert.assertTrue("aucun index ne doit etre present, donc aucune trace", CollectionUtils.isEmpty(list));

    Assert.assertEquals("Le nombre de traces purgées est incorrect", 1L, nbTracesPurgees);
  }

  @Test
  public void testCreateFindByPlageSuccess() {

    final UUID uuid = timeUUIDSupport.buildUUIDFromDate(DATE);
    createTrace(uuid);

    final Optional<TraceRegExploitationCql> exploitationOpt = supportcql.find(uuid);
    checkBean(exploitationOpt.get(), uuid);

    List<TraceRegExploitationIndexCql> list = supportcql.findByDates(DateUtils.addDays(DATE, -2), DateUtils.addDays(DATE, -1), MAX_COUNT, false);

    Assert.assertEquals("aucun enregistrement ne doit etre retourné", list.size(), 0);
    list = supportcql.findByDates(DateUtils.addDays(DATE, -1), DateUtils.addDays(DATE, 1), MAX_COUNT, false);
    Assert.assertNotNull("la liste recherchée ne doit pas etre nulle", list);
    Assert.assertEquals("le nombre d'éléments de la liste doit etre correct", 1, list.size());
    checkBeanIndex(list.get(0), uuid);
  }

  private void checkBean(final TraceRegExploitationCql exploitation, final UUID uuid) {
    Assert.assertNotNull("l'objet doit etre trouvé", exploitation);
    Assert.assertEquals("l'action doit etre correcte", ACTION, exploitation.getAction());
    Assert.assertEquals("le code evenement doit etre correcte", CODE_EVT, exploitation.getCodeEvt());
    Assert.assertEquals("le contrat doit etre correcte", CONTRAT, exploitation.getContratService());
    checkPagms(exploitation.getPagms());
    Assert.assertEquals("l'identifiant doit etre correcte", uuid, exploitation.getIdentifiant());
    Assert.assertEquals("le login doit etre correcte", LOGIN, exploitation.getLogin());
    Assert.assertEquals("la date doit etre correcte", DATE, exploitation.getTimestamp());
    Assert.assertEquals("les infos supplémentaire doivent contenir un élément", 1, exploitation.getInfos().size());
    Assert.assertTrue("les infos supplémentaire doivent une clé correcte", exploitation.getInfos().keySet().contains(KEY));
    Assert.assertEquals("les infos supplémentaire doivent contenir une valeur correcte élément", VALUE, exploitation.getInfos().get(KEY));

  }

  private void checkBeanIndex(final TraceRegExploitationIndexCql index, final UUID uuid) {
    Assert.assertNotNull("l'objet doit etre trouvé", index);
    Assert.assertEquals("l'action doit etre correcte", ACTION, index.getAction());
    Assert.assertEquals("le code evenement doit etre correcte", CODE_EVT, index.getCodeEvt());
    Assert.assertEquals("le contrat doit etre correcte", CONTRAT, index.getContrat());
    checkPagms(index.getPagms());
    Assert.assertEquals("l'identifiant doit etre correcte", uuid, index.getIdentifiant());
    Assert.assertEquals("le login doit etre correcte", LOGIN, index.getLogin());
    Assert.assertEquals("la date doit etre correcte", DATE, index.getTimestamp());
  }

  private void checkPagms(final List<String> pagms) {
    Assert.assertNotNull("La liste des PAGM ne doit pas être nulle", pagms);
    Assert.assertEquals("La liste des PAGM doit contenir 2 éléments", 2, pagms.size());
    Assert.assertTrue("La liste des PAGM doit contenir le PAGM \"PAGM1\"", pagms.contains("PAGM1"));
    Assert.assertTrue("La liste des PAGM doit contenir le PAGM \"PAGM2\"", pagms.contains("PAGM2"));
  }

  private void createTrace(final UUID uuid) {
    final TraceRegExploitationCql trace = new TraceRegExploitationCql(uuid, DATE);
    trace.setAction(ACTION);
    trace.setCodeEvt(CODE_EVT);
    trace.setContratService(CONTRAT);
    trace.setPagms(PAGMS);
    trace.setLogin(LOGIN);
    trace.setInfos(INFOS);

    supportcql.create(trace);
  }
}
