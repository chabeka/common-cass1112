/**
 * 
 */
package fr.urssaf.image.sae.trace.dao.support;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import me.prettyprint.cassandra.service.template.ColumnFamilyResult;
import me.prettyprint.cassandra.service.template.ColumnFamilyTemplate;
import me.prettyprint.cassandra.service.template.ColumnFamilyUpdater;
import me.prettyprint.hector.api.mutation.Mutator;
import me.prettyprint.hector.api.query.SliceQuery;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import fr.urssaf.image.sae.trace.dao.TraceRegExploitationDao;
import fr.urssaf.image.sae.trace.dao.TraceRegExploitationIndexDao;
import fr.urssaf.image.sae.trace.dao.iterator.TraceRegExploitationIndexIterator;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitation;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitationIndex;
import fr.urssaf.image.sae.trace.dao.serializer.MapSerializer;

/**
 * Support de la classe DAO {@link TraceRegExploitationDao}
 * 
 */
@Component
public class TraceRegExploitationSupport {

   @Autowired
   private TraceRegExploitationDao dao;

   @Autowired
   private TraceRegExploitationIndexDao indexDao;

   /**
    * Création d'une trace dans le registre d'exploitation
    * 
    * @param exploitation
    *           trace d'exploitation à créer
    * @param clock
    *           horloge de la création
    */
   public final void create(TraceRegExploitation exploitation, long clock) {
      // création de la ligne
      ColumnFamilyTemplate<UUID, String> tmpl = dao.getExploitTmpl();
      ColumnFamilyUpdater<UUID, String> updater = tmpl
            .createUpdater(exploitation.getIdentifiant());

      dao.writeColumnAction(updater, exploitation.getAction(), clock);
      dao.writeColumnCodeEvt(updater, exploitation.getCodeEvt(), clock);
      dao.writeColumnContratService(updater, exploitation.getContrat(), clock);
      dao.writeColumnLogin(updater, exploitation.getLogin(), clock);
      dao.writeColumnTimestamp(updater, exploitation.getTimestamp(), clock);

      if (MapUtils.isNotEmpty(exploitation.getInfos())) {
         dao.writeColumnInfos(updater, exploitation.getInfos(), clock);
      }

      tmpl.update(updater);

      // création de l'index
      TraceRegExploitationIndex index = new TraceRegExploitationIndex(
            exploitation);
      ColumnFamilyTemplate<Date, UUID> indexTmpl = indexDao
            .getExploitIndexTmpl();
      ColumnFamilyUpdater<Date, UUID> indexUpdater = indexTmpl
            .createUpdater(DateUtils.truncate(exploitation.getTimestamp(),
                  Calendar.DATE));
      indexDao.writeColumn(indexUpdater, exploitation.getIdentifiant(), index,
            clock);
      indexTmpl.update(indexUpdater);
   }

   /**
    * Suppression d'une trace dans le registre d'exploitation
    * 
    * @param identifiant
    *           identifiant de la trace
    * @param clock
    *           horloge de la suppression
    */
   public final void delete(UUID identifiant, long clock) {

      // on récupère la date pour pouvoir supprimer l'index
      TraceRegExploitation exploitation = find(identifiant);
      Date dateCreation = DateUtils.truncate(exploitation.getTimestamp(),
            Calendar.DATE);

      // suppression de la ligne
      Mutator<UUID> mutator = dao.createMutator();
      dao.mutatorSuppressionRegExploitation(mutator, identifiant, clock);
      mutator.execute();

      // suppression de l'index
      Mutator<Date> indexMutator = indexDao.createMutator();
      indexDao.mutatorSuppressionTraceRegExploitationIndex(indexMutator,
            dateCreation, identifiant, clock);
      indexMutator.execute();
   }

   /**
    * Recherche et retourne la trace d'exploitation avec l'identifiant donné
    * 
    * @param identifiant
    *           identifiant de la trace d'exploitation
    * @return la trace d'exploitation
    */
   public final TraceRegExploitation find(UUID identifiant) {
      ColumnFamilyTemplate<UUID, String> tmpl = dao.getExploitTmpl();
      ColumnFamilyResult<UUID, String> result = tmpl.queryColumns(identifiant);

      return getTraceRegExploitationFromResult(result);
   }

   /**
    * recherche et retourne la liste des traces d'exploitation à une date donnée
    * 
    * @param date
    *           date à laquelle trouver les traces
    * @return la liste des traces d'exploitation
    */
   public final List<TraceRegExploitation> findByDate(Date date) {
      List<TraceRegExploitation> list = null;

      SliceQuery<Date, UUID, TraceRegExploitationIndex> sliceQuery = indexDao
            .createSliceQuery();
      sliceQuery.setKey(DateUtils.truncate(date, Calendar.DATE));

      TraceRegExploitationIndexIterator iterator = new TraceRegExploitationIndexIterator(
            sliceQuery);

      if (iterator.hasNext()) {
         list = new ArrayList<TraceRegExploitation>();
      }

      TraceRegExploitationIndex index;
      while (iterator.hasNext()) {
         index = iterator.next();
         list.add(find(index.getIdentifiant()));
      }

      return list;
   }

   private TraceRegExploitation getTraceRegExploitationFromResult(
         ColumnFamilyResult<UUID, String> result) {

      TraceRegExploitation exploit = null;

      if (result != null && result.hasResults()) {
         exploit = new TraceRegExploitation();

         exploit.setIdentifiant(result.getKey());

         exploit
               .setAction(result.getString(TraceRegExploitationDao.COL_ACTION));
         exploit.setCodeEvt(result
               .getString(TraceRegExploitationDao.COL_CODE_EVT));
         exploit.setContrat(result
               .getString(TraceRegExploitationDao.COL_CONTRAT_SERVICE));
         exploit.setLogin(result.getString(TraceRegExploitationDao.COL_LOGIN));
         exploit.setTimestamp(result
               .getDate(TraceRegExploitationDao.COL_TIMESTAMP));

         byte[] bValue = result.getByteArray(TraceRegExploitationDao.COL_INFOS);
         if (bValue != null) {
            exploit.setInfos(MapSerializer.get().fromBytes(bValue));
         }

      }

      return exploit;
   }

}
