package fr.urssaf.image.sae.trace.dao.support;

import java.util.Date;
import java.util.Iterator;
import java.util.UUID;

import me.prettyprint.cassandra.service.template.ColumnFamilyResult;
import me.prettyprint.cassandra.service.template.ColumnFamilyUpdater;
import me.prettyprint.hector.api.query.SliceQuery;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import fr.urssaf.image.sae.trace.dao.TraceRegExploitationDao;
import fr.urssaf.image.sae.trace.dao.TraceRegExploitationIndexDao;
import fr.urssaf.image.sae.trace.dao.iterator.TraceRegExploitationIndexIterator;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitation;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitationIndex;
import fr.urssaf.image.sae.trace.support.TimeUUIDEtTimestampSupport;

/**
 * Support de la classe DAO {@link TraceRegExploitationDao}
 * 
 */
@Component
public class TraceRegExploitationSupport extends
      AbstractTraceSupport<TraceRegExploitation, TraceRegExploitationIndex> {

   private static final String REG_EXPLOIT_NAME = "registre d'exploitation";

   private final TraceRegExploitationDao dao;

   private final TraceRegExploitationIndexDao indexDao;

   private final TimeUUIDEtTimestampSupport timeUUIDSupport;

   private static final Logger LOGGER = LoggerFactory
         .getLogger(TraceRegExploitationSupport.class);

   /**
    * Constructeur
    * 
    * @param dao
    *           Service DAO de la famille de colonnes "TraceRegExploitation"
    * @param indexDao
    *           Service DAO de la famille de colonnes
    *           "TraceRegExploitationIndex"
    * @param timeUUIDSupport
    *           Utilitaires pour cr√©er des TimeUUIDa
    */
   @Autowired
   public TraceRegExploitationSupport(TraceRegExploitationDao dao,
         TraceRegExploitationIndexDao indexDao,
         TimeUUIDEtTimestampSupport timeUUIDSupport) {
      super();
      this.dao = dao;
      this.indexDao = indexDao;
      this.timeUUIDSupport = timeUUIDSupport;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected void completeCreateTrace(
         ColumnFamilyUpdater<UUID, String> updater, TraceRegExploitation trace,
         long clock) {
      getDao().writeColumnAction(updater, trace.getAction(), clock);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected TraceRegExploitationDao getDao() {
      return dao;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected TraceRegExploitationIndexDao getIndexDao() {
      return indexDao;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected TraceRegExploitationIndex getIndexFromTrace(
         TraceRegExploitation trace) {
      return new TraceRegExploitationIndex(trace);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected String getRegistreName() {
      return REG_EXPLOIT_NAME;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected Iterator<TraceRegExploitationIndex> getIterator(
         SliceQuery<String, UUID, TraceRegExploitationIndex> sliceQuery) {
      return new TraceRegExploitationIndexIterator(sliceQuery);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected Iterator<TraceRegExploitationIndex> getIterator(
         SliceQuery<String, UUID, TraceRegExploitationIndex> sliceQuery,
         UUID startUuid, UUID endUuid, boolean reversed) {
      return new TraceRegExploitationIndexIterator(sliceQuery, startUuid,
            endUuid, reversed);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected void completeTraceFromResult(TraceRegExploitation trace,
         ColumnFamilyResult<UUID, String> result) {
      trace.setAction(result.getString(TraceRegExploitationDao.COL_ACTION));
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected TraceRegExploitation createNewInstance(UUID idTrace, Date timestamp) {
      return new TraceRegExploitation(idTrace, timestamp);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected TimeUUIDEtTimestampSupport getTimeUuidSupport() {
      return timeUUIDSupport;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   protected Logger getLogger() {
      return LOGGER;
   }

}
