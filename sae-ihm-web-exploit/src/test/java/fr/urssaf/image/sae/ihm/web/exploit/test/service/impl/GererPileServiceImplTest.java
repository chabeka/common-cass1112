package fr.urssaf.image.sae.ihm.web.exploit.test.service.impl;

import java.util.UUID;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.commons.cassandra.helper.CassandraClientFactory;
import fr.urssaf.image.commons.cassandra.helper.CassandraServerBean;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunJobException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.MiseAJourJobException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.GererPileService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.GererPileServiceImpl;
import fr.urssaf.image.sae.pile.travaux.exception.JobNonReinitialisableException;
import me.prettyprint.hector.api.Keyspace;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "/applicationContext-sae-ihm-web-exploit-test.xml")
public class GererPileServiceImplTest {

  @Autowired
  ConfigurationsEnvironnement confs;
	
  CassandraClientFactory clientFact;
	
  @Before
  public void before() throws InterruptedException {
	  ConfigurationEnvironnement conf = confs.getConfigurations()[0];
	// Serveur Cassandra
      CassandraServerBean server = new CassandraServerBean();
      server.setDataSet(null);
      server.setHosts(conf.getCassandraHost());
      server.setStartLocal(false);

     // Keyspace Cassandra Thrift
     clientFact = new CassandraClientFactory(server, conf.getCassandraKeySpace(),
    		  																conf.getCassandraUserName(), 
    		  																conf.getCassandraPwd());
  }
  
  @Test(expected = IllegalArgumentException.class)
  public void testArgumentSupprimerTravail() throws ErreurTechniqueException,
  AucunJobException, MiseAJourJobException {
    final GererPileService gp = new GererPileServiceImpl();
    final UUID uuid = null;
    final Keyspace keyspace = null;
    gp.supprimerTravail(uuid, keyspace, null);
  }
  
  @Test(expected = IllegalArgumentException.class)
  public void testArgumentSupprimerTravail_avecCCFNull() throws ErreurTechniqueException,
  AucunJobException, MiseAJourJobException {
    final GererPileService gp = new GererPileServiceImpl();
    final UUID uuid = UUID.fromString("2412A367-0813-4F92-8FE0-FF4D2F86A20C");
    final Keyspace keyspace = clientFact.getKeyspace();
    gp.supprimerTravail(uuid, keyspace, null);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testArgumentRemettreEtatLancement1()
      throws ErreurTechniqueException, AucunJobException,
      MiseAJourJobException, JobNonReinitialisableException {
    final GererPileService gp = new GererPileServiceImpl();
    final UUID uuid = null;
    final Keyspace keyspace = null;
    gp.remettreTravailEtatLancement(uuid, keyspace, null);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testArgumentRemettreEtatLancement2()
      throws ErreurTechniqueException, AucunJobException,
      MiseAJourJobException, JobNonReinitialisableException {
    final GererPileService gp = new GererPileServiceImpl();
    final UUID uuid = UUID.fromString("2412A367-0813-4F92-8FE0-FF4D2F86A20C");
    final Keyspace keyspace = null;
    gp.remettreTravailEtatLancement(uuid, keyspace, null);
  } 
  
  @Test(expected = IllegalArgumentException.class)
  public void testArgumentRemettreEtatLancement_avecCCFNull()
      throws ErreurTechniqueException, AucunJobException,
      MiseAJourJobException, JobNonReinitialisableException {
    final GererPileService gp = new GererPileServiceImpl();
    final UUID uuid = UUID.fromString("2412A367-0813-4F92-8FE0-FF4D2F86A20C");
    final Keyspace keyspace = clientFact.getKeyspace();
    gp.remettreTravailEtatLancement(uuid, keyspace, null);
  }
}
