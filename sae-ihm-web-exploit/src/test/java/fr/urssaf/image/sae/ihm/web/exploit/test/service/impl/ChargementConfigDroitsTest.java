package fr.urssaf.image.sae.ihm.web.exploit.test.service.impl;

import static junit.framework.Assert.assertEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.sae.ihm.web.exploit.modele.Action;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationBean;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Droit;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Droits;
import fr.urssaf.image.sae.ihm.web.exploit.service.ConfigurationService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.ConfigurationServiceImpl;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "/applicationContext-sae-ihm-web-exploit-test.xml")
public class ChargementConfigDroitsTest {

   @Autowired
   private ConfigurationsEnvironnement config;
   @Autowired
   private ConfigurationBean version;
   @Autowired
   private Droits droits;

   @Test(expected = FileNotFoundException.class)
   public void testConfigurationService() throws FileNotFoundException {
      // File fichier = null;
      File fichier = new File(
            "src/test/resources/configurationEnvironnement-test2.xml");
      ConfigurationService cs = new ConfigurationServiceImpl();

      cs.chargerConfiguration(fichier);

   }

   /**
    * Vérification du bon chargement du fichier de config Cassandra et WS
    */
   @Test
   public void testChargementConf() {
      ConfigurationEnvironnement[] confEnv = config.getConfigurations();

      assertEquals("Il faut 2 configurations", 2, confEnv.length);
      assertEquals("nom incorrect", "Nom 1", confEnv[0].getNom());
      assertEquals("urlWs incorrect", "http://localhost:8080/sae-webservices/services/SaeService", confEnv[0].getUrlWs().toString());
      assertEquals("zookeeperHost incorrect", "zookeeperHost 1", confEnv[0]
            .getZookeeperHost());
      assertEquals("zookeeperNameSpace incorrect", "zookeeperNameSpace 1",
            confEnv[0].getZookeeperNameSpace());
      assertEquals("cassandraHost incorrect", "cassandraHost 1", confEnv[0]
            .getCassandraHost());
      assertEquals("cassandraUserName incorrect", "cassandraUserName 1",
            confEnv[0].getCassandraUserName());
      assertEquals("cassandraPwd incorrect", "cassandraPwd 1", confEnv[0]
            .getCassandraPwd());
      assertEquals("cassandraKeySpace incorrect", "cassandraKeySpace 1",
            confEnv[0].getCassandraKeySpace());

      assertEquals("nom incorrect", "Nom 2", confEnv[1].getNom());
      assertEquals("urlWs incorrect", "http://localhost:8080/sae-webservices/services/SaeService", confEnv[1].getUrlWs().toString());
      assertEquals("zookeeperHost incorrect", "zookeeperHost 2", confEnv[1]
            .getZookeeperHost());
      assertEquals("zookeeperNameSpace incorrect", "zookeeperNameSpace 2",
            confEnv[1].getZookeeperNameSpace());
      assertEquals("cassandraHost incorrect", "cassandraHost 2", confEnv[1]
            .getCassandraHost());
      assertEquals("cassandraUserName incorrect", "cassandraUserName 2",
            confEnv[1].getCassandraUserName());
      assertEquals("cassandraPwd incorrect", "cassandraPwd 2", confEnv[1]
            .getCassandraPwd());
      assertEquals("cassandraKeySpace incorrect", "cassandraKeySpace 2",
            confEnv[1].getCassandraKeySpace());

   }

   /**
    * Vérification du numéro de version de l'application
    */
   @Test
   public void testVersion() {
      assertEquals("Version incorrect", "1.0", version.getVersion());
   }

   /**
    * Vérification du chargement de la liste des droits
    */
   @Test
   public void testChargementDroits() {

      Droit[] listeDroits = droits.getDroits();

      assertEquals("Il faut 1 droit", 1, listeDroits.length);
      assertEquals("PAGM incorrect", "ADMIN_TECHNIQUE", listeDroits[0]
            .getPagm());

      List<Action> listeActions = listeDroits[0].getActionsUnitaires();
      assertEquals("Il faut 2 actions", 2, listeActions.size());
      assertEquals("Action 1 incorrect", "rechercherDocuments", listeActions
            .get(0).getValeur());
      assertEquals("Action 2 incorrect", "consulterDocuments", listeActions
            .get(1).getValeur());

   }

}
