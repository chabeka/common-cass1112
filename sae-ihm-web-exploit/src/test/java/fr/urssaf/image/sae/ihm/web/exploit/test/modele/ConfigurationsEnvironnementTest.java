package fr.urssaf.image.sae.ihm.web.exploit.test.modele;

import static junit.framework.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnementFrontal;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnementFrontal;
import fr.urssaf.image.sae.ihm.web.exploit.modele.InstanceGeds;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "/applicationContext-sae-ihm-web-exploit-test.xml")
public class ConfigurationsEnvironnementTest {

   @Autowired
   private ConfigurationsEnvironnement config;
   
   @Autowired
   private ConfigurationsEnvironnementFrontal configFrontaux;

   @Test
   public void testGetListeNoms() {
      List<String> liste = config.getListeNoms();

      assertNotNull("La liste ne doit pas être null", liste);
      assertEquals("La liste doit contenir 2 noms", 2, liste.size());
      assertEquals("nom incorrect", "Nom 1", liste.get(0));
      assertEquals("nom incorrect", "Nom 2", liste.get(1));
   }

   @Test
   public void testGetConfiguration() {

      ConfigurationEnvironnement conf = config.getConfiguration("Nom 1");

      assertNotNull("La conf ne doit pas être null", conf);
      assertEquals("nom incorrect", "Nom 1", conf.getNom());
      assertEquals("urlWs incorrect", "http://localhost:8080/sae-webservices/services/SaeService", conf.getUrlWs().toString());
      assertEquals("zookeeperHost incorrect", "zookeeperHost 1", conf
            .getZookeeperHost());
      assertEquals("zookeeperNameSpace incorrect", "zookeeperNameSpace 1", conf
            .getZookeeperNameSpace());
      assertEquals("cassandraHost incorrect", "cassandraHost 1", conf
            .getCassandraHost());
      assertEquals("cassandraUserName incorrect", "cassandraUserName 1", conf
            .getCassandraUserName());
      assertEquals("cassandraPwd incorrect", "cassandraPwd 1", conf
            .getCassandraPwd());
      assertEquals("cassandraKeySpace incorrect", "cassandraKeySpace 1", conf
            .getCassandraKeySpace());
      
      conf = config.getConfiguration("Nom 3");
      assertNull("Aucune config ne doit être retournée", conf);
   }

   @Test
   public void testExiste() {

      assertEquals("La config n'existe pas", false, config.existe("Nom 3"));
      assertEquals("La config n'existe pas", true, config.existe("Nom 2"));

   }
   
   @Test
   public void getListFrontalForEnv() {
	   
	   ConfigurationEnvironnementFrontal[] configurationsFrontaux = configFrontaux.getConfigurationsFrontaux();
	   for(int i=0; i < configurationsFrontaux.length; i++) {
		   ConfigurationEnvironnementFrontal idGed = configurationsFrontaux[i];
		   InstanceGeds idGeds = idGed.getInstanceGeds();
		   List<String> listIdGed = idGeds.getListInstanceGed();
		   assertTrue("La liste des idGed ne doit pas être vide", !listIdGed.isEmpty());
	   }
	
   }
   
}
