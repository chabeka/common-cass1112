package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import fr.urssaf.image.sae.ihm.web.exploit.formulaire.MetadataAjoutModifForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.MetaReference;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.metadata.exceptions.MetadataReferenceNotFoundException;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;

/**
 * Classe permettant de gérer les métadonnées
 */
@Controller
public class MetadataAjoutModifController {

   private static final String NOM_VUE = "gestionMetadonnees";

   @Autowired
   private ConfigurationsEnvironnement config;

   private static final String NOM_FORMULAIRE = "metaAjoutModifForm";

   /**
    * GET, affichage du détail d'une métadonnée en mode modification<br>
    * <br>
    * Utilisé notamment par l'écran listant les métadonnées, lien "détails"
    * 
    * @param metaForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param codeLong
    *           code long de la métadonnée
    * @return La page à afficher
    */
   @RequestMapping(value = "detailMeta", method = RequestMethod.GET)
   public final String afficherDetailMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid MetadataAjoutModifForm metaForm,
         BindingResult result, HttpSession session, HttpServletRequest request,
         @RequestParam(value = "codeLong", required = true) String codeLong) {

      if (!result.hasFieldErrors()) {

         // En arrivant sur cette action, on se met en mode modification
         metaForm.setModification(Boolean.TRUE);
         metaForm.setAjout(Boolean.FALSE);

         // Instancie le service des métadonnées dans la configuration courante
         MetadonneesService metaService = new MetadonneesServiceImpl(session,
               config);

         // Récupère les propriétés de la métadonnée à modifier
         MetadataReference metaSae = metaService.findMetadata(codeLong);

         // Fait une copie de l'objet MetadataReference (renvoyé par les
         // services SAE) dans un objet MetaReference (utilisable par l'IHM)
         MetaReference metaIhm = copie(metaSae);

         // Affecte l'objet métadonnée à l'objet formulaire
         metaForm.setDetailMeta(metaIhm);

      }

      return NOM_VUE;

   }

   private MetaReference copie(MetadataReference source) {

      MetaReference dest = new MetaReference();
      dest.setArchivable(source.isArchivable());
      dest.setConsultable(source.isConsultable());
      dest.setDefaultConsultable(source.isDefaultConsultable());
      dest.setDescription(source.getDescription());
      dest.setDictionaryName(source.getDictionaryName());
      dest.setHasDictionary(source.getHasDictionary());
      dest.setInternal(source.isInternal());
      dest.setIsIndexed(source.getIsIndexed());
      dest.setLabel(source.getLabel());

      if (source.getLength() < 0) {
         dest.setLength(StringUtils.EMPTY);
      } else {
         dest.setLength(String.valueOf(source.getLength()));
      }

      dest.setLongCode(source.getLongCode());
      dest.setModifiable(source.isModifiable());
      dest.setPattern(source.getPattern());
      dest.setRequiredForArchival(source.isRequiredForArchival());
      dest.setRequiredForStorage(source.isRequiredForStorage());
      dest.setSearchable(source.isSearchable());
      dest.setShortCode(source.getShortCode());
      dest.setType(source.getType());
      dest.setModifiable(source.isModifiable());
      dest.setLeftTrimable(source.isLeftTrimable());
      dest.setRightTrimable(source.isRightTrimable());

      return dest;

   }

   private MetadataReference copie(MetaReference source) {

      MetadataReference dest = new MetadataReference();

      dest.setArchivable(source.isArchivable());
      dest.setConsultable(source.isConsultable());
      dest.setDefaultConsultable(source.isDefaultConsultable());
      dest.setDescription(source.getDescription());
      dest.setDictionaryName(source.getDictionaryName());
      dest.setHasDictionary(source.getHasDictionary());
      dest.setInternal(source.isInternal());
      dest.setIsIndexed(source.getIsIndexed());
      dest.setLabel(source.getLabel());
      if (StringUtils.isEmpty(source.getLength())) {
         dest.setLength(-1);
      } else {
         dest.setLength(new Integer(source.getLength()));
      }
      dest.setLongCode(source.getLongCode());
      dest.setModifiable(source.isModifiable());
      dest.setPattern(source.getPattern());
      dest.setRequiredForArchival(source.isRequiredForArchival());
      dest.setRequiredForStorage(source.isRequiredForStorage());
      dest.setSearchable(source.isSearchable());
      dest.setShortCode(source.getShortCode());
      dest.setType(source.getType());
      dest.setModifiable(source.isModifiable());
      dest.setLeftTrimable(source.getLeftTrimable());
      dest.setRightTrimable(source.getRightTrimable());

      return dest;

   }

   /**
    * Initialisation de l'écran d'ajout d'une métadonnées<br>
    * <br>
    * Utilisé par le menu principal de l'application "Ajouter une métadonnée"
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la request courante
    * @return le nom de la vue
    * 
    */
   @RequestMapping(value = "ajoutMetadonnees", method = RequestMethod.GET)
   public final String initialisationAjoutMeta(Model model,
         HttpSession session, HttpServletRequest request) {

      MetadataAjoutModifForm form = new MetadataAjoutModifForm();
      MetaReference meta = new MetaReference();
      form.setDetailMeta(meta);
      form.setAjout(Boolean.TRUE);
      form.setModification(Boolean.FALSE);
      model.addAttribute(NOM_FORMULAIRE, form);

      return NOM_VUE;

   }

   /**
    * Réalisation de l'ajout ou de la modification d'une métadonnée
    * 
    * @param metaForm
    *           l'objet de formulaire
    * @param result
    *           gestion des erreurs de saisie
    * @param session
    *           la session courante
    * @param request
    *           la request courante
    * @return le nom de la vue
    */
   @RequestMapping(value = "gestionMetadonnee")
   public final String gestionMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid MetadataAjoutModifForm metaForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      MetaReference metaModifie = metaForm.getDetailMeta();

      // Instancie le service des métadonnées dans la configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Regarde si la métadonnée existe déjà
      MetadataReference metaExist = metaService.findMetadata(metaModifie
            .getLongCode());

      // Différentes règles selon si la méta existe déjà ou non
      if (metaForm.getAjout()) {

         // On se trouve en mode "création d'une nouvelle métadonnée"
         if (metaExist == null) {

            // La métadonnée n'existe pas. Cas normal. On la créé
            // Copie de l'objet MetaReference du modèle de l'IHM vers un objet
            // MetadataReference pour les services SAE
            MetadataReference metaSae = copie(metaModifie);
            // Appel du service adéquat
            try {
            metaService.createMetadata(metaSae);

            // On passe l'écran en mode "modification"
            metaForm.setAjout(Boolean.FALSE);
            metaForm.setModification(Boolean.TRUE);

            // Message pour l'utilisateur
            metaForm.setMessage(String.format(
                  "La métadonnée %s a bien été créée", metaModifie
                        .getLongCode()));
            
            } catch (RuntimeException ex) {
               ObjectError erreur = new ObjectError(NOM_FORMULAIRE, ex.getMessage());
               result.addError(erreur);

               StringWriter sw = new StringWriter();
               PrintWriter pw = new PrintWriter(sw);
               ex.printStackTrace(pw);
               String stacktrace = sw.toString();
               request.setAttribute("stacktrace", stacktrace);
            }

         } else {

            // La métadonnée existe déjà alors que l'on se trouve en mode
            // "création"
            // On informe l'utilisateur qu'il y a un problème
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, String.format(
                  "Il existe déjà une métadonnées avec le code long : %s",
                  metaModifie.getLongCode()));
            result.addError(erreur);

         }
      } else if (metaForm.getModification()) {

         // On se trouve en mode "modification"

         // On modifie la métadonnée
         // Copie de l'objet MetaReference du modèle de l'IHM vers un objet
         // MetadataReference pour les services SAE
         MetadataReference metaSae = copie(metaModifie);
         // Appel du service adéquat
         try {
            metaService.modifyMetadata(metaSae);
         } catch (MetadataReferenceNotFoundException e) {
            // La métadonnée n'existe pas alors que l'on se trouve en mode
            // "modification"
            // On informe l'utilisateur qu'il y a un problème
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, String.format(
                  "Il n'existe pas de métadonnée avec le code long : %s",
                  metaModifie.getLongCode()));
            result.addError(erreur);
         }

         // L'écran reste en mode modification
         metaForm.setAjout(Boolean.FALSE);
         metaForm.setModification(Boolean.TRUE);

         // Message pour l'utilisateur
         metaForm.setMessage(String.format(
               "La métadonnée %s a bien été modifiée", metaModifie
                     .getLongCode()));

      }

      return NOM_VUE;
   }

}
