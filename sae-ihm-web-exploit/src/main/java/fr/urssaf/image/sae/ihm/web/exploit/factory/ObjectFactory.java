package fr.urssaf.image.sae.ihm.web.exploit.factory;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.PropertyException;

import org.springframework.core.io.ClassPathResource;
import org.xml.sax.SAXException;

import fr.urssaf.image.sae.droit.dao.model.FormatControlProfil;
import fr.urssaf.image.sae.droit.dao.model.FormatProfil;
import fr.urssaf.image.sae.droit.dao.model.Pagma;
import fr.urssaf.image.sae.droit.dao.model.Pagmp;
import fr.urssaf.image.sae.droit.dao.model.Prmd;
import fr.urssaf.image.sae.droit.dao.model.ServiceContract;
import fr.urssaf.image.sae.droit.model.SaeContratService;
import fr.urssaf.image.sae.droit.model.SaePagm;
import fr.urssaf.image.sae.droit.model.SaePagma;
import fr.urssaf.image.sae.droit.model.SaePagmf;
import fr.urssaf.image.sae.droit.model.SaePagmp;
import fr.urssaf.image.sae.droit.model.SaePrmd;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ControlProfilType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.CsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.DroitType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.FormatControlProfilType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeActionsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeCnCertType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeCnPkiType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeCsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeFormatControlProfilType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeMetadonneeType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListePagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeParametresPagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListePrmdType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ListeValeursType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.MetadonneeType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ModifCsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmaType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmfType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmpType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ParametrePagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PrmdType;
import fr.urssaf.image.sae.ihm.web.exploit.utils.IgnoringValidationEventHandler;
import fr.urssaf.image.sae.ihm.web.exploit.utils.JAXBUtils;

/**
 * Factory d'objets
 */
public final class ObjectFactory {

   private ObjectFactory() {

   }

   /**
    * Création d'un objet de type Prmd à partir d'un objet de type PrmdType
    * 
    * @param prmdType
    *           l'objet de type PrmdType
    * @return l'objet de type Prmd
    */
   public static Prmd createPrmd(PrmdType prmdType) {

      Prmd prmd = new Prmd();

      prmd.setCode(prmdType.getCode());
      prmd.setDescription(prmdType.getDescription());
      prmd.setLucene(prmdType.getLucene());
      prmd.setBean(prmdType.getBean());

      prmd.setMetadata(createPrmdMetadatas(prmdType.getMetadonnees()
            .getMetadonnee()));

      return prmd;

   }

   /**
    * Création d'un objet de type FormatControlProfil à partir d'un objet de
    * type FormatControlProfilType
    * 
    * @param fcpType
    *           l'objet de type FormatControlProfilType
    * @return l'objet de type FormatControlProfil
    */
   public static FormatControlProfil createFcp(FormatControlProfilType fcpType) {

      FormatControlProfil fcp = new FormatControlProfil();

      FormatProfil formatProfil = new FormatProfil();
      formatProfil.setFileFormat(fcpType.getControlProfil().getFileFormat());
      formatProfil.setFormatIdentification(fcpType.getControlProfil()
            .isFormatIdentification());
      formatProfil.setFormatValidation(fcpType.getControlProfil()
            .isFormatValidation());
      formatProfil.setFormatValidationMode(fcpType.getControlProfil()
            .getFormatValidationMode());
      fcp.setControlProfil(formatProfil);
      fcp.setDescription(fcpType.getDescription());
      fcp.setFormatCode(fcpType.getCode());

      return fcp;

   }

   private static Map<String, List<String>> createPrmdMetadatas(
         List<MetadonneeType> listeMetaType) {

      Map<String, List<String>> metadonnees = new HashMap<String, List<String>>();

      String codeMeta;
      List<String> listeValeurs;
      for (MetadonneeType metadonnee : listeMetaType) {

         codeMeta = metadonnee.getCode();

         listeValeurs = new ArrayList<String>();
         for (String valeur : metadonnee.getValeurs().getValeur()) {
            listeValeurs.add(valeur);
         }

         metadonnees.put(codeMeta, listeValeurs);

      }

      return metadonnees;

   }

   /**
    * Création d'un objet de type ServiceContract à partir d'un objet de type
    * CsType
    * 
    * @param csType
    *           l'objet de type CsType
    * @return l'objet de type ServiceContract
    */
   public static ServiceContract createCs(CsType csType) {

      ServiceContract serviceContract = new ServiceContract();

      serviceContract.setCodeClient(csType.getIssuer());
      serviceContract.setLibelle(csType.getCode());
      serviceContract.setDescription(csType.getDescription());
      serviceContract.setViDuree(csType.getViduree());
      serviceContract.setListPki(csType.getLstCnPki().getCnPki());
      serviceContract.setVerifNommage(csType.isVerifCnCert());
      serviceContract.setListCertifsClient(csType.getLstCnCert().getCnCert());

      return serviceContract;

   }

   
   /**
    * Création d'un objet de type ServiceContract à partir d'un objet de type
    * ModifCsType
    * 
    * @param modifCsType
    *           l'objet de type ModifCsType
    * @return l'objet de type ServiceContract
    */
   public static ServiceContract createCs(ModifCsType modifCsType) {

      ServiceContract serviceContract = new ServiceContract();

      serviceContract.setCodeClient(modifCsType.getIssuer());
      serviceContract.setLibelle(modifCsType.getCode());
      serviceContract.setDescription(modifCsType.getDescription());
      serviceContract.setViDuree(modifCsType.getViduree());
      serviceContract.setListPki(modifCsType.getLstCnPki().getCnPki());
      serviceContract.setVerifNommage(modifCsType.isVerifCnCert());
      serviceContract.setListCertifsClient(modifCsType.getLstCnCert().getCnCert());

      return serviceContract;

   }
   
   /**
    * Création d'un objet de type SaePagm à partir d'un objet de type PagmType
    * 
    * @param pagmType
    *           l'objet de type PagmType
    * @return l'objet de type Pagm
    */
   public static SaePagm createPagm(PagmType pagmType) {

      Map<String, String> parametres = createParametres(pagmType);

      SaePagm saePagm = new SaePagm();

      saePagm.setCode(pagmType.getCode());
      saePagm.setDescription(pagmType.getDescription());
      if (pagmType.getCompressionPdfActive() != null) {
         saePagm.setCompressionPdfActive(pagmType.getCompressionPdfActive());
      }
      if (pagmType.getSeuilCompressionPdf() != null) {
         saePagm.setSeuilCompressionPdf(pagmType.getSeuilCompressionPdf());
      }

      PagmaType pagmaType = pagmType.getPagma();
      SaePagma pagma = new SaePagma();
      pagma.setActionUnitaires(pagmaType.getActions().getAction());
      pagma.setCode(pagmaType.getCode());

      PagmpType pagmpType = pagmType.getPagmp();
      SaePagmp pagmp = new SaePagmp();
      pagmp.setCode(pagmpType.getCode());
      pagmp.setDescription(pagmpType.getDescription());

      PagmfType pagmfType = pagmType.getPagmf();
      if (pagmfType != null) {
         SaePagmf pagmf = new SaePagmf();
         pagmf.setCodePagmf(pagmfType.getCode());
         pagmf.setDescription(pagmfType.getDescription());
         pagmf.setFormatProfile(pagmfType.getCodeFormatControlProfil());
         saePagm.setPagmf(pagmf);
      }

      pagmp.setPrmd(pagmType.getPagmp().getPrmd());
      saePagm.setPagma(pagma);
      saePagm.setPagmp(pagmp);

      saePagm.setParametres(parametres);

      return saePagm;

   }

   /**
    * Création des paramètres à partir du PagmType
    * 
    * @param pagmType
    * @return une map des paramètres
    */
   public static Map<String, String> createParametres(PagmType pagmType) {

      Map<String, String> parametres = new HashMap<String, String>();

      if (pagmType.getParametres() != null) {
         if (pagmType.getParametres().getParametre() != null) {
            for (ParametrePagmType paramPagm : pagmType.getParametres()
                  .getParametre()) {

               parametres.put(paramPagm.getCode(), paramPagm.getValeur());
            }
         }
      }

      return parametres;

   }

   /**
    * Création d'un objet de type Pagma à partir d'un objet de type PagmaType
    * 
    * @param pagmaType
    *           l'objet de type PagmaType
    * @return l'objet de type Pagm
    */
   public static Pagma createPagma(PagmaType pagmaType) {

      Pagma pagma = new Pagma();

      pagma.setCode(pagmaType.getCode());

      List<String> actionUnitaires = new ArrayList<String>();

      pagma.setActionUnitaires(actionUnitaires);

      for (String action : pagmaType.getActions().getAction()) {
         actionUnitaires.add(action);
      }

      return pagma;

   }

   /**
    * Création d'un objet de type Pagmp à partir d'un objet de type PagmpType
    * 
    * @param pagmpType
    *           l'objet de type PagmpType
    * @return l'objet de type Pagmp
    */
   public static Pagmp createPagmp(PagmpType pagmpType) {

      Pagmp pagmp = new Pagmp();

      pagmp.setCode(pagmpType.getCode());

      pagmp.setDescription(pagmpType.getDescription());

      pagmp.setPrmd(pagmpType.getPrmd());

      return pagmp;

   }

   

   /**
    * Extraction de la liste {@link ListePagmType }  contenu dans un {@link SaeContratService}
    * @param saeService
    * @return la {@link ListePagmType }
    */
   public static ListePagmType traitementPagmTypeDansCs(SaeContratService saeService) {

 	  ListePagmType listPT = new ListePagmType();
 	  if(saeService.getSaePagms() != null) {
 		  for(SaePagm sp : saeService.getSaePagms()) {
 			  PagmType pt = new PagmType();
 			  pt.setCode(sp.getCode());
 			  pt.setCompressionPdfActive(sp.getCompressionPdfActive());
 			  pt.setDescription(sp.getDescription());
 			  pt.setSeuilCompressionPdf(sp.getSeuilCompressionPdf());
 			  // parameters
 			  ListeParametresPagmType listPPT = new ListeParametresPagmType();
 			  if(sp.getParametres() != null) {
 				  for(Entry<String, String> entry : sp.getParametres().entrySet()) {
 					  ParametrePagmType pptype = new ParametrePagmType();
 					  pptype.setCode(entry.getKey());
 					  pptype.setValeur(entry.getValue());
 					  listPPT.getParametre().add(pptype);			  
 				  }
 			  }
 			  pt.setParametres(listPPT);
 			  // pagma
 			  SaePagma pagma = sp.getPagma();
 			  if(pagma != null) {
 				  PagmaType paggma = new PagmaType();
 				  paggma.setCode(pagma.getCode());
 				  ListeActionsType ac = new ListeActionsType();
 				  ac.getAction().addAll(pagma.getActionUnitaires());
 				  paggma.setActions(ac);
 				  pt.setPagma(paggma);
 			  }
 			  // pagmf
 			  SaePagmf pagmf = sp.getPagmf();
 			  if (pagmf != null) {
 				  PagmfType pgf = new PagmfType();
 				  pgf.setCode(pagmf.getCodePagmf());
 				  pgf.setCodeFormatControlProfil(pagmf.getFormatProfile());
 				  pgf.setDescription(pagmf.getDescription());
 				  pt.setPagmf(pgf);
 			  }
 			  // pagmp		  
 			  SaePagmp pagmp = sp.getPagmp();
 			  if(pagmp != null) {
 				  PagmpType ppt = new PagmpType();
 				  ppt.setCode(pagmp.getCode());
 				  ppt.setDescription(pagmp.getDescription());
 				  ppt.setPrmd(pagmp.getPrmd());		  
 				  pt.setPagmp(ppt);
 			  }
 			  listPT.getPagm().add(pt);
 		  }
 	  }
 	return listPT;
   }

   /**
    * Création d'un objet de type CsType  à partir d'un objet de type
    * ServiceContract
    * 
    * @param ServiceContract
    *           l'objet de type ServiceContract
    * @return l'objet de type CsType
    */
   public static CsType createCs(ServiceContract service) {

 	  CsType ct = new CsType();
      
 	  ct.setIssuer(service.getCodeClient());
 	  ct.setCode(service.getLibelle());
 	  ct.setDescription(service.getDescription());
 	  ct.setViduree(service.getViDuree());
 	  if (service.getListPki() != null) {
 		  ListeCnPkiType clt = new ListeCnPkiType();
 		  ct.setLstCnPki(clt);
 		  ct.getLstCnPki().getCnPki().addAll(service.getListPki());
 	  }
 	  ct.setVerifCnCert(service.isVerifNommage());
 	  ct.setLstCnCert(new ListeCnCertType());
 	  if(service.getListCertifsClient() != null) {
 		  ListeCnCertType lcc = new ListeCnCertType();
 		  ct.setLstCnCert(lcc);
 		  ct.getLstCnCert().getCnCert().addAll(service.getListCertifsClient());
 	  }

      return ct;

   }
   
   /**
    * Extraction de la liste {@link ListePrmdType }  à partir de la liste des {@link SaePrmd}
    * contenu dans un {@link ServiceContract}
    * @param saePrmds
    *           la liste des {@link SaePrmd}
    * @return l'objet {@link ListePrmdType} 
    */
   public static ListePrmdType traitementPrmdType(List<SaePrmd> saePrmds) {
 	  ListePrmdType listepmrd = new ListePrmdType();
 	  for(SaePrmd saep : saePrmds) {
 		  PrmdType pt = new PrmdType();
 		  pt.setBean(saep.getPrmd().getBean());
 		  pt.setCode(saep.getPrmd().getCode());
 		  pt.setDescription(saep.getPrmd().getDescription());
 		  pt.setLucene(saep.getPrmd().getLucene());
 		  Map<String, List<String>> metadata = saep.getPrmd().getMetadata();
 		  if(metadata != null) {
 			  ListeMetadonneeType lmt = new ListeMetadonneeType();
 			  for (Entry<String, List<String>> entry : metadata.entrySet()) {
 				  MetadonneeType mt = new MetadonneeType();
 				  mt.setCode(entry.getKey());
 				  ListeValeursType listVt = new ListeValeursType();
 				  for(String str : entry.getValue()) {
 					  listVt.getValeur().add(str);
 				  }
 				  mt.setValeurs(listVt);
 				  lmt.getMetadonnee().add(mt);
 			  }
 			  
 			  pt.setMetadonnees(lmt);  
 		  }
 		  listepmrd.getPrmd().add(pt);	  
 	  }
 	  return listepmrd;
   	}
 	/**
 	 * Extraction de la liste {@link ListeFormatControlProfilType} à partir d'une lsite de {@link FormatControlProfil}
 	 * @param formatControlProfils la liste de {@link FormatControlProfil}
 	 * @return la liste {@link ListeFormatControlProfilType}
 	 */
   public static ListeFormatControlProfilType traitementFormatControlProfil(List<FormatControlProfil> formatControlProfils) {
 		ListeFormatControlProfilType lFCPType = new ListeFormatControlProfilType();
 		for(FormatControlProfil ftp : formatControlProfils) {
 			FormatControlProfilType ft = new FormatControlProfilType();
 			ft.setCode(ftp.getFormatCode());
 			if(ftp.getControlProfil() != null) {
 				FormatProfil ff = ftp.getControlProfil();
 				ControlProfilType cpt = new ControlProfilType();
 				cpt.setFileFormat(ff.getFileFormat());
 				cpt.setFormatIdentification(ff.isFormatIdentification());
 				cpt.setFormatValidation(ff.isFormatValidation());
 				cpt.setFormatValidationMode(ff.getFormatValidationMode());
 				ft.setControlProfil(cpt);
 			}
 			ft.setDescription(ftp.getDescription());
 			lFCPType.getFormatControlProfil().add(ft);
 		}
 		return lFCPType;
 		
 	}
   /**
    * Creation d'un objet {@link DroitType}	à partir d'un objet {@link SaeContratService}  
    * @param saeService {@link SaeContratService} 
    * @return le {@link DroitType}
    */
   public static DroitType createDroitTypeFromSaeContratService(SaeContratService saeService) {
 	DroitType dType = new DroitType();
    
    	ListeFormatControlProfilType lFCPType = ObjectFactory.traitementFormatControlProfil(saeService.getFormatControlProfils());
    	dType.setListeFormatControlProfil(lFCPType);
    	
    	// CS TYPE
    	CsType cst = ObjectFactory.createCs(saeService);
    	ListePagmType Listpt = ObjectFactory.traitementPagmTypeDansCs(saeService);
    	cst.setPagms(Listpt);
    	ListeCsType listeCt = new ListeCsType();
    	listeCt.getCs().add(cst);
    	dType.setListeCs(listeCt);
    	
    	// PRMD
    	ListePrmdType listPrmdType = ObjectFactory.traitementPrmdType(saeService.getSaePrmds());
    	dType.setListePrmd(listPrmdType);
    	return dType;
   }
   /**
    * Creation du fichier xml de binding de la classe {@link SaeContratService} sur le disk
    * @param path le chemin du ficher
    * @param saeService 
    * 		la classe dont le fichier xml sera créé
    * @return le fichier crée
    * @throws IOException
    * @throws JAXBException
    * @throws PropertyException
 * @throws SAXException 
    */
   public static File createXMLOfCsOnDisk(String path, SaeContratService saeService)
 		throws IOException, JAXBException, PropertyException, SAXException {
 	DroitType dType = createDroitTypeFromSaeContratService(saeService);
 	 String FILE_SEPARATOR = System.getProperty("file.separator");
 	// le nom du fichier
 	String fileName = saeService.getCodeClient()+ "_" + Calendar.getInstance().getTimeInMillis();
 	
 	File file = new File(path + FILE_SEPARATOR + fileName + ".xml");
 	if(!file.exists()) { 
 		file.createNewFile();
 	}
 	
 	ClassPathResource ressourceXsd = new ClassPathResource("/xsd/saedroits/saedroits.xsd"); 
    File filexsd = ressourceXsd.getFile();
	// recuperation de type xsd de SaeContratService
	fr.urssaf.image.sae.ihm.web.exploit.droit.ObjectFactory factory = new fr.urssaf.image.sae.ihm.web.exploit.droit.ObjectFactory();
	JAXBElement<DroitType> jaxele = factory.createDroit(dType);
	JAXBUtils.marshal(jaxele, file, filexsd, new IgnoringValidationEventHandler());
 	return file;
   }


}
