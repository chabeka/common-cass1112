package fr.urssaf.image.sae.ihm.web.exploit.aspect;

import java.util.Date;
import java.util.UUID;

import org.apache.commons.lang.StringUtils;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.trace.model.JournalType;

/**
 * Classe de validation
 * 
 * 
 */
@Aspect
public class ServiceValidationJournaux {

   private static final String RECHERCHER_JOURNAUX_DOCUMENT = "execution(java.util.List<fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay> "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.rechercherJournauxDocument(*,*))"
         + "&& args(uuidDoc, dfceConnection)";

   private static final String RECHERCHER_JOURNAUX_EVT_DFCE = "execution(java.util.List<fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay> "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.rechercherJournauxEvenementDfce(*,*,*))"
         + "&& args(dateDebut, dateFin, dfceConnection)";

   private static final String RECHERCHER_JOURNAUX_CYLCE_VIE = "execution(java.util.List<fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay> "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.rechercherJournauxCycleVie(*,*,*))"
         + "&& args(dateDebut, dateFin, dfceConnection)";

   private static final String RECHERCHER_JOURNAUX_EVT_SAE = "execution(java.util.List<fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay> "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.rechercherJournauxEvenementSae(*,*,*,*))"
         + "&& args(dateDebut, dateFin, dfceConnection, nomBase)";

   private static final String VERIFIER_CHAINAGE = "execution(java.util.List<fr.urssaf.image.sae.ihm.web.exploit.modele.ChainageDisplay> "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.verifierChainage(*,*,*,*))"
         + "&& args(dateDebut, dateFin, journalType, dfceConnection)";

   private static final String RECUPERER_CONTENU_JOURNAL_DFCE = "execution(byte[] "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.recupererContenuJournalDfce(*,*))"
         + "&& args(uuidJournal, dfceConnection)";

   private static final String RECUPERER_CONTENU_JOURNAL_SAE = "execution(byte[] "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.recupererContenuJournalSae(*,*,*))"
         + "&& args(uuidJournal, dfceConnection, nomBase)";

   private static final String GET_NOM_JOURNAL_DFCE = "execution(String "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService.getNomJournalDfce(*,*))"
         + "&& args(uuidJournal, dfceConnection)";

   /**
    * Vérification des arguments de la méthode rechercherJournauxDocument
    * 
    * @param uuidDoc
    *           Identifiant du document
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    */
   @Before(RECHERCHER_JOURNAUX_DOCUMENT)
   public final void validationArgRechercherJournauxDocument(final UUID uuidDoc,
         final DFCEConnection dfceConnection) {

      if (uuidDoc == null) {
         throw new IllegalArgumentException(
               "L'identifiant du document ne doit pas être nul");
      } else if (StringUtils.isBlank(uuidDoc.toString())) {
         throw new IllegalArgumentException(
               "l'argument uuidDoc n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode rechercherJournauxEvenementDfce
    * 
    * @param dateDebut
    *           Date de début de l'intervalle
    * @param dateFin
    *           Date de fin de l'intervalle
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    */
   @Before(RECHERCHER_JOURNAUX_EVT_DFCE)
   public final void validationArgrechercherJournauxEvenementDfce(
         final Date dateDebut, final Date dateFin, final DFCEConnection dfceConnection) {

      if (dateDebut == null) {
         throw new IllegalArgumentException(
               "l'argument dateDebut n'est pas valide");
      }

      if (dateFin == null) {
         throw new IllegalArgumentException(
               "l'argument dateFin n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode rechercherJournauxCycleVie
    * 
    * @param dateDebut
    *           Date de début de l'intervalle
    * @param dateFin
    *           Date de fin de l'intervalle
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    */
   @Before(RECHERCHER_JOURNAUX_CYLCE_VIE)
   public final void validationArgRechercherJournauxCycleVie(final Date dateDebut,
         final Date dateFin, final DFCEConnection dfceConnection) {

      if (dateDebut == null) {
         throw new IllegalArgumentException(
               "l'argument dateDebut n'est pas valide");
      }

      if (dateFin == null) {
         throw new IllegalArgumentException(
               "l'argument dateFin n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode rechercherJournauxEvenementSae
    * 
    * @param dateDebut
    *           Date de début de l'intervalle
    * @param dateFin
    *           Date de fin de l'intervalle
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    * @param nomBase
    *           Le nom de la base
    */
   @Before(RECHERCHER_JOURNAUX_EVT_SAE)
   public final void validationArgRechercherJournauxEvenementSae(
         final Date dateDebut, final Date dateFin, final DFCEConnection dfceConnection,
         final String nomBase) {

      if (dateDebut == null) {
         throw new IllegalArgumentException(
               "l'argument dateDebut n'est pas valide");
      }

      if (dateFin == null) {
         throw new IllegalArgumentException(
               "l'argument dateFin n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode verifierChainage
    * 
    * @param dateDebut
    *           Date de début de l'intervalle
    * @param dateFin
    *           Date de fin de l'intervalle
    * @param journalType
    *           Le type de journal
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    */
   @Before(VERIFIER_CHAINAGE)
   public final void validationArgVerifierChainage(final Date dateDebut,
         final Date dateFin, final JournalType journalType, final DFCEConnection dfceConnection) {

      if (dateDebut == null) {
         throw new IllegalArgumentException(
               "l'argument dateDebut n'est pas valide");
      }

      if (dateFin == null) {
         throw new IllegalArgumentException(
               "l'argument dateFin n'est pas valide");
      }

      if (journalType == null) {
         throw new IllegalArgumentException(
               "l'argument journalType n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode recupererContenuJournalDfce
    * 
    * @param uuidJournal
    *           Identifiant du journal à télécharger
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    */
   @Before(RECUPERER_CONTENU_JOURNAL_DFCE)
   public final void validationArgRecupererContenuJournalDfce(final UUID uuidJournal,
         final DFCEConnection dfceConnection) {

      if (uuidJournal == null) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      } else if (StringUtils.isBlank(uuidJournal.toString())) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode recupererContenuJournalSae
    * 
    * @param uuidJournal
    *           Identifiant du journal à télécharger
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    * @param nomBase
    *           Le nom de la base
    */
   @Before(RECUPERER_CONTENU_JOURNAL_SAE)
   public final void validationArgRecupererContenuJournalSae(final UUID uuidJournal,
         final DFCEConnection dfceConnection, final String nomBase) {

      if (uuidJournal == null) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      } else if (StringUtils.isBlank(uuidJournal.toString())) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      }

      if (StringUtils.isBlank(nomBase)) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

   /**
    * Vérification des arguments de la méthode getNomJournalDfce
    * 
    * @param uuidJournal
    *           Identifiant du journal à télécharger
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    */
   @Before(GET_NOM_JOURNAL_DFCE)
   public final void validationGetNomJournalDfce(final UUID uuidJournal,
         final DFCEConnection dfceConnection) {

      if (uuidJournal == null) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      } else if (StringUtils.isBlank(uuidJournal.toString())) {
         throw new IllegalArgumentException(
               "l'argument uuidJournal n'est pas valide");
      }

      if (dfceConnection == null) {
         throw new IllegalArgumentException(
               "l'argument dfceConnection n'est pas valide");
      } else {
         if (dfceConnection.getLogin() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Login non renseigné)");
         }
         if (dfceConnection.getPassword() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (Password non renseigné)");
         }
         if (dfceConnection.getServerUrl() == null) {
            throw new IllegalArgumentException(
                  "l'argument dfceConnection n'est pas valide (URL serveur non renseignée)");
         }
      }
   }

}
