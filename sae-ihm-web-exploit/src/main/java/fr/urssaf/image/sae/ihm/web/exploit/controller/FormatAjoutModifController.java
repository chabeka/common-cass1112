package fr.urssaf.image.sae.ihm.web.exploit.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import fr.urssaf.image.sae.format.referentiel.model.FormatFichier;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunFormatException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.FormatAjoutModifForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.FormatsService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.FormatsServiceImpl;

/**
 * Classe permettant de gérer les formats
 */
@Controller
public class FormatAjoutModifController {

   private static final String NOM_VUE = "gestionFormats";

   @Autowired
   private ConfigurationsEnvironnement config;

   private static final String NOM_FORMULAIRE = "formatAjoutModifForm";

   /**
    * GET, affichage d'un format en mode modification<br>
    * <br>
    * Utilisé notamment par l'écran listant les métadonnées, lien "Modifer"
    * 
    * @param formatForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param codeLong
    *           code long de la métadonnée
    * @return La page à afficher
    */
   @RequestMapping(value = "modifierFormat", method = RequestMethod.GET)
   public final String modifierFormat(
         @ModelAttribute(NOM_FORMULAIRE) @Valid FormatAjoutModifForm formatForm,
         BindingResult result, HttpSession session, HttpServletRequest request,
         @RequestParam(value = "idFormat", required = true) String idFormat) {

      if (!result.hasFieldErrors()) {

         // En arrivant sur cette action, on se met en mode modification
         formatForm.setModification(Boolean.TRUE);
         formatForm.setAjout(Boolean.FALSE);

         // Instancie le service des formats dans la configuration courante
         FormatsService formatService = new FormatsServiceImpl(session, config);

         // Récupère les propriétés du format à modifier
         FormatFichier format;
         try {
            format = formatService.findFormat(idFormat);
            // Affecte l'objet format à l'objet formulaire
            formatForm.setFormat(format);
         } catch (AucunFormatException e) {
            ObjectError erreur = new ObjectError("formatForm",
                  "Le format n'existe pas !");
            result.addError(erreur);
         }

      }

      return NOM_VUE;

   }

   /**
    * Initialisation de l'écran d'ajout d'un format<br>
    * <br>
    * Utilisé par le menu principal de l'application "Ajouter un format"
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la request courante
    * @return le nom de la vue
    * 
    */
    @RequestMapping(value = "ajoutFormat", method = RequestMethod.GET)
    public final String initialisationAjoutFormat(Model model,
    HttpSession session, HttpServletRequest request) {
   
    FormatAjoutModifForm form = new FormatAjoutModifForm();
    FormatFichier format = new FormatFichier();
    form.setFormat(format);
    form.setAjout(Boolean.TRUE);
    form.setModification(Boolean.FALSE);
    model.addAttribute(NOM_FORMULAIRE, form);
   
    return NOM_VUE;
   
    }

   /**
    * Réalisation de l'ajout ou de la modification d'un format
    * 
    * @param formatForm
    *           l'objet de formulaire
    * @param result
    *           gestion des erreurs de saisie
    * @param session
    *           la session courante
    * @param request
    *           la request courante
    * @return le nom de la vue
    */
   @RequestMapping(value = "gestionFormats")
   public final String gestionFormat(
         @ModelAttribute(NOM_FORMULAIRE) @Valid FormatAjoutModifForm formatForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      FormatFichier formatModifie = formatForm.getFormat();
      String idFormat = formatModifie.getIdFormat();

      // Instancie le service des formats dans la configuration courante
      FormatsService formatsService = new FormatsServiceImpl(session, config);

      // Différentes règles selon si le format existe déjà ou non
      if (formatForm.getAjout()) {

         // On se trouve en mode "création d'un nouveau format"
         if (!formatsService.formatExiste(idFormat)) {

            // Le format n'existe pas. Cas normal. On le créé
            formatsService.createFormat(formatModifie);

            // On passe l'écran en mode "modification"
            formatForm.setAjout(Boolean.FALSE);
            formatForm.setModification(Boolean.TRUE);

            // Message pour l'utilisateur
            formatForm.setMessage(String.format(
                  "Le format %s a bien été créé", idFormat));

         } else {

            // La métadonnée existe déjà alors que l'on se trouve en mode
            // "création"
            // On informe l'utilisateur qu'il y a un problème
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, String.format(
                  "Il existe déjà un format avec l'identifiant : %s", idFormat));
            result.addError(erreur);

         }
      } else if (formatForm.getModification()) {

         // On se trouve en mode "modification"

         // On modifie le format
         formatsService.modifyFormat(formatModifie);
        
         // L'écran reste en mode modification
         formatForm.setAjout(Boolean.FALSE);
         formatForm.setModification(Boolean.TRUE);

         // Message pour l'utilisateur
         formatForm.setMessage(String.format(
               "Le format %s a bien été modifié", idFormat));

      }

      return NOM_VUE;
   }

}
