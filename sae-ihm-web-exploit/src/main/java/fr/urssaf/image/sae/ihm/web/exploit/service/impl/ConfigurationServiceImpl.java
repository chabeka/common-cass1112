package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URI;
import java.net.URISyntaxException;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter;
import com.thoughtworks.xstream.io.xml.StaxDriver;

import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnementFrontal;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnementFrontal;
import fr.urssaf.image.sae.ihm.web.exploit.service.ConfigurationService;

/**
 * Classe implémentant le service ConfigurationService
 * 
 * 
 */
public class ConfigurationServiceImpl implements ConfigurationService {

   /**
    * Renvoie la liste de toutes les configurations des environnements
    * (CASSANDRA et services Web)
    * 
    * @param fichier
    *           Fichier contenant le liste des configurations environnement
    *           (CASSANDRA et services Web)
    * 
    * @return Liste de toutes les configurations environnement (CASSANDRA et
    *         services Web)
    * @throws FileNotFoundException
    *            Exception générée si le fichier n'existe pas
    * 
    */
   @Override
   public final ConfigurationsEnvironnement chargerConfiguration(File fichier)
         throws FileNotFoundException {

      // Désérialisation des objets EcdeSource via Xstream
      StaxDriver staxDriver = new StaxDriver();
      XStream xstream = new XStream(staxDriver);

      xstream.registerConverter(new AbstractSingleValueConverter() {
         /**
          * Conversion
          */
         @Override
         public boolean canConvert(Class type) {
            return type == URI.class;
         }
         /**
          * Conversion
          */
         @Override
         public Object fromString(String str) {
            URI uri;
            try {
               uri = new URI(str);
            } catch (URISyntaxException e) {
               uri = null;
            }
            return uri;
         }
         /**
          * Conversion
          */
         public String toString(Object obj) {
            return ((URI) obj).toString();
         }
      });

      xstream.alias("parametre", String.class);
      xstream.alias("configuration", ConfigurationEnvironnement.class);
      xstream.alias("configurations", new ConfigurationEnvironnement[] {}
            .getClass());
      ConfigurationsEnvironnement confs = new ConfigurationsEnvironnement();
      confs.setConfigurations((ConfigurationEnvironnement[]) xstream
            .fromXML(new FileInputStream(fichier)));

      return confs;

   }
   
   /**
    * Renvoie la liste de toutes les configurations des frontaux
    * 
    * @param fichier
    *           Fichier contenant le liste des configurations des frontaux
    * 
    * @return Liste de tous les frontaux
    * @throws FileNotFoundException
    *            Exception générée si le fichier n'existe pas
    * 
    */
   @Override
   public final ConfigurationsEnvironnementFrontal chargerConfigurationFrontaux(File fichier)
         throws FileNotFoundException {

      // Désérialisation des objets EcdeSource via Xstream
      StaxDriver staxDriver = new StaxDriver();
      XStream xstream = new XStream(staxDriver);

      xstream.registerConverter(new AbstractSingleValueConverter() {
         /**
          * Conversion
          */
         @Override
         public boolean canConvert(Class type) {
            return type == URI.class;
         }
         /**
          * Conversion
          */
         @Override
         public Object fromString(String str) {
            URI uri;
            try {
               uri = new URI(str);
            } catch (URISyntaxException e) {
               uri = null;
            }
            return uri;
         }
         /**
          * Conversion
          */
         public String toString(Object obj) {
            return ((URI) obj).toString();
         }
      });

      xstream.alias("parametre", String.class);
      xstream.alias("configuration", ConfigurationEnvironnementFrontal.class);
      xstream.alias("configurations", new ConfigurationEnvironnementFrontal[] {}
            .getClass());
      ConfigurationsEnvironnementFrontal confs = new ConfigurationsEnvironnementFrontal();
      confs.setConfigurationsFrontaux((ConfigurationEnvironnementFrontal[]) xstream
            .fromXML(new FileInputStream(fichier)));

      return confs;

   }
   
}
