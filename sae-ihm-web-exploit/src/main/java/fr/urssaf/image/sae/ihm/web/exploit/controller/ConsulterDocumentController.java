package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunDocumentException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterDocumentForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnees;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDocument;
import fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService;

/**
 * Classe centralisant les opérations utilisateurs pour la consultation d'un
 * document
 * 
 * 
 */

@Controller
public class ConsulterDocumentController {

   /**
    * Liste des métadonnées qui peuvent être affichées au retour
    */
   @Autowired
   private Metadonnees metadonneesAffichage;

   /**
    * Service offrant les opérations de recherche sur un ou plusieurs documents
    */
   @Autowired
   private RechercherService rechercherService;

   /**
    * Liste des environnements disponibles pour effectuer les opérations
    */
   @Autowired
   private ConfigurationsEnvironnement environnements;

   /**
    * Initialisation du formulaire de consultation de document
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @param idConsult
    *           l'identifiant du document pour l'initialisation du formulaire
    * @return la page à afficher
    * @throws InterruptedException
    *            l'exception levée
    */
   @RequestMapping(value = "consulterDocument", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request, String idConsult)
         throws InterruptedException {

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      request.setAttribute("listeMetaAffichage", metadonneesAffichage
            .getMetadonnees());

      ConsulterDocumentForm form = new ConsulterDocumentForm();

      if (StringUtils.isNotBlank(idConsult)) {
         form.setIdentifiant(UUID.fromString(idConsult));
      }

      model.addAttribute("consultationForm", form);

      return "consulterDocument";

   }

   /**
    * Lance la consultation de document
    * 
    * @param consulterForm
    *           le formulaire de consultation
    * @param result
    *           gestion des erreurs
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    */
   @RequestMapping(value = "consulterDocument", method = RequestMethod.POST)
   public final String consulterDocument(
         @ModelAttribute("consultationForm") @Valid ConsulterDocumentForm consulterForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {
         try {
            SaeDocument saeDoc;
            // Récupération de l'uuid
            UUID uuid = consulterForm.getIdentifiant();
            // Récupération des métadonnées à afficher en retour
            List<String> codesMeta = consulterForm.getCodeMeta();

            // Récupération de l'url du webservice
            String nomConf = (String) session.getAttribute("nomConfiguration");
            ConfigurationEnvironnement conf = environnements
                  .getConfiguration(nomConf);
            String urlServiceWeb = conf.getUrlWs().toString();

            // Lancement de la consultation (on ne stocke pas le contenu du
            // document)
            saeDoc = rechercherService.consulterDocument(uuid, codesMeta,
                  urlServiceWeb, false);

            request.setAttribute("resRecherche", saeDoc);
            request.setAttribute("id", uuid.toString());

         } catch (ErreurTechniqueException e) {
            ObjectError erreur = new ObjectError("consultationForm", e
                  .getMessage());
            result.addError(erreur);
         } catch (AucunDocumentException e) {
            ObjectError erreur = new ObjectError("consultationForm",
                  "Aucun document ne correspond à cet identifiant");
            result.addError(erreur);
         }

      }

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      request.setAttribute("listeMetaAffichage", metadonneesAffichage
            .getMetadonnees());

      return "consulterDocument";
   }

   /**
    * Permet le téléchargement du document
    * 
    * @param session
    *           la session
    * @param response
    *           la réponse
    * @param idConsult
    *           l'identifiant du document à télécharger
    * @throws AucunDocumentException
    *            Exception levée si aucun document retourné
    * @throws ErreurTechniqueException
    *            Excpetion levée si erreur technique
    * @throws IOException
    *            Exception levée lors de l'affichage du fichier
    */
   @RequestMapping(value = "telecharger")
   public final void telecharger(HttpSession session,
         HttpServletResponse response, String idConsult)
         throws AucunDocumentException, ErreurTechniqueException, IOException {

      SaeDocument saeDoc;
      // Récupération de l'uuid
      // Récupération de l'uuid
      UUID uuid = UUID.fromString(idConsult);
      // Récupération des métadonnées à afficher en retour
      List<String> codesMeta = null;

      // Récupération de l'url du webservice
      String nomConf = (String) session.getAttribute("nomConfiguration");
      ConfigurationEnvironnement conf = environnements
            .getConfiguration(nomConf);
      String urlServiceWeb = conf.getUrlWs().toString();

      // Lancement de la consultation (on stocke le contenu du document)
      saeDoc = rechercherService.consulterDocument(uuid, codesMeta,
            urlServiceWeb, true);

      // Récupération du nom du fichier
      List<Metadonnee> listeMeta = saeDoc.getMetadonnees();
      String nomFichier = idConsult.concat(".pdf");
      for (Metadonnee metadonnee : listeMeta) {
         if ("NomFichier".equals(metadonnee.getCode())) {
            nomFichier = metadonnee.getValeur();
            break;
         }
      }

      // Affichage du fichier
      response.setContentType("application/pdf");
      response.setHeader("Content-Disposition", "attachment; filename=\""
            + nomFichier + "\"");

      ServletOutputStream outputStream = response.getOutputStream();
      outputStream.write(saeDoc.getContenu());

      outputStream.flush();
      outputStream.close();

   }

}
