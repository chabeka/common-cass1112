package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.collections.ListUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterDictionaryForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Dictionnaire;
import fr.urssaf.image.sae.ihm.web.exploit.service.DictionaryService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;
import fr.urssaf.image.sae.metadata.exceptions.DictionaryNotFoundException;
import fr.urssaf.image.sae.metadata.referential.model.Dictionary;
import me.prettyprint.hector.api.Keyspace;

/**
 * Classe permettant de gérer les dictionnaires
 */
@Controller
public class DictionaryController {

  /**
   * Interface permettant de réaliser les opérations sur les dictionnaires
   */
  @Autowired
  private DictionaryService dictService;

  private static final String NOM_FORMULAIRE = "dictForm";

  private static final String TYPE_AFFICHAGE_CONS = "consultation";

  private static final String TYPE_AFFICHAGE_DET = "detail";

  // Nombre de ligne à afficher dans le tableau de résultats
  private static final int NB_LIGNE_TABLEAU = 50;

  /**
   * Initialisation de l'écran de consultation des dictionnaires
   * 
   * @param model
   *          le modèle
   * @param session
   *          la session
   * @param request
   *          la requête
   * @return la page à afficher
   * @throws InterruptedException
   *           Exception
   */
  @RequestMapping(value = "consulterDictionnaires", method = RequestMethod.GET)
  public final String initialisation(final Model model, final HttpSession session,
                                     final HttpServletRequest request)
                                         throws InterruptedException {

    // Récupération de la configuration choisie
    final String nomConf = (String) session.getAttribute("nomConfiguration");
    final Keyspace keyspace = (Keyspace) session.getServletContext()
        .getAttribute(
                      nomConf);
    final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
        .getAttribute(Constants.CQL);

    final ConsulterDictionaryForm form = new ConsulterDictionaryForm();
    form.setNbLignesTableau(NB_LIGNE_TABLEAU);
    form.setModeRecherche("modeTous");
    model.addAttribute(NOM_FORMULAIRE, form);

    final List<Dictionary> listeDict = dictService.findAllDictionaries(keyspace, ccf);

    // on trie les dictionnaires en fonction de leur identifiant
    final Comparator<Dictionary> comparator = new Comparator<Dictionary>() {
      @Override
      public int compare(final Dictionary dict1, final Dictionary dict2) {

        return dict1.getIdentifiant().compareTo(dict2.getIdentifiant());

      }
    };

    Collections.sort(listeDict, comparator);
    request.setAttribute("listeDict", listeDict);

    return "consulterDictionnaires";

  }

  /**
   * Initialisation de l'écran d'ajout d'un Dictionnaires
   * 
   * @param model
   *          Le modèle
   * @param session
   *          La session
   * @param request
   *          La requête
   * @return nom de la vue
   */
  @RequestMapping(value = "ajoutDictionnaire", method = RequestMethod.GET)
  public final String initialisationAjoutMeta(final Model model,
                                              final HttpSession session, final HttpServletRequest request) {

    final ConsulterDictionaryForm form = new ConsulterDictionaryForm();
    final Dictionnaire dict = new Dictionnaire(StringUtils.EMPTY,
                                               ListUtils.EMPTY_LIST);
    form.setDetailDico(dict);
    form.setAjout(Boolean.TRUE);
    form.setModification(Boolean.FALSE);
    model.addAttribute(NOM_FORMULAIRE, form);

    return "gestionDictionnaire";

  }

  /**
   * Lancement de la recherche des dictionnaires
   * 
   * @param dicoForm
   *          Le formulaire
   * @param result
   *          Gestion des erreurs
   * @param session
   *          La session
   * @param request
   *          La requête
   * @return La page à afficher
   */
  @RequestMapping(value = "lancerConsultDico")
  public final String rechercherDico(
                                     @ModelAttribute(NOM_FORMULAIRE) @Valid final ConsulterDictionaryForm dicoForm,
                                     final BindingResult result, final HttpSession session, final HttpServletRequest request) {

    if (!result.hasFieldErrors()) {

      try {
        // Récupération de la configuration choisie
        final String nomConf = (String) session.getAttribute("nomConfiguration");
        final Keyspace keyspace = (Keyspace) session.getServletContext()
            .getAttribute(nomConf);
        final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
            .getAttribute(Constants.CQL);
        dicoForm.setModeAffichage(TYPE_AFFICHAGE_CONS);
        request.setAttribute("modeAffichage", TYPE_AFFICHAGE_CONS);
        // Nombre de ligne max du tableau de résultat
        if (dicoForm.getNbLignesTableau() == 0) {
          dicoForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
          request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
        } else {
          request.setAttribute("nbLignesTableau",
                               dicoForm
                               .getNbLignesTableau());
        }
        if ("modeTous".equals(dicoForm.getModeRecherche())) {

          final List<Dictionary> listeDict = dictService
              .findAllDictionaries(keyspace, ccf);
          // on trie les métadonnées non typés en fonction de leur code
          // long
          final Comparator<Dictionary> comparator = new Comparator<Dictionary>() {
            @Override
            public int compare(final Dictionary dict1, final Dictionary dict2) {

              return dict1.getIdentifiant().compareTo(dict2.getIdentifiant());

            }
          };

          Collections.sort(listeDict, comparator);
          request.setAttribute("listeDict", listeDict);
        }
        if ("modeIdentifiant".equals(dicoForm.getModeRecherche())) {
          if (!StringUtils.isEmpty(dicoForm.getIdentifiant())) {
            final Dictionary dico = dictService.findDictionary(dicoForm
                                                               .getIdentifiant(),
                                                               keyspace,
                                                               ccf);
            final List<Dictionary> list = new ArrayList<>();
            list.add(dico);
            dicoForm.setListeDict(list);
            request.setAttribute("listeDict", list);
          }

        }

      }
      catch (final IllegalArgumentException e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);

        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);
      }
      catch (final DictionaryNotFoundException e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);

      }

    }

    return "consulterDictionnaires";
  }

  /**
   * Récupération du détail d'un dictionnaire
   * 
   * @param dicoForm
   *          Le formulaire
   * @param result
   *          Gestion des erreurs
   * @param session
   *          La session
   * @param request
   *          La requête
   * @param identifiant
   *          identifiant du dictionnaire
   * @return La page à afficher
   */
  @RequestMapping(value = "detailDico")
  public final String afficherDetailDico(
                                         @ModelAttribute(NOM_FORMULAIRE) @Valid final ConsulterDictionaryForm dicoForm,
                                         final BindingResult result,
                                         final HttpSession session,
                                         final HttpServletRequest request,
                                         @RequestParam(value = "identifiant", required = true) final String identifiant) {

    if (!result.hasFieldErrors()) {
      final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
          .getAttribute(Constants.CQL);
      // Récupération de la configuration choisie
      final String nomConf = (String) session.getAttribute("nomConfiguration");
      final Keyspace keyspace = (Keyspace) session.getServletContext()
          .getAttribute(nomConf);
      // Colonnes à afficher suivant les types d'affichage
      dicoForm.setModeAffichage(TYPE_AFFICHAGE_DET);
      dicoForm.setModification(Boolean.TRUE);
      dicoForm.setAjout(Boolean.FALSE);
      final Dictionnaire dico = new Dictionnaire(dictService.findDictionary(
                                                                            identifiant,
                                                                            keyspace,
                                                                            ccf));
      dicoForm.setDetailDico(dico);
    }
    return "gestionDictionnaire";

  }

  /**
   * réalisation de l'ajout ou de la modification d'un dictionnaire
   * 
   * @param dicoForm
   *          Le formulaire
   * @param result
   *          Le résultat
   * @param session
   *          La session
   * @param request
   *          La requête
   * @return {@link RedirectView}
   */
  @RequestMapping(value = "gestionDictionnaire")
  public final String gestionMeta(
                                  @ModelAttribute(NOM_FORMULAIRE) @Valid final ConsulterDictionaryForm dicoForm,
                                  final BindingResult result, final HttpSession session, final HttpServletRequest request) {

    // Récupération de la configuration choisie
    final String nomConf = (String) session.getAttribute("nomConfiguration");
    final Keyspace keyspace = (Keyspace) session.getServletContext()
        .getAttribute(
                      nomConf);
    final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
        .getAttribute(Constants.CQL);

    // // intialisation du jobClock avec les paramètres nécessaires.
    final JobClockConfiguration clock = new JobClockConfiguration();
    clock.setMaxTimeSynchroError(10000000);
    clock.setMaxTimeSynchroWarn(2000000);
    final Dictionary dicoModifie = new Dictionary(dicoForm.getDetailDico()
                                                  .getIdentifiant(),
                                                  dicoForm.getDetailDico().getEntries());
    if (dicoForm.getAjout()) {
      try {
        final Dictionary existingDico = dictService.findDictionary(dicoForm
                                                                   .getDetailDico()
                                                                   .getIdentifiant(),
                                                                   keyspace,
                                                                   ccf);
        if (null != existingDico) {
          final ObjectError erreur = new ObjectError(NOM_FORMULAIRE,
                                                     "Il existe déjà un dictionnaire avec l'identifiant : "
                                                     .concat(existingDico.getIdentifiant()));
          result.addError(erreur);
          return "gestionDictionnaire";
        } else {
          throw new DictionaryNotFoundException("Le dictionnaire n'existe pas");// EC
        }
      }
      catch (final DictionaryNotFoundException ex) {

        dictService.createOrModifyDictionary(dicoModifie, clock, keyspace, ccf);
        dicoForm.setMessage("Le dictionnaire ".concat(dicoModifie.getIdentifiant())
                            .concat(" a bien été créé"));
        dicoForm.setAjout(Boolean.FALSE);
        dicoForm.setModification(Boolean.TRUE);
      }
    } else if (dicoForm.getModification()) {
      dictService.createOrModifyDictionary(dicoModifie, clock, keyspace, ccf);
      dicoForm.setMessage("Le dictionnaire ".concat(dicoModifie.getIdentifiant())
                          .concat(" a bien été modifié"));
      dicoForm.setAjout(Boolean.FALSE);
      dicoForm.setModification(Boolean.TRUE);
    }

    return "gestionDictionnaire";
    // return new RedirectView("detailDico.do?identifiant=".concat(dicoModifie
    // .getId()));
  }

}
