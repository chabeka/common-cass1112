package fr.urssaf.image.sae.ihm.web.exploit.security;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.namespace.QName;

import org.apache.axiom.om.OMElement;
import org.apache.axiom.soap.SOAPEnvelope;
import org.apache.axiom.soap.SOAPHeader;
import org.apache.axis2.AxisFault;
import org.apache.axis2.context.MessageContext;
import org.apache.axis2.handlers.AbstractHandler;
import org.apache.rampart.util.Axis2Util;
import org.apache.ws.security.WSConstants;
import org.apache.ws.security.WSSecurityException;
import org.apache.ws.security.message.WSSecHeader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.ClassPathResource;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import fr.urssaf.image.sae.vi.service.WebServiceVICreateService;

/**
 * Handler pour ajouter le VI dans le header du soap
 * 
 *
 */
public class VIHandler extends AbstractHandler {
   private static final Logger LOG = LoggerFactory.getLogger(VIHandler.class);

   private static KeyStore keystore;
   private static String password;
   private static String alias;

   private final WebServiceVICreateService service;
   
   static {
      password = "dKQmz8NwyO4d";
      try {
         keystore = KeyStore.getInstance("PKCS12");
         InputStream inputStream = new ClassPathResource(
               "certificats/ApplicationTestSAE.p12").getInputStream();
         // FileInputStream inputStream = new FileInputStream(
         // "certificats/ApplicationTestSAE.p12");
         try {
            keystore.load(inputStream, password.toCharArray());

         } finally {
            inputStream.close();
         }
         alias = keystore.aliases().nextElement();
      } catch (KeyStoreException e) {
         throw new IllegalStateException(e);
      } catch (FileNotFoundException e) {
         throw new IllegalStateException(e);
      } catch (NoSuchAlgorithmException e) {
         throw new IllegalStateException(e);
      } catch (CertificateException e) {
         throw new IllegalStateException(e);
      } catch (IOException e) {
         throw new IllegalStateException(e);
      }
   }

   /**
    * Constructeur
    * @param service service de création du VI
    */
   public VIHandler(WebServiceVICreateService service) {
      super();
      this.service = service;
   }
   
   /**
    * Renvoie la liste des PAGM
    * 
    * @return
    */
   private List<String> getPagm() {
      List<String> liste = new ArrayList<String>();
      // TODO : Mettre le bon PAGM, éventuellement en fonction du PAGM
      // utilisateur qd il sera défini
      // (qui serait passé par le msgCtx) à partir de SaeStubUtils
      liste.add("ROLE_TOUS;FULL");
      return liste;
   }

   /**
    * Le nom de la propriété du MessageContext dans laquelle on renseigne le
    * message SOAP de sortie
    */
   public static final String PROP_MESSAGE_OUT = "messageOut";

   /**
    * Création d'une balise WS-Security dans le header du SOAP<br>
    * <br>
    * Insertion du VI dans cet balise WS-Security
    * 
    * {@inheritDoc}
    * 
    */
   @Override
   public final InvocationResponse invoke(MessageContext msgCtx)
         throws AxisFault {

      LOG.debug("Début de l'interception du message SOAP avant envoi");

      // Création du VI à partir du choix de configuration
      // création de WS-Security
      try {
         Document doc = Axis2Util.getDocumentFromSOAPEnvelope(msgCtx
               .getEnvelope(), true);

         WSSecHeader secHeader = new WSSecHeader(null, false);
         secHeader.insertSecurityHeader(doc);

         msgCtx.setEnvelope((SOAPEnvelope) doc.getDocumentElement());

      } catch (WSSecurityException e) {
         throw new IllegalStateException(e);
      }

      
      // TODO : ISSUER à vérifier
      String issuer = "SaeIntegration";
      Element token = service.creerVIpourServiceWeb(this.getPagm(), issuer, "",
            keystore, alias, password);

      SOAPHeader header = msgCtx.getEnvelope().getHeader();

      OMElement security = header.getFirstChildWithName(new QName(
            WSConstants.WSSE_NS, "Security"));

      try {

         security.addChild(org.apache.axis2.util.XMLUtils.toOM(token));

      } catch (Exception e) {
         throw new IllegalStateException(e);
      }

      return InvocationResponse.CONTINUE;
   }
}
