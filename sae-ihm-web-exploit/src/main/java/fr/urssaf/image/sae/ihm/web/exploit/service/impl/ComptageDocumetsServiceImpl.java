package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.Iterator;
import java.util.UUID;

import net.docubase.toolkit.model.ToolkitFactory;
import net.docubase.toolkit.model.base.Base;
import net.docubase.toolkit.model.document.Document;
import net.docubase.toolkit.model.search.SearchQuery;
import net.docubase.toolkit.service.ServiceProvider;
import net.docubase.toolkit.service.administration.BaseAdministrationService;
import net.docubase.toolkit.service.ged.SearchService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.ihm.web.exploit.exception.IhmWebRuntimeException;
import fr.urssaf.image.sae.ihm.web.exploit.service.ComptageDocumentsService;

/**
 * Implémentation du service {@link}ComptageDocumetsService
 * 
 * 
 */
@Service
public class ComptageDocumetsServiceImpl implements ComptageDocumentsService {

   private static final String FIN_LOG = "{} - fin";
   private static final String DEBUT_LOG = "{} - début";
   private static final Logger LOGGER = LoggerFactory
         .getLogger(ComptageDocumetsServiceImpl.class);



   @Override
   public int getNbDocArchives(UUID idTraitementMasse,
         DFCEConnection dfceConnection) {

      String trcPrefix = "getNbDocArchives";
      LOGGER.debug(DEBUT_LOG, trcPrefix);

      LOGGER.debug("{} - UUID Traitement de masse : {}", new String[] {
            trcPrefix, idTraitementMasse.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });

      ServiceProvider serviceProvider = ServiceProvider.newServiceProvider();
      serviceProvider.connect(dfceConnection.getLogin(), dfceConnection
            .getPassword(), dfceConnection.getServerUrl().toString());

      String lucene = "iti:" + idTraitementMasse;

      int compteur = 0;

      try {

         BaseAdministrationService baseService = serviceProvider
               .getBaseAdministrationService();

         Base base = baseService.getBase(dfceConnection.getBaseName());

         SearchService searchService = serviceProvider.getSearchService();

         SearchQuery searchQuery = ToolkitFactory.getInstance()
               .createMonobaseQuery(lucene, base);

         Iterator<Document> iteratorDoc = searchService
               .createDocumentIterator(searchQuery);

         while (iteratorDoc.hasNext()) {
            iteratorDoc.next();
            compteur++;
         }

         LOGGER.debug("{} - Nombre de documents : {}", new String[] {
               trcPrefix, Integer.toString(compteur) });
         
      } catch (Throwable ex) {
         LOGGER.debug("{} - Erreur à partir du nombre de documents : ", new String[] {
               trcPrefix, Integer.toString(compteur) });
        
         throw new IhmWebRuntimeException(ex);

      }

      finally {
         serviceProvider.disconnect();
      }
      
      LOGGER.debug(FIN_LOG, trcPrefix);
      return compteur;
   }
}
