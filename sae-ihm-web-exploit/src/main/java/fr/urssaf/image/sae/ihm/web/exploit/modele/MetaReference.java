package fr.urssaf.image.sae.ihm.web.exploit.modele;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

public class MetaReference {
   private static final long serialVersionUID = 1L;
   private String shortCode=StringUtils.EMPTY;
   private String longCode=StringUtils.EMPTY;
   private String type=StringUtils.EMPTY;
   private Boolean requiredForArchival=Boolean.FALSE;
   private Boolean requiredForStorage=Boolean.FALSE;
   private String length = StringUtils.EMPTY;
   private String pattern=StringUtils.EMPTY;
   private Boolean consultable=Boolean.FALSE;
   private Boolean defaultConsultable=Boolean.FALSE;
   private Boolean searchable=Boolean.FALSE;
   private Boolean internal=Boolean.FALSE;
   private Boolean archivable=Boolean.FALSE;
   private String label=StringUtils.EMPTY;
   private String description=StringUtils.EMPTY;
   private Boolean hasDictionary=Boolean.FALSE;
   private String dictionaryName=StringUtils.EMPTY;
   private Boolean isIndexed=Boolean.FALSE;
   private Boolean modifiable=Boolean.FALSE;
   
   /**
    * @return Le code court
    */
   public final String getShortCode() {
      return shortCode;
   }

   /**
    * @param shortCode
    *           : Le code court
    */
   public final void setShortCode(final String shortCode) {
      this.shortCode = shortCode;
   }

   /**
    * @return Le code long
    */
   public final String getLongCode() {
      return longCode;
   }

   /**
    * @param longCode
    *           : Le code long
    */
   public final void setLongCode(String longCode) {
      this.longCode = longCode;
   }

   /**
    * @return Le type de la métadonnée
    */
   public final String getType() {
      return type;
   }

   /**
    * @param type
    *           Le type de la métadonnée
    */
   public final void setType(final String type) {
      this.type = type;
   }

   /**
    * @return La longueur maximal de la valeur de la métadonnée.
    */
   public final String getLength() {
      return length;
   }

   /**
    * @param length
    *           : La longueur maximal de la valeur de la métadonnée.
    * 
    */
   public final void setLength(final String length) {
      this.length = length;
   }

   /**
    * @return Le motif que la valeur de la métadonnée doit respecter.
    */
   public final String getPattern() {
      return pattern;
   }

   /**
    * @param pattern
    *           : Le motif que la valeur de la métadonnée doit respecter.
    */
   public final void setPattern(final String pattern) {
      this.pattern = pattern;
   }

   /**
    * @return True si la métadonnée doit être visible par l'utilisateur sinon
    *         False.
    */
   public final boolean isConsultable() {
      return consultable;
   }

   /**
    * @param consultable
    *           : True si la métadonnée est consultable par l'utilisateur sinon
    *           False.
    */
   public final void setConsultable(final boolean consultable) {
      this.consultable = consultable;
   }

   /**
    * @return True si la métadonnée est interrogeable par l'utilisateur sinon
    *         False.
    */
   public final boolean isSearchable() {
      return searchable;
   }

   /**
    * @param isSearchable
    *           : True si la métadonnée est interrogeable par l'utilisateur
    *           sinon False.
    * 
    */
   public final void setSearchable(final boolean isSearchable) {
      this.searchable = isSearchable;
   }

   /**
    * @return True si la métadonnée est une métadonnée métier sinon False.
    */
   public final boolean isInternal() {
      return internal;
   }

   /**
    * @param isInternal
    *           : True si la métadonnée est une métadonnée métier sinon False.
    */
   public final void setInternal(final boolean isInternal) {
      this.internal = isInternal;
   }

   /**
    * @param isArchivable
    *           : True si la métadonnée est interrogeable par l'utilisateur
    *           sinon False.
    */
   public final void setArchivable(final boolean isArchivable) {
      this.archivable = isArchivable;
   }

   /**
    * @return True si la métadonnée est interrogeable par l'utilisateur sinon
    *         False.
    */
   public final boolean isArchivable() {
      return archivable;
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public final String toString() {
      return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).append(
            "shortCode", shortCode).append("longCode", longCode).append(
            "label", label).append("pattern", pattern).append("type", type)
            .append("required", "").append("length", length).append("pattern",
                  pattern).append("consultable", consultable).append(
                  "archivable", archivable).append("requiredForStorage",
                  requiredForStorage).append("requiredForArchival",
                  requiredForArchival).append("defaultConsultable",
                  defaultConsultable).append("searchable", searchable).append(
                  "internal", internal).toString();
   }

   /**
    * 
    * @return True si la métadonnée est requise pour l'archivage.
    */
   public final boolean isRequiredForArchival() {
      return requiredForArchival;
   }

   /**
    * 
    * @param requiredForArchival
    *           : le booleen qui indique si la métadonnée est requise pour
    *           l'archivage.
    */
   public final void setRequiredForArchival(final boolean requiredForArchival) {
      this.requiredForArchival = requiredForArchival;
   }

   /**
    * 
    * @return True si la métadonnée est requise pour le stockage.
    */
   public final boolean isRequiredForStorage() {
      return requiredForStorage;
   }

   /**
    * 
    * @param requiredForStorage
    *           : le booleen qui indique si la métadonnée est requise pour le
    *           stockage.
    */
   public final void setRequiredForStorage(final boolean requiredForStorage) {
      this.requiredForStorage = requiredForStorage;
   }

   /**
    * 
    * @return True si la métadonnée est consultable par défaut.
    */
   public final boolean isDefaultConsultable() {
      return defaultConsultable;
   }

   /**
    * 
    * @param defaultConsultable
    *           : le booleen qui indique si la métadonnée consultable par
    *           défaut.
    */
   public final void setDefaultConsultable(final boolean defaultConsultable) {
      this.defaultConsultable = defaultConsultable;
   }

   /**
    * @param label
    *           : Le libellé.
    */
   public final void setLabel(final String label) {
      this.label = label;
   }

   /**
    * @return Le libellé
    */
   public final String getLabel() {
      return label;
   }

   /**
    * @param description
    *           : Le descriptif
    */
   public final void setDescription(final String description) {
      this.description = description;
   }

   /**
    * @return Le descriptif
    */
   public final String getDescription() {
      return description;
   }

   /**
    * @return renvoie vrai/faux suivant si la métadonnée est soumise à un
    *         dictionnaire
    */
   public final boolean getHasDictionary() {
      return hasDictionary;
   }

   /**
    * @param hasDictionary
    *           indique si la métadonnée est soumise à un dictionnaire
    */
   public final void setHasDictionary(boolean hasDictionary) {
      this.hasDictionary = hasDictionary;
   }

   /**
    * @return nom du dictionnaire associé
    */
   public final String getDictionaryName() {
      return dictionaryName;
   }

   /**
    * @param dictionaryName
    *           nom du dictionnaire
    */
   public final void setDictionaryName(String dictionaryName) {
      this.dictionaryName = dictionaryName;
   }

   /**
    * @return renvoie si la métadonnée est indexée
    */
   public final boolean getIsIndexed() {
      return isIndexed;
   }

   /**
    * @param isIndexed
    *           indique que la métadonnée est indexée
    */
   public final void setIsIndexed(boolean isIndexed) {
      this.isIndexed = isIndexed;
   }

   /**
    * @return indicateur désignant la métadonnée comme modifiable
    */
   public final boolean isModifiable() {
      return modifiable;
   }

   /**
    * @param modifiable
    *           indicateur désignant la métadonnée comme modifiable
    */
   public final void setModifiable(boolean modifiable) {
      this.modifiable = modifiable;
   }
}
