package fr.urssaf.image.sae.ihm.web.exploit.service;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import me.prettyprint.hector.api.Keyspace;
import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucuneTraceException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.TraceException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.DfceTrace;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeTrace;
import fr.urssaf.image.sae.trace.model.TraceType;

/**
 * Interface permettant de réaliser les opérations sur les traces
 * 
 * 
 */
public interface TraceService {

   /**
    * Renvoie la liste des traces du registre passé en paramètre pour un
    * intervalle de dates donné
    * 
    * @param type
    *           Type de la trace à récupérer
    * @param dateDebut
    *           Date de début de l'intervalle
    * @param dateFin
    *           Date de fin de l'intervalle
    * @param taille
    *           Taille de la liste à retourner
    * @param keyspace
    *           Keyspace de la configuration choisie
    * @param ordreInverse
    *           Recherche des traces dans l'ordre inverse ou non
    * @return La liste des traces Sae comprises dans l'intervalle de dates
    *         données
    * @throws AucuneTraceException
    *            Exception levée lorque la trace demandée n'existe pas
    * @throws TraceException
    *            Exception levée si la recherche porte sur un mauvais type de
    *            trace
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur imprévue
    */
   List<SaeTrace> lectureTracesSaeParDates(TraceType type, Date dateDebut,
         Date dateFin, int taille, boolean ordreInverse, Keyspace keyspace)
         throws AucuneTraceException, TraceException, ErreurTechniqueException;

   /**
    * Renvoie la liste des traces du journal passé en paramètre pour un
    * intervalle de dates donné
    * 
    * @param type
    *           Type de la trace à récupérer
    * @param dateDebut
    *           Date de début de l'intervalle
    * @param dateFin
    *           Date de fin de l'intervalle
    * @param taille
    *           Taille de la liste à retourner
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    * @param ordreInverse
    *           Recherche des traces dans l'ordre inverse ou non
    * @return La liste des traces DFCE comprises dans l'intervalle de dates
    *         donné
    * @throws AucuneTraceException
    *            Exception levée lorque la trace demandée n'existe pas
    * @throws TraceException
    *            Exception levée si la recherche porte sur un mauvais type de
    *            trace
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur imprévue
    */
   List<DfceTrace> lectureTracesDfceParDates(TraceType type, Date dateDebut,
         Date dateFin, int taille, boolean ordreInverse,
         DFCEConnection dfceConnection) throws AucuneTraceException,
         TraceException, ErreurTechniqueException;

   /**
    * Renvoie la liste des traces du journal du cycle de vie des archives pour
    * un document donné
    * 
    * @param type
    *           Type de la trace à récupérer
    * @param docUuid
    *           Identifiant unique du document
    * @param dfceConnection
    *           Paramètres de connexion à DFCE
    * @return Liste des traces DFCE pour le document donné
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur imprévue
    * @throws TraceException
    *            Exception levée si la recherche porte sur un mauvais type de
    *            trace
    */
   List<DfceTrace> lectureTracesDfceParDocUuid(TraceType type, UUID docUuid,
         DFCEConnection dfceConnection) throws TraceException,
         ErreurTechniqueException;

   /**
    * Renvoie les données complètes de la trace avec l'indentifiant passé en
    * paramètre
    * 
    * @param type
    *           Type de la trace à récupérer
    * @param uuid
    *           Identifiant unique de la trace
    * @param keyspace
    *           Keyspace de la configuration choisie
    * @return Trace SAE complète
    * @throws AucuneTraceException
    *            Exception levée lorque la trace demandée n'existe pas
    * @throws TraceException
    *            Exception levée si la recherche porte sur un mauvais type de
    *            trace
    * @throws ErreurTechniqueException
    *            Exception levée en cas d'erreur imprévue
    */
   SaeTrace lectureTraceSaeParUuid(TraceType type, UUID uuid, Keyspace keyspace)
         throws AucuneTraceException, TraceException, ErreurTechniqueException;

}
