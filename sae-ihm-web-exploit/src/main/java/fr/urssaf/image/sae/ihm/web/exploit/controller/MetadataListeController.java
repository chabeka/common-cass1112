package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.sae.ihm.web.exploit.formulaire.MetadataListeForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;

/**
 * Classe permettant de gérer les métadonnées
 */
@Controller
@RequestMapping("consulterMetadonnees")
public class MetadataListeController {

   private static final String NOM_VUE = "consulterMetadonnees";

   @Autowired
   private ConfigurationsEnvironnement config;

   private static final String NOM_FORMULAIRE = "metaListeForm";

   /**
    * Nombre de ligne à afficher dans le tableau de résultats
    */
   private static final int DEFAULT_NB_LIGNE_TABLEAU = 100;

   /**
    * Le GET de l'écran
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return le nom de la vue
    */
   @RequestMapping(method = RequestMethod.GET)
   public final String leGet(Model model, HttpSession session,
         HttpServletRequest request, Integer nbLignesTableau) {

      // Création de l'objet formulaire
      MetadataListeForm form = new MetadataListeForm();
      model.addAttribute(NOM_FORMULAIRE, form);

      // Initialisation du nombre de lignes max dans le tableau
      // Regarde cette info a été passée au GET
      if (nbLignesTableau != null) {
         form.setNbLignesTableau(nbLignesTableau);
      } else {
         form.setNbLignesTableau(DEFAULT_NB_LIGNE_TABLEAU);
      }
      // ligne ci-dessous pour displaytag
      request.setAttribute("nbLignesTableau", form.getNbLignesTableau());

      // Construction de la liste des métadonnées
      List<MetadataReference> metadatas = construitListeMetadonnees(session);

      // Mémorisation de la liste en session
      request.setAttribute("listeMeta", metadatas);

      // Renvoie le nom de la vue
      return NOM_VUE;

   }

   /**
    * Le POST de l'écran : affichage des métadonnées avec les filtres
    * utilisateurs
    * 
    * @param form
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return le nom de la vue
    */
   @RequestMapping(method = RequestMethod.POST)
   public final String lePost(
         @ModelAttribute(NOM_FORMULAIRE) @Valid MetadataListeForm form,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {

         try {

            // Nombre de lignes max du tableau de résultat
            int nbLignesTableau;
            if (form.getNbLignesTableau() == 0) {
               nbLignesTableau = DEFAULT_NB_LIGNE_TABLEAU;
            } else {
               nbLignesTableau = form.getNbLignesTableau();
            }
            form.setNbLignesTableau(nbLignesTableau);
            request.setAttribute("nbLignesTableau", nbLignesTableau);

            // Construction de la liste des métadonnées
            List<MetadataReference> metadatas = construitListeMetadonnees(session);

            // Mémorisation de la liste en session
            request.setAttribute("listeMeta", metadatas);

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);
         }

      }

      return NOM_VUE;
   }

   private List<MetadataReference> construitListeMetadonnees(HttpSession session) {

      // Initialise le résultat à renvoyer
      List<MetadataReference> listeMetas = new ArrayList<MetadataReference>();

      // Instantiation du service de gestion des métadonnées dans la
      // configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Construit la liste des métadonnées, triées par code long
      listeMetas = metaService.findAllMetadata();
      Comparator<MetadataReference> comparator = new Comparator<MetadataReference>() {
         @Override
         public int compare(MetadataReference meta1, MetadataReference meta2) {

            return meta1.getLongCode().compareTo(meta2.getLongCode());

         }
      };
      Collections.sort(listeMetas, comparator);

      // Renvoie du résultat
      return listeMetas;

   }

}
