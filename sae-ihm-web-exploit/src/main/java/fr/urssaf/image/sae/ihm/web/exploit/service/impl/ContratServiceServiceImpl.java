/**
 * 
 */
package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.netflix.curator.framework.CuratorFramework;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.sae.droit.cache.CacheConfig;
import fr.urssaf.image.sae.droit.dao.ActionUnitaireDao;
import fr.urssaf.image.sae.droit.dao.ContratServiceDao;
import fr.urssaf.image.sae.droit.dao.FormatControlProfilDao;
import fr.urssaf.image.sae.droit.dao.PagmDao;
import fr.urssaf.image.sae.droit.dao.PagmaDao;
import fr.urssaf.image.sae.droit.dao.PagmfDao;
import fr.urssaf.image.sae.droit.dao.PagmpDao;
import fr.urssaf.image.sae.droit.dao.PrmdDao;
import fr.urssaf.image.sae.droit.dao.model.ActionUnitaire;
import fr.urssaf.image.sae.droit.dao.model.FormatControlProfil;
import fr.urssaf.image.sae.droit.dao.model.Pagm;
import fr.urssaf.image.sae.droit.dao.model.Pagma;
import fr.urssaf.image.sae.droit.dao.model.Pagmf;
import fr.urssaf.image.sae.droit.dao.model.Pagmp;
import fr.urssaf.image.sae.droit.dao.model.Prmd;
import fr.urssaf.image.sae.droit.dao.model.ServiceContract;
import fr.urssaf.image.sae.droit.dao.support.ActionUnitaireSupport;
import fr.urssaf.image.sae.droit.dao.support.ContratServiceSupport;
import fr.urssaf.image.sae.droit.dao.support.FormatControlProfilSupport;
import fr.urssaf.image.sae.droit.dao.support.PagmSupport;
import fr.urssaf.image.sae.droit.dao.support.PagmaSupport;
import fr.urssaf.image.sae.droit.dao.support.PagmfSupport;
import fr.urssaf.image.sae.droit.dao.support.PagmpSupport;
import fr.urssaf.image.sae.droit.dao.support.PrmdSupport;
import fr.urssaf.image.sae.droit.exception.FormatControlProfilNotFoundException;
import fr.urssaf.image.sae.droit.model.SaeContratService;
import fr.urssaf.image.sae.droit.model.SaePagm;
import fr.urssaf.image.sae.droit.model.SaePagma;
import fr.urssaf.image.sae.droit.model.SaePagmf;
import fr.urssaf.image.sae.droit.model.SaePagmp;
import fr.urssaf.image.sae.droit.service.FormatControlProfilService;
import fr.urssaf.image.sae.droit.service.SaeActionUnitaireService;
import fr.urssaf.image.sae.droit.service.SaeDroitService;
import fr.urssaf.image.sae.droit.service.SaePrmdService;
import fr.urssaf.image.sae.droit.service.impl.FormatControlProfilServiceImpl;
import fr.urssaf.image.sae.droit.service.impl.SaeActionUnitaireServiceImpl;
import fr.urssaf.image.sae.droit.service.impl.SaeDroitServiceImpl;
import fr.urssaf.image.sae.droit.service.impl.SaePrmdServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.droit.AjoutPagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.CsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.DroitType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.FormatControlProfilType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ModifCsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.ModifPagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmaType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmfType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmpType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PrmdType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.SuppPagmType;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.IntegrationRuntimeException;
import fr.urssaf.image.sae.ihm.web.exploit.factory.ObjectFactory;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.ContratServiceService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.JAXBUtils;
import fr.urssaf.image.sae.ihm.web.exploit.utils.LogUtils;

/**
 * 
 * 
 */
public class ContratServiceServiceImpl implements ContratServiceService {

   private static final Logger LOG = LoggerFactory
         .getLogger(ContratServiceService.class);

   private CacheConfig cacheConfig;

   private SaePrmdService saePrmdService;

   private FormatControlProfilService fcpService;

   private SaeDroitService saeDroitService;

   private SaeActionUnitaireService saeAuService;
   private JobClockSupport jobClock;

   /**
    * Constructeur
    */
   public ContratServiceServiceImpl() {

   }

   /**
    * Constructeur
    * 
    * @param keyspace
    *           Le keyspace
    * @param conf
    *           La configuration de l'environnement
    * @param curator
    *           Le curator
    */
   public ContratServiceServiceImpl(Keyspace keyspace,
         ConfigurationEnvironnement conf, CuratorFramework curator) {

      ContratServiceSupport csSupport = new ContratServiceSupport(
            new ContratServiceDao(keyspace));
      cacheConfig = new CacheConfig();
      cacheConfig.setDroitsCacheDuration(0);

      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      jobClock = new JobClockSupportImpl(keyspace, clock);

      PrmdSupport prmdSupport = new PrmdSupport(new PrmdDao(keyspace));
      saePrmdService = new SaePrmdServiceImpl(prmdSupport, jobClock, curator);

      FormatControlProfilSupport formControlProfilSupport = new FormatControlProfilSupport(
            new FormatControlProfilDao(keyspace));
      fcpService = new FormatControlProfilServiceImpl(formControlProfilSupport,
            jobClock, 1, false);

      ActionUnitaireSupport auSupport = new ActionUnitaireSupport(
            new ActionUnitaireDao(keyspace));
      saeAuService = new SaeActionUnitaireServiceImpl(auSupport, jobClock,
            curator);

      PagmpSupport pagmpSupport = new PagmpSupport(new PagmpDao(keyspace));
      PagmaSupport pagmaSupport = new PagmaSupport(new PagmaDao(keyspace));
      PagmSupport pagmSupport = new PagmSupport(new PagmDao(keyspace));
      PagmfSupport pagmfSupport = new PagmfSupport(new PagmfDao(keyspace,
            formControlProfilSupport));

      saeDroitService = new SaeDroitServiceImpl(csSupport, pagmSupport,
            pagmaSupport, pagmpSupport, pagmfSupport, formControlProfilSupport,
            auSupport, prmdSupport, curator, jobClock, cacheConfig, keyspace);

   }

   /**
    * Service de créations des droits dans Cassandra (PRMD et CS)
    * 
    * @param droitType
    *           Droit à créer
    * @return log de la création
    * @throws ErreurTechniqueException
    *            Exception levée si pb de mise à jour
    */
   public final List<String> creationDesDroits(DroitType droitType)
         throws ErreurTechniqueException {

      List<String> resultat = new ArrayList<String>();

      // Traitement des PRMD
      resultat = traitementPrmd(droitType);

      // Traitement des profils de contrôle de format
      resultat.addAll(traitementFormatControlProfil(droitType));

      // Traitement de modifications de PRMD existants
      resultat.addAll(traitementModifPrmdExistant(droitType));

      // Traitement de modifications de profils de contrôle de format existants
      resultat.addAll(traitementModifFormatControlProfilExistant(droitType));

      // Traitement des CS
      resultat.addAll(traitementCs(droitType));

      // Traitement de modification des CS
      resultat.addAll(traitementModifCsExistant(droitType));

      // Traitement des ajouts de PAGM à un CS existant
      resultat.addAll(traitementAjoutPagmDansCsExistant(droitType));

      // Traitement de modification de PAGM à un CS existant
      resultat.addAll(traitementModifPagmDansCsExistant(droitType));

      // Traitement de suppression de PAGM (supprime aussi PAGMa, PAGMp et
      // PAGMf)
      resultat.addAll(traitementSuppPagmDansCsExistant(droitType));

      // Traces
      LOG.info("Création des droits terminée");

      return resultat;
   }

   /**
    * Chargement du fichier XML de paramétrage des droits à créer
    * 
    * @param cheminFichierDroitsXml
    *           chemin du fichier à charger
    * @return Droit à créer
    */
   public final DroitType chargeFichierXml(String cheminFichierDroitsXml) {

      try {

         return JAXBUtils.unmarshalAvecXsdDansRess(DroitType.class,
               cheminFichierDroitsXml, "/xsd/saedroits/saedroits.xsd");

      } catch (Exception ex) {
         throw new IntegrationRuntimeException(
               "Erreur lors du chargement du fichier XML contenant les droits à créer",
               ex);
      }

   }

   /**
    * Chargement du fichier XML de paramétrage des droits à créer
    * 
    * @param fichierDroitsXml
    *           fichier à charger
    * @return Droit à créer
    */
   public final DroitType chargeFichierXml(InputStream fichierDroitsXml) {

      try {

         return JAXBUtils.unmarshalStreamAvecXsdDansRess(DroitType.class,
               fichierDroitsXml, "/xsd/saedroits/saedroits.xsd");

      } catch (Exception ex) {
         throw new IntegrationRuntimeException(
               "Erreur lors du chargement du fichier XML contenant les droits à créer",
               ex);
      }

   }

   private List<String> traitementPrmd(DroitType droitType) {

      List<String> resultat = new ArrayList<String>();

      int nbPrmd = droitType.getListePrmd().getPrmd().size();
      LOG.info("Nombre de PRMD contenus dans le fichier : {}", nbPrmd);
      if (nbPrmd > 0) {

         // Trace
         LOG.info("- Traitement des PRMD");
         resultat.add("- Traitement des PRMD :");

         // Boucle sur la liste des PRMD
         for (PrmdType prmdType : droitType.getListePrmd().getPrmd()) {

            // Init boucle
            String codePrmd = prmdType.getCode();

            // Trace
            LOG.info("Traitement du PRMD \"{}\"", codePrmd);

            // On regarde si le PRMD existe déjà
            // Si oui, on passe au PRMD suivant
            // Si non, on le créé
            boolean prmdExists = saePrmdService.prmdExists(codePrmd);
            if (prmdExists) {

               // Trace
               String message = StringUtils
                     .replace(
                           "Le PRMD {0} existe déjà dans la base. On passe au suivant.",
                           "{0}", codePrmd);

               LOG.info(message);
               resultat.add(message);

            } else {

               // Création d'un objet Prmd à passer ensuite au service de
               // création
               // des PRMD de sae-droit
               Prmd prmd = ObjectFactory.createPrmd(prmdType);

               // Traces
               logPrmd(prmd);

               // Appel du service de sae-droit pour créer les PRMD
               LOG.debug("Appel du service de sae-droit pour créer le PRMD");
               saePrmdService.createPrmd(prmd);

               // Trace
               String message = StringUtils.replace(
                     "Le PRMD {0} a été créé avec succès.", "{0}", codePrmd);

               LOG.debug(message);
               resultat.add(message);

            }

         }

         // Trace
         LOG.info("Traitement des PRMD terminé");
      }
      return resultat;
   }

   private List<String> traitementModifCsExistant(DroitType droitType) {

      List<String> resultat = new ArrayList<String>();

      if ((droitType.getListeModifCs() != null)
            && (CollectionUtils.isNotEmpty(droitType.getListeModifCs().getCs()))) {

         int nbCs = droitType.getListeModifCs().getCs().size();
         LOG.info("Nombre de CS à modifier contenus dans le fichier : {}",
               nbCs);
         if (nbCs > 0) {

            // Trace
            LOG.info("- Traitement de modification des CS");
            resultat.add("- Traitement de modification des CS :");

            // Boucle sur la liste des CS
            for (ModifCsType modifCsType : droitType.getListeModifCs().getCs()) {
            
               // Issuer
               String issuer = modifCsType.getIssuer();

               // Trace
               LOG.info("Modification du CS \"{}\"", issuer);

               // On regarde si le CS existe déjà
               // Si non, on passe au CS suivant
               // Si oui, on le modifie
               if (!saeDroitService.contratServiceExists(issuer)) {

                  String message = StringUtils
                        .replace(
                              "Le CS {0} n'existe pas dans la base. Modification impossible.",
                              "{0}", issuer);

                  // Trace
                  LOG.info(message);
                  resultat.add(message);

               } else {

                  // Création d'un objet CS à passer ensuite au service de
                  // création
                  // des CS de sae-droit
                  
                  ServiceContract cs = ObjectFactory.createCs(modifCsType);

                  // Traces
                  logCs(cs);

                  // Appel du service de sae-droit pour créer le CS
                  LOG
                        .debug("Appel du service de sae-droit pour modifier le CS");
                  
                  saeDroitService.modifierContratService(cs);
                  // Trace
                  String message = StringUtils.replace(
                        "Le CS {0} a été modifié avec succès.", "{0}",
                        issuer);
                  LOG.debug(message);
                  resultat.add(message);
               }

            }

            // Trace
            LOG.info("Traitement de modification des PRMD terminé");

         }
      }
      return resultat;
   }

   private List<String> traitementModifPrmdExistant(DroitType droitType) {

      List<String> resultat = new ArrayList<String>();

      if ((droitType.getListeModifPrmd() != null)
            && (CollectionUtils.isNotEmpty(droitType.getListeModifPrmd()
                  .getPrmd()))) {

         int nbPrmd = droitType.getListeModifPrmd().getPrmd().size();
         LOG.info("Nombre de PRMD à modifier contenus dans le fichier : {}",
               nbPrmd);
         if (nbPrmd > 0) {

            // Trace
            LOG.info("- Traitement de modification des PRMD");
            resultat.add("- Traitement de modification des PRMD :");

            // Boucle sur la liste des PRMD
            for (PrmdType prmdType : droitType.getListeModifPrmd().getPrmd()) {

               // Init boucle
               String codePrmd = prmdType.getCode();

               // Trace
               LOG.info("Modification du PRMD \"{}\"", codePrmd);

               // On regarde si le PRMD existe déjà
               // Si non, on passe au PRMD suivant
               // Si oui, on le modifie
               boolean prmdExists = saePrmdService.prmdExists(codePrmd);
               if (!prmdExists) {

                  String message = StringUtils
                        .replace(
                              "Le PRMD {0} n'existe pas dans la base. Modification impossible.",
                              "{0}", codePrmd);

                  // Trace
                  LOG.info(message);
                  resultat.add(message);

               } else {

                  // Création d'un objet Prmd à passer ensuite au service de
                  // création
                  // des PRMD de sae-droit
                  Prmd prmd = ObjectFactory.createPrmd(prmdType);

                  // Traces
                  logPrmd(prmd);

                  // Appel du service de sae-droit pour créer les PRMD
                  LOG
                        .debug("Appel du service de sae-droit pour modifier le PRMD");
                  saePrmdService.modifyPrmd(prmd);

                  // Trace
                  String message = StringUtils.replace(
                        "Le PRMD {0} a été modifié avec succès.", "{0}",
                        codePrmd);
                  LOG.debug(message);
                  resultat.add(message);
               }

            }

            // Trace
            LOG.info("Traitement de modification des PRMD terminé");

         }
      }
      return resultat;
   }

   private List<String> traitementFormatControlProfil(DroitType droitType)
         throws ErreurTechniqueException {

      List<String> resultat = new ArrayList<String>();

      if ((droitType.getListeFormatControlProfil() != null)
            && (CollectionUtils.isNotEmpty(droitType
                  .getListeFormatControlProfil().getFormatControlProfil()))) {

         int nbFcp = droitType.getListeFormatControlProfil()
               .getFormatControlProfil().size();
         LOG
               .info(
                     "Nombre de profil de contrôle de format contenus dans le fichier : {}",
                     nbFcp);
         if (nbFcp > 0) {

            // Trace
            LOG.info("- Traitement des profils de contrôle de format");
            resultat.add("- Traitement des profils de contrôle de format :");

            // Boucle sur la liste des FCP
            for (FormatControlProfilType fcpType : droitType
                  .getListeFormatControlProfil().getFormatControlProfil()) {

               // Init boucle
               String codeFcp = fcpType.getCode();

               // Trace
               LOG.info("Traitement du profil de contrôle de format \"{}\"",
                     codeFcp);

               // On regarde si le FCP existe déjà
               // Si oui, on passe au FCP suivant
               // Si non, on le créé
               boolean fcpExists = fcpService
                     .formatControlProfilExists(codeFcp);

               if (fcpExists) {

                  // Trace
                  String message = StringUtils
                        .replace(
                              "Le profil de contrôle de format {0} existe déjà dans la base. On passe au suivant.",
                              "{0}", codeFcp);

                  LOG.info(message);
                  resultat.add(message);

               } else {

                  // Création d'un objet FormatControlProfil à passer ensuite au
                  // service de
                  // création des profils de contrôle de sae-droit

                  FormatControlProfil fcp = ObjectFactory.createFcp(fcpType);

                  // Traces
                  logFcp(fcp);

                  // Appel du service de sae-droit pour créer les profils
                  LOG
                        .debug("Appel du service de sae-droit pour créer le profil de contrôle");

                  try {
                     fcpService.addFormatControlProfil(fcp);
                  } catch (Exception e) {
                     String message = StringUtils.replace(
                           "Erreur lors de la création du profil de contrôle de format {0} : "
                                 + e.getMessage(), "{0}", codeFcp);
                     throw new ErreurTechniqueException(message, e);
                  }

                  // Trace
                  String message = StringUtils
                        .replace(
                              "Le profil de contrôle de format {0} a été créé avec succès.",
                              "{0}", codeFcp);

                  LOG.debug(message);
                  resultat.add(message);

               }

            }

            // Trace
            LOG.info("Traitement des profils de contrôle de format terminé");
         }
      }
      return resultat;

   }

   private List<String> traitementModifFormatControlProfilExistant(
         DroitType droitType) throws ErreurTechniqueException {

      List<String> resultat = new ArrayList<String>();

      if ((droitType.getListeModifFormatControlProfil() != null)
            && (CollectionUtils.isNotEmpty(droitType
                  .getListeModifFormatControlProfil().getFormatControlProfil()))) {

         int nbFcp = droitType.getListeModifFormatControlProfil()
               .getFormatControlProfil().size();
         LOG
               .info(
                     "Nombre de profil de contrôle de format à modifier contenus dans le fichier : {}",
                     nbFcp);
         if (nbFcp > 0) {

            // Trace
            LOG
                  .info("- Traitement de modification des profils de contrôle de format");
            resultat
                  .add("- Traitement de modification des profils de contrôle de format :");

            // Boucle sur la liste des profils de contrôle de format
            for (FormatControlProfilType fcpType : droitType
                  .getListeModifFormatControlProfil().getFormatControlProfil()) {

               // Init boucle
               String codeFcp = fcpType.getCode();

               // Trace
               LOG.info("Modification du profil de contrôle de format \"{}\"",
                     codeFcp);

               // On regarde si le FCP existe déjà
               // Si non, on passe au FCP suivant
               // Si oui, on le modifie
               boolean fcpExists = fcpService
                     .formatControlProfilExists(codeFcp);
               if (!fcpExists) {

                  String message = StringUtils
                        .replace(
                              "Le profil de contrôle de format {0} n'existe pas dans la base. Modification impossible.",
                              "{0}", codeFcp);

                  // Trace
                  LOG.info(message);
                  resultat.add(message);

               } else {

                  // Création d'un objet FormatControlProfil à passer ensuite au
                  // service de
                  // création
                  // des FCP de sae-droit
                  FormatControlProfil fcp = ObjectFactory.createFcp(fcpType);

                  // Traces
                  logFcp(fcp);

                  // Appel du service de sae-droit pour créer les FCP
                  LOG
                        .debug("Appel du service de sae-droit pour modifier le profil de contrôle de format");
                  try {
                     fcpService.modifyFormatControlProfil(fcp);
                  } catch (FormatControlProfilNotFoundException e) {
                     throw new ErreurTechniqueException(e);
                  }

                  // Trace
                  String message = StringUtils
                        .replace(
                              "Le profil de contrôle de format {0} a été modifié avec succès.",
                              "{0}", codeFcp);
                  LOG.debug(message);
                  resultat.add(message);
               }

            }

            // Trace
            LOG
                  .info("Traitement de modification des profils de contrôle de format terminé");

         }
      }
      return resultat;
   }

   private List<String> traitementCs(DroitType droitType) {

      List<String> resultat = new ArrayList<String>();

      int nbCs = droitType.getListeCs().getCs().size();
      LOG.info("Nombre de CS contenus dans le fichier : {}", nbCs);
      if (nbCs > 0) {

         // Trace
         LOG.info("- Traitement des CS");
         resultat.add("- Traitement des CS :");
         // Boucle sur la liste des CS
         for (CsType csType : droitType.getListeCs().getCs()) {

            // Init boucle
            String codeCs = csType.getIssuer();

            // Trace
            LOG.info("Traitement du CS \"{}\"", codeCs);

            // On regarde si le CS existe déjà
            // Si oui, on passe au CS suivant
            // Si non, on le créé
            boolean csExists = saeDroitService.contratServiceExists(codeCs);
            if (csExists) {

               // Trace
               String message = StringUtils
                     .replace(
                           "Le CS {0} existe déjà dans la base. On passe au suivant.",
                           "{0}", codeCs);
               LOG.info(message);
               resultat.add(message);

            } else {

               // Création de l'objet "Contrat de Service" requis pour le
               // service de sae-droit
               ServiceContract serviceContract = ObjectFactory.createCs(csType);

               // Traces
               logCs(serviceContract);

               // Traitement des PAGM
               int nbPagm = csType.getPagms().getPagm().size();
               LOG.debug("Nombre de PAGM contenus dans les CS \"{}\" : {}",
                     codeCs, nbPagm);
               LOG.debug("Traitement des PAGM");
               List<SaePagm> listeSaePagm = new ArrayList<SaePagm>();
               for (PagmType pagmType : csType.getPagms().getPagm()) {
                  SaePagm saePagm = ObjectFactory.createPagm(pagmType);
                  listeSaePagm.add(saePagm);

               }

               // Appel du service de sae-droit pour créer le contrat de
               // service
               LOG
                     .debug(
                           "Appel du service de création du CS \"{}\" et des PAGM en bdd",
                           codeCs);

               saeDroitService.createContratService(serviceContract,
                     listeSaePagm);

               // Trace
               String message = StringUtils.replace(
                     "Le CS {0} a été créé avec succès", "{0}", codeCs);
               LOG.debug(message);
               resultat.add(message);

            }

         }

         // Trace
         LOG.info("Traitement des CS terminé");

      }
      return resultat;
   }

   private void logPrmd(Prmd prmd) {

      LOG.debug("Information sur le PRMD \"{}\"", prmd.getCode());
      LOG.debug("Description : {}", prmd.getDescription());
      LOG.debug("Requête LUCENE : {}", prmd.getLucene());
      LOG.debug("Métadonnées : {}", LogUtils.prmdMetaToString(prmd
            .getMetadata()));
      LOG.debug("Bean : {}", prmd.getBean());

   }

   private void logFcp(FormatControlProfil fcp) {

      LOG.debug("Information sur le profil de contrôle de format \"{}\"", fcp
            .getFormatCode());
      LOG.debug("Description : {}", fcp.getDescription());
      LOG.debug("Format de fichier : {}", fcp.getControlProfil()
            .getFileFormat());
      LOG.debug("Identification de format : {}", fcp.getControlProfil()
            .isFormatIdentification());
      LOG.debug("Validation de format : {}", fcp.getControlProfil()
            .isFormatValidation());
      LOG.debug("Mode de validation de format : {}", fcp.getControlProfil()
            .getFormatValidationMode());

   }

   private void logCs(ServiceContract serviceContract) {

      LOG.debug("Informations sur le CS \"{}\"", serviceContract
            .getCodeClient());
      LOG.debug("Code intelligible : {}", serviceContract.getLibelle());
      LOG.debug("Description : {}", serviceContract.getDescription());
      LOG.debug("Durée de vie d'un VI (en secondes) : {}", serviceContract
            .getViDuree());
      LOG.debug("PKI (version mono pki) : {}", serviceContract.getIdPki());
      LOG.debug("PKI (version multi pki) : {}", serviceContract.getListPki());
      LOG.debug("Vérification nommage certificat applicatif : {}",
            serviceContract.isVerifNommage());
      LOG
            .debug(
                  "Nom attendu du certificat applicatif (version mono certificat) : {}",
                  serviceContract.getIdCertifClient());
      LOG
            .debug(
                  "Nom attendu des certificats applicatifs (version multi certificats) : {}",
                  serviceContract.getListCertifsClient());
   }

   private void logPagm(Pagm pagm, Pagma pagma, Pagmp pagmp, Pagmf pagmf) {

      LOG.debug("Informations sur le PAGM \"{}\"", pagm.getCode());

      LOG.debug("Description : {}", pagm.getDescription());

      LOG.debug("PAGMa - Code: {}", pagm.getPagma());
      LOG.debug("PAGMa - AU: {}", LogUtils.listeToString(pagma
            .getActionUnitaires()));

      LOG.debug("PAGMp - Code : {}", pagm.getPagmp());
      LOG.debug("PAGMp - Description : {}", pagmp.getDescription());
      LOG.debug("PAGMp - PRMD : {}", pagmp.getPrmd());

      LOG.debug("PAGMf - Code : {}", pagm.getPagmf());
      LOG.debug("PAGMf - Description : {}", pagmf.getDescription());
      LOG.debug("PAGMf - Profil de contrôle de format : {}", pagmf
            .getCodeFormatControlProfil());

      LOG.debug("Paramètres dynamiques : {}", LogUtils.mapToString(pagm
            .getParametres()));

   }

   /**
    * Temporaire : doit être remplacé par une évol de sae-lotinstallmaj
    */
   public final void creationDesAu() {

      ActionUnitaire actionUnitaire = new ActionUnitaire();

      actionUnitaire.setCode("consultation");
      actionUnitaire.setDescription("Consultation");
      saeAuService.createActionUnitaire(actionUnitaire);

      actionUnitaire.setCode("archivage_unitaire");
      actionUnitaire.setDescription("Archivage unitaire");
      saeAuService.createActionUnitaire(actionUnitaire);

      actionUnitaire.setCode("archivage_masse");
      actionUnitaire.setDescription("Archivage de masse");
      saeAuService.createActionUnitaire(actionUnitaire);

      actionUnitaire.setCode("recherche");
      actionUnitaire.setDescription("Recherche");
      saeAuService.createActionUnitaire(actionUnitaire);

   }

   private List<String> traitementAjoutPagmDansCsExistant(DroitType droitType) {

      List<String> resultat = new ArrayList<String>();
      if ((droitType.getListeAjoutPagm() != null)
            && (CollectionUtils.isNotEmpty(droitType.getListeAjoutPagm()
                  .getAjoutPagm()))) {

         // Trace
         LOG
               .info("Présence de demandes d'ajouts de PAGM dans des CS existants : OUI");

         // Trace
         LOG.info("Traitement des ajouts de PAGM dans des CS existants");
         resultat
               .add("- Traitement des ajouts de PAGM dans des CS existants :");

         // Boucle sur la liste des ajouts de PAGM
         for (AjoutPagmType ajoutPagm : droitType.getListeAjoutPagm()
               .getAjoutPagm()) {

            // Init boucle
            String codeCs = ajoutPagm.getCsIssuer();

            // Trace
            String message = StringUtils.replace(
                  "Traitement du/des ajouts de PAGM pour le CS {0}", "{0}",
                  codeCs);
            LOG.info(message);

            // Vérifie que le CS existe
            if (!saeDroitService.contratServiceExists(codeCs)) {
               message = StringUtils
                     .replace(
                           "Ajout PAGM - Erreur : Le CS {0} n'a pas été trouvé. On saute cet ajout de PAGM",
                           "{0}", codeCs);

               // Trace
               LOG.info(message);
               resultat.add(message);

               continue;
            }

            // Récupère la liste des PAGM déjà présents dans le CS
            List<SaePagm> pagmsExistants = saeDroitService
                  .getListeSaePagm(codeCs);

            // Traitement des PAGM
            int nbPagm = ajoutPagm.getPagms().getPagm().size();
            LOG.debug("Nombre de PAGM à ajouter pour le CS \"{}\" : {}",
                  codeCs, nbPagm);
            LOG.debug("Traitement des PAGM");
            for (PagmType pagmType : ajoutPagm.getPagms().getPagm()) {

               String codePagm = pagmType.getCode();
               // Vérifie que le PAGM n'existe pas déjà dans le CS
               if (existePagm(pagmsExistants, codePagm)) {

                  message = StringUtils
                        .replaceEach(
                              "Ajout PAGM - Erreur : Le PAGM {0} existe déjà dans le CS {1}",
                              new String[] { "{0}", "{1}" }, new String[] {
                                    codePagm, codeCs });
                  LOG.info(message);
                  resultat.add(message);
                  continue;
               }

               PagmaType pagmaType = pagmType.getPagma();
               SaePagma pagma = new SaePagma();
               pagma.setActionUnitaires(pagmaType.getActions().getAction());
               pagma.setCode(pagmaType.getCode());

               PagmpType pagmpType = pagmType.getPagmp();
               SaePagmp pagmp = new SaePagmp();
               pagmp.setCode(pagmpType.getCode());
               pagmp.setDescription(pagmpType.getDescription());
               pagmp.setPrmd(pagmpType.getPrmd());

               SaePagm saePagm = new SaePagm();
               PagmfType pagmfType = pagmType.getPagmf();
               if (pagmfType != null) {
                  SaePagmf pagmf = new SaePagmf();
                  pagmf.setCodePagmf(pagmfType.getCode());
                  pagmf.setDescription(pagmfType.getDescription());
                  pagmf
                        .setFormatProfile(pagmfType
                              .getCodeFormatControlProfil());
                  saePagm.setPagmf(pagmf);

               }

               saePagm.setCode(codePagm);
               saePagm.setDescription(pagmType.getDescription());
               saePagm.setPagma(pagma);
               saePagm.setPagmp(pagmp);

               // Récupération des paramètres (dans le cas de l'utilisation d'un
               // PRMD dynamique)
               Map<String, String> listeParametreSae = ObjectFactory
                     .createParametres(pagmType);
               saePagm.setParametres(listeParametreSae);

               saeDroitService.ajouterPagmContratService(codeCs, saePagm);

               // Trace
               message = StringUtils.replaceEach(
                     "PAGM {0} ajouté avec succès au CS {1}", new String[] {
                           "{0}", "{1}" }, new String[] { codePagm, codeCs });
               LOG.debug(message);
               resultat.add(message);

            }

            // Trace
            LOG.debug(
                  "Traitement du/des ajouts de PAGM pour le CS \"{}\" terminé",
                  codeCs);

         }

         // Trace
         LOG
               .info("Traitement des ajouts de PAGM dans des CS existants terminé");

      } else {

         // Trace
         LOG
               .info("Présence de demandes d'ajout de PAGM dans des CS existants : NON");

      }
      return resultat;
   }

   private List<String> traitementModifPagmDansCsExistant(DroitType droitType) {

      List<String> resultat = new ArrayList<String>();
      if ((droitType.getListeModifPagm() != null)
            && (CollectionUtils.isNotEmpty(droitType.getListeModifPagm()
                  .getModifPagm()))) {

         // Trace
         LOG
               .info("Présence de demandes de modification de PAGM dans des CS existants : OUI");

         // Trace
         LOG.info("Traitement des modifications de PAGM dans des CS existants");
         resultat
               .add("- Traitement des modifications de PAGM dans des CS existants :");

         // Boucle sur la liste des modifications de PAGM
         for (ModifPagmType modifPagm : droitType.getListeModifPagm()
               .getModifPagm()) {

            // Init boucle
            String codeCs = modifPagm.getCsIssuer();

            // Trace
            String message = StringUtils.replace(
                  "Traitement du/des modifications de PAGM dans le CS {0}",
                  "{0}", codeCs);
            LOG.info(message);

            // Vérifie que le CS existe
            if (!saeDroitService.contratServiceExists(codeCs)) {
               message = StringUtils
                     .replace(
                           "Erreur : Le CS {0} n'a pas été trouvé. On saute cette modification de PAGM",
                           "{0}", codeCs);

               // Trace
               LOG.info(message);
               resultat.add(message);

               continue;
            }

            // Récupère la liste des PAGM déjà présents dans le CS
            List<SaePagm> pagmsExistants = saeDroitService
                  .getListeSaePagm(codeCs);

            // Traitement des PAGM
            int nbPagm = modifPagm.getPagms().getPagm().size();
            LOG.debug("Nombre de PAGM à modifier dans le CS \"{}\" : {}",
                  codeCs, nbPagm);
            LOG.debug("Traitement des PAGM");
            for (PagmType pagmType : modifPagm.getPagms().getPagm()) {

               // Init boucle
               String codePagm = pagmType.getCode();

               // Trace
               LOG.debug("Traitement préliminaire du PAGM \"{}\"", codePagm);

               // Vérifie que le PAGM existe déjà dans le CS
               if (!existePagm(pagmsExistants, codePagm)) {

                  message = StringUtils
                        .replaceEach(
                              "Modif PAGM - Erreur : Le PAGM {0} n'existe pas dans le CS {1}",
                              new String[] { "{0}", "{1}" }, new String[] {
                                    codePagm, codeCs });
                  LOG.info(message);
                  resultat.add(message);
                  continue;
               }

               PagmaType pagmaType = pagmType.getPagma();
               PagmpType pagmpType = pagmType.getPagmp();

               SaePagma pagma = new SaePagma();
               pagma.setActionUnitaires(pagmaType.getActions().getAction());
               pagma.setCode(pagmaType.getCode());

               SaePagmp pagmp = new SaePagmp();
               pagmp.setCode(pagmpType.getCode());
               pagmp.setDescription(pagmpType.getDescription());
               pagmp.setPrmd(pagmpType.getPrmd());

               SaePagm saePagm = new SaePagm();

               PagmfType pagmfType = pagmType.getPagmf();
               if (pagmfType != null) {
                  SaePagmf pagmf = new SaePagmf();
                  pagmf.setCodePagmf(pagmfType.getCode());
                  pagmf.setDescription(pagmfType.getDescription());
                  pagmf
                        .setFormatProfile(pagmfType
                              .getCodeFormatControlProfil());
                  saePagm.setPagmf(pagmf);
               }

               saePagm.setCode(pagmType.getCode());
               saePagm.setDescription(pagmType.getDescription());
               saePagm.setPagma(pagma);
               saePagm.setPagmp(pagmp);

               // Récupération des paramètres (dans le cas de l'utilisation d'un
               // PRMD dynamique)
               Map<String, String> listeParametreSae = ObjectFactory
                     .createParametres(pagmType);
               saePagm.setParametres(listeParametreSae);

               // Appel du service de sae-droit pour modifier le PAGM au CS
               LOG
                     .debug(
                           "Appel du service de modification des PAGM dans CS \"{}\"",
                           codeCs);
               saeDroitService.modifierPagmContratService(codeCs, saePagm);

               // Trace
               message = StringUtils.replaceEach(
                     "PAGM {0} modifié avec succès dans le CS {1}",
                     new String[] { "{0}", "{1}" }, new String[] { codePagm,
                           codeCs });
               LOG.debug(message);
               resultat.add(message);

            }

            // Trace
            LOG
                  .debug(
                        "Traitement des modifications de PAGM pour le CS \"{}\" terminé",
                        codeCs);

         }

         // Trace
         LOG
               .info("Traitement des modifications de PAGM dans des CS existants terminé");

      } else {

         // Trace
         LOG
               .info("Présence de demandes de modifications de PAGM dans des CS existants : NON");

      }
      return resultat;
   }

   private Collection<? extends String> traitementSuppPagmDansCsExistant(
         DroitType droitType) {

      List<String> resultat = new ArrayList<String>();
      if ((droitType.getListeSuppPagm() != null)
            && (CollectionUtils.isNotEmpty(droitType.getListeSuppPagm()
                  .getSuppPagm()))) {

         // Trace
         LOG
               .info("Présence de demandes de suppression de PAGM dans des CS existants : OUI");

         // Trace
         LOG.info("Traitement des suppressions de PAGM dans des CS existants");
         resultat
               .add("Traitement des suppressions de PAGM dans des CS existants");

         // Boucle sur la liste des modifications de PAGM
         for (SuppPagmType suppPagm : droitType.getListeSuppPagm()
               .getSuppPagm()) {

            // Init boucle
            String codeCs = suppPagm.getCsIssuer();

            // Trace
            String message = StringUtils.replace(
                  "Traitement des suppressions de PAGM du CS {0}", "{0}",
                  codeCs);
            LOG.info(message);
            resultat.add(message);

            // Vérifie que le CS existe
            if (!saeDroitService.contratServiceExists(codeCs)) {
               message = StringUtils
                     .replace(
                           "Erreur : Le CS {0} n'a pas été trouvé. On saute cette suppression de PAGM",
                           "{0}", codeCs);

               // Trace
               LOG.info(message);

               continue;
            }

            // Récupère la liste des PAGM déjà présents dans le CS
            List<SaePagm> pagmsExistants = saeDroitService
                  .getListeSaePagm(codeCs);

            // Traitement des PAGM
            int nbPagm = suppPagm.getCodesPagm().getCodePagm().size();
            LOG.debug("Nombre de PAGM à supprimer du CS \"{}\" : {}", codeCs,
                  nbPagm);
            LOG.debug("Traitement des PAGM");
            for (String codePagm : suppPagm.getCodesPagm().getCodePagm()) {

               // Trace
               LOG.debug("Traitement préliminaire du PAGM \"{}\"", codePagm);

               // Vérifie que le PAGM existe déjà dans le CS
               if (!existePagm(pagmsExistants, codePagm)) {

                  message = StringUtils
                        .replaceEach(
                              "Suppression PAGM - Erreur : Le PAGM {0} n'existe pas dans le CS {1}",
                              new String[] { "{0}", "{1}" }, new String[] {
                                    codePagm, codeCs });
                  LOG.info(message);
                  resultat.add(message);
                  continue;
               }

               // Appel du service de sae-droit pour modifier le PAGM au CS
               LOG.debug(
                     "Appel du service de suppression des PAGM du CS \"{}\"",
                     codeCs);
               saeDroitService.supprimerPagmContratService(codeCs, codePagm);
               // Trace
               message = StringUtils.replaceEach(
                     "PAGM {0} supprimé avec succès du CS {1}", new String[] {
                           "{0}", "{1}" }, new String[] { codePagm, codeCs });
               LOG.debug(message);
               resultat.add(message);

            }

            // Trace
            LOG.debug(
                  "Traitement des suppressions de PAGM du CS \"{}\" terminé",
                  codeCs);

         }

         // Trace
         LOG
               .info("Traitement des suppressions de PAGM dans des CS existants terminé");

      } else {

         // Trace
         LOG
               .info("Présence de demandes de suppression de PAGM dans des CS existants : NON");

      }
      return resultat;
   }

   private boolean existePagm(List<SaePagm> pagmsExistants, String codePagm) {

      if (CollectionUtils.isNotEmpty(pagmsExistants)) {
         for (SaePagm pagm : pagmsExistants) {
            if (pagm.getCode().equals(codePagm)) {
               return true;
            }
         }
      }

      return false;
   }

   /**
    * Récupère la liste de tous les contrats de service
    * 
    * @param maxResult
    *           le nombre max de résultats à retourner
    * @return La liste des contrats de service
    * 
    */
   public final List<SaeContratService> findAllCs(int maxResult) {

      return saeDroitService.findAllSaeContractService(maxResult);

   }

   /**
    * Récupère le contrat de service correspondant à l'indentifiant
    * 
    * @param id
    *           l'identifiant du contrat de service
    * @return le contrat de service
    */
   public final SaeContratService findCs(String id) {
      return saeDroitService.getFullContratService(id);
   }

   /**
    * Récupère la liste de tous les codes clients
    * 
    * @param maxResult
    *           le nombre max de résultats à retourner
    * @return La liste des codes clients
    */
   public final List<String> findAllCodeClientCs(int maxResult) {
      return saeDroitService.findAllCodeClientCs(maxResult);
   }

}
