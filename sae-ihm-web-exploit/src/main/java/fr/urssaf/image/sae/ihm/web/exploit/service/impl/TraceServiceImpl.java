package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEServices;
import fr.urssaf.image.commons.dfce.service.impl.DFCEServicesImpl;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucuneTraceException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.TraceException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.DfceTrace;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeTrace;
import fr.urssaf.image.sae.ihm.web.exploit.service.TraceService;
import fr.urssaf.image.sae.trace.dao.TraceDestinataireDao;
import fr.urssaf.image.sae.trace.dao.TraceJournalEvtDao;
import fr.urssaf.image.sae.trace.dao.TraceJournalEvtIndexDao;
import fr.urssaf.image.sae.trace.dao.TraceJournalEvtIndexDocDao;
import fr.urssaf.image.sae.trace.dao.TraceRegExploitationDao;
import fr.urssaf.image.sae.trace.dao.TraceRegExploitationIndexDao;
import fr.urssaf.image.sae.trace.dao.TraceRegSecuriteDao;
import fr.urssaf.image.sae.trace.dao.TraceRegSecuriteIndexDao;
import fr.urssaf.image.sae.trace.dao.TraceRegTechniqueDao;
import fr.urssaf.image.sae.trace.dao.TraceRegTechniqueIndexDao;
import fr.urssaf.image.sae.trace.dao.model.TraceJournalEvt;
import fr.urssaf.image.sae.trace.dao.model.TraceJournalEvtIndex;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitation;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitationIndex;
import fr.urssaf.image.sae.trace.dao.model.TraceRegSecurite;
import fr.urssaf.image.sae.trace.dao.model.TraceRegSecuriteIndex;
import fr.urssaf.image.sae.trace.dao.model.TraceRegTechnique;
import fr.urssaf.image.sae.trace.dao.model.TraceRegTechniqueIndex;
import fr.urssaf.image.sae.trace.dao.support.CycleVieSupport;
import fr.urssaf.image.sae.trace.dao.support.HistEvenementSupport;
import fr.urssaf.image.sae.trace.dao.support.TraceDestinataireSupport;
import fr.urssaf.image.sae.trace.dao.support.TraceJournalEvtSupport;
import fr.urssaf.image.sae.trace.dao.support.TraceRegExploitationSupport;
import fr.urssaf.image.sae.trace.dao.support.TraceRegSecuriteSupport;
import fr.urssaf.image.sae.trace.dao.support.TraceRegTechniqueSupport;
import fr.urssaf.image.sae.trace.dao.supportcql.TraceDestinataireCqlSupport;
import fr.urssaf.image.sae.trace.dao.supportcql.TraceJournalEvtCqlSupport;
import fr.urssaf.image.sae.trace.dao.supportcql.TraceRegExploitationCqlSupport;
import fr.urssaf.image.sae.trace.dao.supportcql.TraceRegSecuriteCqlSupport;
import fr.urssaf.image.sae.trace.dao.supportcql.TraceRegTechniqueCqlSupport;
import fr.urssaf.image.sae.trace.daocql.impl.TraceJournalEvtCqlDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceJournalEvtIndexCqlDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceJournalEvtIndexDocDaoCqlImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceRegExploitationCqlDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceRegExploitationIndexCqlDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceRegSecuriteCqlDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceRegSecuriteIndexCqlDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceRegTechniqueDaoImpl;
import fr.urssaf.image.sae.trace.daocql.impl.TraceRegTechniqueIndexCqlDaoImpl;
import fr.urssaf.image.sae.trace.model.DfceTraceDoc;
import fr.urssaf.image.sae.trace.model.DfceTraceSyst;
import fr.urssaf.image.sae.trace.model.TraceType;
import fr.urssaf.image.sae.trace.service.CycleVieService;
import fr.urssaf.image.sae.trace.service.HistEvenementService;
import fr.urssaf.image.sae.trace.service.JournalEvtService;
import fr.urssaf.image.sae.trace.service.JournalEvtServiceCql;
import fr.urssaf.image.sae.trace.service.JournalEvtServiceThrift;
import fr.urssaf.image.sae.trace.service.RegExploitationService;
import fr.urssaf.image.sae.trace.service.RegExploitationServiceCql;
import fr.urssaf.image.sae.trace.service.RegExploitationServiceThrift;
import fr.urssaf.image.sae.trace.service.RegSecuriteService;
import fr.urssaf.image.sae.trace.service.RegSecuriteServiceCql;
import fr.urssaf.image.sae.trace.service.RegSecuriteServiceThrift;
import fr.urssaf.image.sae.trace.service.RegTechniqueService;
import fr.urssaf.image.sae.trace.service.RegTechniqueServiceCql;
import fr.urssaf.image.sae.trace.service.RegTechniqueServiceThrift;
import fr.urssaf.image.sae.trace.service.TraceDestinaireService;
import fr.urssaf.image.sae.trace.service.impl.CycleVieServiceImpl;
import fr.urssaf.image.sae.trace.service.impl.HistEvenementServiceImpl;
import fr.urssaf.image.sae.trace.service.impl.JournalEvtServiceImpl;
import fr.urssaf.image.sae.trace.service.impl.RegExploitationServiceImpl;
import fr.urssaf.image.sae.trace.service.impl.RegSecuriteServiceImpl;
import fr.urssaf.image.sae.trace.service.impl.RegTechniqueServiceImpl;
import fr.urssaf.image.sae.trace.service.impl.TraceDestinataireServiceImpl;
import fr.urssaf.image.sae.trace.service.implcql.JournalEvtCqlServiceImpl;
import fr.urssaf.image.sae.trace.service.implcql.RegExploitationCqlServiceImpl;
import fr.urssaf.image.sae.trace.service.implcql.RegSecuriteCqlServiceImpl;
import fr.urssaf.image.sae.trace.service.implcql.RegTechniqueCqlServiceImpl;
import fr.urssaf.image.sae.trace.service.implthrift.JournalEvtServiceThriftImpl;
import fr.urssaf.image.sae.trace.service.implthrift.RegExploitationServiceThriftImpl;
import fr.urssaf.image.sae.trace.service.implthrift.RegSecuriteThriftServiceImpl;
import fr.urssaf.image.sae.trace.service.implthrift.RegTechniqueServiceThriftImpl;
import fr.urssaf.image.sae.trace.service.support.LoggerSupport;
import fr.urssaf.image.sae.trace.service.support.TraceFileSupport;
import fr.urssaf.image.sae.trace.support.TimeUUIDEtTimestampSupport;
import me.prettyprint.hector.api.Keyspace;

/**
 * Classe d'implémentation de l'interface TraceService. Cette classe est n
 * singleton et peut être accessible via le mécanisme d'injection IOC
 *
 *
 */
@Service
public class TraceServiceImpl implements TraceService {

	public static final int MAX_TIME_SYNCHRO_ERROR = 1000000;
	public static final int MAX_TIME_SYNCHRO_WARN = 1500000;

	private static final String FIN_LOG = "{} - fin";
	private static final String DEBUT_LOG = "{} - début";
	private static final Logger LOGGER = LoggerFactory.getLogger(TraceServiceImpl.class);

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final SaeTrace lectureTraceSaeParUuid(final TraceType type, final UUID uuidTrace, final Keyspace keyspace)
			throws AucuneTraceException, TraceException {

		final String prefix = "lectureTraceSaeParUuid()";
		LOGGER.debug(DEBUT_LOG, prefix);

		LOGGER.debug("{} - Type de trace : {}", new String[] { prefix, type.toString() });
		LOGGER.debug("{} - UUID trace : {}", new String[] { prefix, uuidTrace.toString() });

		if (!TraceType.TECHNIQUE.equals(type) && !TraceType.SECURITE.equals(type)
				&& !TraceType.EXPLOITATION.equals(type) && !TraceType.JOURNAL_EVT.equals(type)) {
			throw new TraceException("Le type de trace demandé n'est pas correct.");
		}

		final JobClockConfiguration clockConfiguration = new JobClockConfiguration();
		clockConfiguration.setMaxTimeSynchroError(MAX_TIME_SYNCHRO_ERROR);
		clockConfiguration.setMaxTimeSynchroWarn(MAX_TIME_SYNCHRO_WARN);
		final JobClockSupport clockSupport = new JobClockSupportImpl(keyspace, clockConfiguration);

		final LoggerSupport loggerSupport = new LoggerSupport();

		final SaeTrace saeTrace = new SaeTrace();

		if (TraceType.EXPLOITATION.equals(type)) {

			final TraceRegExploitationDao dao = new TraceRegExploitationDao(keyspace);

			final TraceRegExploitationCqlDaoImpl daoCql = new TraceRegExploitationCqlDaoImpl();

			final TraceRegExploitationIndexDao indexDao = new TraceRegExploitationIndexDao(keyspace);

			final TraceRegExploitationIndexCqlDaoImpl indexDaoCql = new TraceRegExploitationIndexCqlDaoImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();
			final TraceRegExploitationSupport support = new TraceRegExploitationSupport(dao, indexDao, timeUUIDSupport);

			final TraceRegExploitationCqlSupport supportCql = new TraceRegExploitationCqlSupport(daoCql, indexDaoCql,
					timeUUIDSupport);

			final RegExploitationServiceThrift serviceThrift = new RegExploitationServiceThriftImpl(support,
					clockSupport, loggerSupport);

			final RegExploitationServiceCql serviceCql = new RegExploitationCqlServiceImpl(supportCql, clockSupport,
					loggerSupport);

			final RegExploitationService service = new RegExploitationServiceImpl(serviceThrift, serviceCql);

			final TraceRegExploitation trace = service.lecture(uuidTrace);

			saeTrace.setAction(trace.getAction());
			saeTrace.setCodeEvt(trace.getCodeEvt());
			// saeTrace.setContexte();
			saeTrace.setContrat(trace.getContratService());
			saeTrace.setLogin(trace.getLogin());
			// saeTrace.setStacktrace();
			saeTrace.setTimestamp(trace.getTimestamp());
			saeTrace.setPagms(trace.getPagms());
			saeTrace.setInfos(trace.getInfos());

		} else if (TraceType.TECHNIQUE.equals(type)) {

			final TraceRegTechniqueDao dao = new TraceRegTechniqueDao(keyspace);

			final TraceRegTechniqueDaoImpl daoCql = new TraceRegTechniqueDaoImpl();

			final TraceRegTechniqueIndexDao indexDao = new TraceRegTechniqueIndexDao(keyspace);

			final TraceRegTechniqueIndexCqlDaoImpl indexDaoCql = new TraceRegTechniqueIndexCqlDaoImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();
			final TraceRegTechniqueSupport support = new TraceRegTechniqueSupport(dao, indexDao, timeUUIDSupport);

			final TraceRegTechniqueCqlSupport supportCql = new TraceRegTechniqueCqlSupport(daoCql, indexDaoCql,
					timeUUIDSupport);

			final RegTechniqueServiceThrift serviceThrift = new RegTechniqueServiceThriftImpl(support, clockSupport,
					loggerSupport);

			final RegTechniqueServiceCql serviceCql = new RegTechniqueCqlServiceImpl(supportCql, clockSupport,
					loggerSupport);

			final RegTechniqueService service = new RegTechniqueServiceImpl(serviceCql, serviceThrift, clockSupport,
					loggerSupport);
			final TraceRegTechnique trace = service.lecture(uuidTrace);

			saeTrace.setCodeEvt(trace.getCodeEvt());
			saeTrace.setContexte(trace.getContexte());
			saeTrace.setContrat(trace.getContratService());
			saeTrace.setLogin(trace.getLogin());
			String stacktrace = trace.getStacktrace();

			stacktrace = StringUtils.replace(stacktrace, "\n", "<br/>");
			stacktrace = StringUtils.replace(stacktrace, "Caused by", "<b>Caused by</b>");
			stacktrace = StringUtils.replace(stacktrace, "\t", "&nbsp&nbsp&nbsp");
			stacktrace = "<div>" + stacktrace + "</div>";
			saeTrace.setStacktrace(stacktrace);
			saeTrace.setTimestamp(trace.getTimestamp());
			saeTrace.setPagms(trace.getPagms());

			final Map<String, Object> infos = trace.getInfos();
			// String soap = (String)infos.get("soapRequest");
			// soap = StringUtils.replace(soap, "\n", "<br/>");
			// infos.put("soapRequest", soap);

			saeTrace.setInfos(infos);

		} else if (TraceType.SECURITE.equals(type)) {

			final TraceRegSecuriteDao dao = new TraceRegSecuriteDao(keyspace);

			final TraceRegSecuriteCqlDaoImpl daoCql = new TraceRegSecuriteCqlDaoImpl();

			final TraceRegSecuriteIndexDao indexDao = new TraceRegSecuriteIndexDao(keyspace);

			final TraceRegSecuriteIndexCqlDaoImpl indexDaoCql = new TraceRegSecuriteIndexCqlDaoImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();

			final TraceRegSecuriteSupport support = new TraceRegSecuriteSupport(dao, indexDao, timeUUIDSupport);

			final TraceRegSecuriteCqlSupport supportCql = new TraceRegSecuriteCqlSupport(daoCql, indexDaoCql,
					timeUUIDSupport);

			final RegSecuriteServiceThrift serviceThrift = new RegSecuriteThriftServiceImpl(support, clockSupport,
					loggerSupport);

			final RegSecuriteServiceCql serviceCql = new RegSecuriteCqlServiceImpl(supportCql, clockSupport,
					loggerSupport);

			final RegSecuriteService service = new RegSecuriteServiceImpl(serviceThrift, serviceCql);

			final TraceRegSecurite trace = service.lecture(uuidTrace);

			// saeTrace.setAction();
			saeTrace.setCodeEvt(trace.getCodeEvt());
			saeTrace.setContexte(trace.getContexte());
			saeTrace.setContrat(trace.getContratService());
			saeTrace.setLogin(trace.getLogin());
			// saeTrace.setStacktrace();
			saeTrace.setTimestamp(trace.getTimestamp());
			saeTrace.setPagms(trace.getPagms());
			saeTrace.setInfos(trace.getInfos());

		} else if (TraceType.JOURNAL_EVT.equals(type)) {
			final TraceJournalEvtDao dao = new TraceJournalEvtDao(keyspace);

			final TraceJournalEvtCqlDaoImpl daoCql = new TraceJournalEvtCqlDaoImpl();

			final TraceJournalEvtIndexDao indexDao = new TraceJournalEvtIndexDao(keyspace);

			final TraceJournalEvtIndexCqlDaoImpl indexDaoCql = new TraceJournalEvtIndexCqlDaoImpl();

			final TraceJournalEvtIndexDocDao indexDocDao = new TraceJournalEvtIndexDocDao(keyspace);

			final TraceJournalEvtIndexDocDaoCqlImpl indexDocDaoCql = new TraceJournalEvtIndexDocDaoCqlImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();

			final TraceJournalEvtSupport supportThrift = new TraceJournalEvtSupport(dao, indexDao, indexDocDao,
					timeUUIDSupport);

			final TraceJournalEvtCqlSupport supportCql = new TraceJournalEvtCqlSupport(daoCql, indexDaoCql,
					indexDocDaoCql, timeUUIDSupport);

			final TraceFileSupport traceFileSupport = new TraceFileSupport();

			JournalEvtServiceThrift serviceThrift = new JournalEvtServiceThriftImpl(supportThrift, clockSupport,
					loggerSupport, traceFileSupport);

			JournalEvtServiceCql serviceCql = new JournalEvtCqlServiceImpl(supportCql, clockSupport, loggerSupport,
					traceFileSupport);

			final JournalEvtService service = new JournalEvtServiceImpl(serviceThrift, serviceCql);

			final TraceJournalEvt trace = service.lecture(uuidTrace);

			// saeTrace.setAction(trace.getAction());
			saeTrace.setCodeEvt(trace.getCodeEvt());
			saeTrace.setContexte(trace.getContexte());
			saeTrace.setContrat(trace.getContratService());
			saeTrace.setLogin(trace.getLogin());
			// saeTrace.setStacktrace();
			saeTrace.setTimestamp(trace.getTimestamp());
			saeTrace.setPagms(trace.getPagms());
			saeTrace.setInfos(trace.getInfos());

		}

		LOGGER.debug(FIN_LOG, prefix);
		return saeTrace;

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final List<DfceTrace> lectureTracesDfceParDates(final TraceType type, final Date dateDebut,
			final Date dateFin, final int taille, final boolean ordreInverse, final DFCEConnection dfceConnection)
			throws AucuneTraceException, TraceException, ErreurTechniqueException {

		final String prefix = "lectureTracesDfceParDates()";
		LOGGER.debug(DEBUT_LOG, prefix);

		LOGGER.debug("{} - Arguments entrée :", prefix);
		LOGGER.debug("{} - Type de trace : {}", new String[] { prefix, type.toString() });
		LOGGER.debug("{} - Date début : {}", new String[] { prefix, dateDebut.toString() });
		LOGGER.debug("{} - Date fin : {}", new String[] { prefix, dateFin.toString() });
		LOGGER.debug("{} - Taille : {}", new String[] { prefix, Integer.toString(taille) });
		LOGGER.debug("{} - Connexion DFCE : {}", new String[] { prefix, dfceConnection.getServerUrl().toString() });

		if (!TraceType.HIST_EVT.equals(type) && !TraceType.CYCLE_VIE.equals(type)) {
			throw new TraceException("Le type de trace demandé n'est pas correct.");
		}

		List<DfceTrace> listeTraces;
		try {
			final DFCEServices dfceServices = connectToDFCE(dfceConnection);

			listeTraces = new ArrayList<DfceTrace>();

			if (TraceType.HIST_EVT.equals(type)) {

				final HistEvenementSupport support = new HistEvenementSupport(dfceServices);
				final HistEvenementService service = new HistEvenementServiceImpl(support);

				final List<DfceTraceSyst> events = service.lecture(dateDebut, dateFin, taille, ordreInverse);

				if (events != null) {
					for (final DfceTraceSyst event : events) {
						final DfceTrace dfceTrace = new DfceTrace();
						dfceTrace.setAttributs(event.getAttributs());
						dfceTrace.setDateEvt(event.getDateEvt());
						dfceTrace.setDocUuid(event.getDocUuid());
						dfceTrace.setLogin(event.getLogin());
						dfceTrace.setTypeEvt(event.getTypeEvt());
						listeTraces.add(dfceTrace);
					}
				}

			} else if (TraceType.CYCLE_VIE.equals(type)) {

				final CycleVieSupport support = new CycleVieSupport(dfceServices);
				final CycleVieService service = new CycleVieServiceImpl(support);

				final List<DfceTraceDoc> events = service.lecture(dateDebut, dateFin, taille, ordreInverse);

				if (events != null) {
					for (final DfceTraceDoc dfceTraceDoc : events) {
						final DfceTrace dfceTrace = new DfceTrace();
						dfceTrace.setAttributs(dfceTraceDoc.getAttributs());
						dfceTrace.setDateEvt(dfceTraceDoc.getDateEvt());
						dfceTrace.setDocUuid(dfceTraceDoc.getDocUuid());
						dfceTrace.setLogin(dfceTraceDoc.getLogin());
						dfceTrace.setTypeEvt(dfceTraceDoc.getTypeEvt());
						listeTraces.add(dfceTrace);
					}
				}

			}

			dfceServices.closeConnexion();
		} catch (final Exception e) {
			throw new ErreurTechniqueException(e.getMessage());
		}

		LOGGER.debug("{} - Sortie nb traces : {}", new String[] { prefix, Integer.toString(listeTraces.size()) });
		LOGGER.debug(FIN_LOG, prefix);
		return listeTraces;
	}

	/**
	 * {@inheritDoc}
	 *
	 * @throws TraceException
	 */
	@Override
	public final List<DfceTrace> lectureTracesDfceParDocUuid(final TraceType type, final UUID docUuid,
			final DFCEConnection dfceConnection) throws TraceException {

		final String prefix = "lectureTracesDfceParDocUuid()";
		LOGGER.debug(DEBUT_LOG, prefix);

		LOGGER.debug("{} - Type de trace : {}", new String[] { prefix, type.toString() });
		LOGGER.debug("{} - UUID : {}", new String[] { prefix, docUuid.toString() });
		LOGGER.debug("{} - Connexion DFCE : {}", new String[] { prefix, dfceConnection.getServerUrl().toString() });

		if (!TraceType.CYCLE_VIE.equals(type)) {
			throw new TraceException("Le type de trace demandé n'est pas correct.");
		}

		final DFCEServices dfceServices = connectToDFCE(dfceConnection);

		final List<DfceTrace> listeTraces = new ArrayList<DfceTrace>();
		final CycleVieSupport support = new CycleVieSupport(dfceServices);
		final CycleVieService service = new CycleVieServiceImpl(support);

		final List<DfceTraceDoc> events = service.lectureParDocument(docUuid);

		dfceServices.closeConnexion();

		if (events != null) {
			for (final DfceTraceDoc dfceTraceDoc : events) {
				final DfceTrace dfceTrace = new DfceTrace();
				dfceTrace.setAttributs(dfceTraceDoc.getAttributs());
				dfceTrace.setDateEvt(dfceTraceDoc.getDateEvt());
				dfceTrace.setDocUuid(dfceTraceDoc.getDocUuid());
				dfceTrace.setLogin(dfceTraceDoc.getLogin());
				dfceTrace.setTypeEvt(dfceTraceDoc.getTypeEvt());
				listeTraces.add(dfceTrace);
			}
		}

		LOGGER.debug("{} - Sortie nb traces : {}", new String[] { prefix, Integer.toString(listeTraces.size()) });

		LOGGER.debug(FIN_LOG, prefix);
		return listeTraces;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final List<SaeTrace> lectureTracesSaeParDates(final TraceType type, final Date dateDebut, final Date dateFin,
			final int taille, final boolean ordreInverse, final Keyspace keyspace)
			throws AucuneTraceException, TraceException, ErreurTechniqueException {

		final String prefix = "lectureTracesSaeParDates()";
		LOGGER.debug(DEBUT_LOG, prefix);

		LOGGER.debug("{} - Type de trace : {}", new String[] { prefix, type.toString() });
		LOGGER.debug("{} - Date début : {}", new String[] { prefix, dateDebut.toString() });
		LOGGER.debug("{} - Date fin : {}", new String[] { prefix, dateFin.toString() });
		LOGGER.debug("{} - Taille : {}", new String[] { prefix, Integer.toString(taille) });

		if (!TraceType.TECHNIQUE.equals(type) && !TraceType.SECURITE.equals(type)
				&& !TraceType.EXPLOITATION.equals(type) && !TraceType.JOURNAL_EVT.equals(type)) {
			throw new TraceException("Le type de trace demandé n'est pas correct.");
		}

		List<SaeTrace> listeTraces = new ArrayList<SaeTrace>();

		final JobClockConfiguration clockConfiguration = new JobClockConfiguration();
		clockConfiguration.setMaxTimeSynchroError(MAX_TIME_SYNCHRO_ERROR);
		clockConfiguration.setMaxTimeSynchroWarn(MAX_TIME_SYNCHRO_WARN);
		final JobClockSupport clockSupport = new JobClockSupportImpl(keyspace, clockConfiguration);

		final LoggerSupport loggerSupport = new LoggerSupport();

		listeTraces = new ArrayList<SaeTrace>();
		if (TraceType.EXPLOITATION.equals(type)) {

			final TraceRegExploitationDao dao = new TraceRegExploitationDao(keyspace);

			final TraceRegExploitationCqlDaoImpl daoCql = new TraceRegExploitationCqlDaoImpl();

			final TraceRegExploitationIndexDao indexDao = new TraceRegExploitationIndexDao(keyspace);

			final TraceRegExploitationIndexCqlDaoImpl indexDaoCql = new TraceRegExploitationIndexCqlDaoImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();
			final TraceRegExploitationSupport support = new TraceRegExploitationSupport(dao, indexDao, timeUUIDSupport);

			final TraceRegExploitationCqlSupport supportCql = new TraceRegExploitationCqlSupport(daoCql, indexDaoCql,
					timeUUIDSupport);

			final RegExploitationServiceThrift serviceThrift = new RegExploitationServiceThriftImpl(support,
					clockSupport, loggerSupport);

			final RegExploitationServiceCql serviceCql = new RegExploitationCqlServiceImpl(supportCql, clockSupport,
					loggerSupport);

			final RegExploitationService service = new RegExploitationServiceImpl(serviceThrift, serviceCql);

			final List<TraceRegExploitationIndex> traces = service.lecture(dateDebut, dateFin, taille, ordreInverse);

			if (traces != null) {
				for (final TraceRegExploitationIndex trace : traces) {
					final SaeTrace saeTrace = new SaeTrace();
					saeTrace.setIdentifiant(trace.getIdentifiant());
					saeTrace.setAction(trace.getAction());
					saeTrace.setCodeEvt(trace.getCodeEvt());
					// saeTrace.setContexte();
					saeTrace.setContrat(trace.getContrat());
					saeTrace.setLogin(trace.getLogin());
					// saeTrace.setStacktrace();
					saeTrace.setTimestamp(trace.getTimestamp());
					saeTrace.setPagms(trace.getPagms());
					listeTraces.add(saeTrace);

				}
			}
		} else if (TraceType.TECHNIQUE.equals(type)) {

			final TraceRegTechniqueDao dao = new TraceRegTechniqueDao(keyspace);

			final TraceRegTechniqueDaoImpl daoCql = new TraceRegTechniqueDaoImpl();

			final TraceRegTechniqueIndexDao indexDao = new TraceRegTechniqueIndexDao(keyspace);

			final TraceRegTechniqueIndexCqlDaoImpl indexDaoCql = new TraceRegTechniqueIndexCqlDaoImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();
			final TraceRegTechniqueSupport support = new TraceRegTechniqueSupport(dao, indexDao, timeUUIDSupport);

			final TraceRegTechniqueCqlSupport supportCql = new TraceRegTechniqueCqlSupport(daoCql, indexDaoCql,
					timeUUIDSupport);

			final RegTechniqueServiceThrift serviceThrift = new RegTechniqueServiceThriftImpl(support, clockSupport,
					loggerSupport);

			final RegTechniqueServiceCql serviceCql = new RegTechniqueCqlServiceImpl(supportCql, clockSupport,
					loggerSupport);

			final RegTechniqueService service = new RegTechniqueServiceImpl(serviceCql, serviceThrift, clockSupport,
					loggerSupport);

			final List<TraceRegTechniqueIndex> traces = service.lecture(dateDebut, dateFin, taille, ordreInverse);

			if (traces != null) {
				for (final TraceRegTechniqueIndex trace : traces) {
					final SaeTrace saeTrace = new SaeTrace();
					saeTrace.setIdentifiant(trace.getIdentifiant());
					// saeTrace.setAction();
					saeTrace.setCodeEvt(trace.getCodeEvt());
					saeTrace.setContexte(trace.getContexte());
					saeTrace.setContrat(trace.getContrat());
					saeTrace.setLogin(trace.getLogin());
					// saeTrace.setStacktrace();
					saeTrace.setTimestamp(trace.getTimestamp());
					saeTrace.setPagms(trace.getPagms());
					listeTraces.add(saeTrace);
				}
			}

		} else if (TraceType.SECURITE.equals(type)) {

			final TraceRegSecuriteDao dao = new TraceRegSecuriteDao(keyspace);

			final TraceRegSecuriteCqlDaoImpl daoCql = new TraceRegSecuriteCqlDaoImpl();

			final TraceRegSecuriteIndexDao indexDao = new TraceRegSecuriteIndexDao(keyspace);

			final TraceRegSecuriteIndexCqlDaoImpl indexDaoCql = new TraceRegSecuriteIndexCqlDaoImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();

			final TraceRegSecuriteSupport support = new TraceRegSecuriteSupport(dao, indexDao, timeUUIDSupport);

			final TraceRegSecuriteCqlSupport supportCql = new TraceRegSecuriteCqlSupport(daoCql, indexDaoCql,
					timeUUIDSupport);

			final RegSecuriteServiceThrift serviceThrift = new RegSecuriteThriftServiceImpl(support, clockSupport,
					loggerSupport);

			final RegSecuriteServiceCql serviceCql = new RegSecuriteCqlServiceImpl(supportCql, clockSupport,
					loggerSupport);

			final RegSecuriteService service = new RegSecuriteServiceImpl(serviceThrift, serviceCql);

			final List<TraceRegSecuriteIndex> traces = service.lecture(dateDebut, dateFin, taille, ordreInverse);

			if (traces != null) {
				for (final TraceRegSecuriteIndex trace : traces) {
					final SaeTrace saeTrace = new SaeTrace();
					saeTrace.setIdentifiant(trace.getIdentifiant());
					// saeTrace.setAction();
					saeTrace.setCodeEvt(trace.getCodeEvt());
					saeTrace.setContexte(trace.getContexte());
					saeTrace.setContrat(trace.getContrat());
					saeTrace.setLogin(trace.getLogin());
					// saeTrace.setStacktrace();
					saeTrace.setTimestamp(trace.getTimestamp());
					saeTrace.setPagms(trace.getPagms());
					listeTraces.add(saeTrace);
				}
			}

		} else if (TraceType.JOURNAL_EVT.equals(type)) {

			final TraceJournalEvtDao dao = new TraceJournalEvtDao(keyspace);

			final TraceJournalEvtCqlDaoImpl daoCql = new TraceJournalEvtCqlDaoImpl();

			final TraceJournalEvtIndexDao indexDao = new TraceJournalEvtIndexDao(keyspace);

			final TraceJournalEvtIndexCqlDaoImpl indexDaoCql = new TraceJournalEvtIndexCqlDaoImpl();

			final TraceJournalEvtIndexDocDao indexDocDao = new TraceJournalEvtIndexDocDao(keyspace);

			final TraceJournalEvtIndexDocDaoCqlImpl indexDocDaoCql = new TraceJournalEvtIndexDocDaoCqlImpl();

			final TimeUUIDEtTimestampSupport timeUUIDSupport = new TimeUUIDEtTimestampSupport();

			final TraceJournalEvtSupport supportThrift = new TraceJournalEvtSupport(dao, indexDao, indexDocDao,
					timeUUIDSupport);

			final TraceJournalEvtCqlSupport supportCql = new TraceJournalEvtCqlSupport(daoCql, indexDaoCql,
					indexDocDaoCql, timeUUIDSupport);

			final TraceFileSupport traceFileSupport = new TraceFileSupport();

			JournalEvtServiceThrift serviceThrift = new JournalEvtServiceThriftImpl(supportThrift, clockSupport,
					loggerSupport, traceFileSupport);

			JournalEvtServiceCql serviceCql = new JournalEvtCqlServiceImpl(supportCql, clockSupport, loggerSupport,
					traceFileSupport);

			final JournalEvtService service = new JournalEvtServiceImpl(serviceThrift, serviceCql);

			final List<TraceJournalEvtIndex> traces = service.lecture(dateDebut, dateFin, taille, ordreInverse);
			if (traces != null) {
				for (final TraceJournalEvtIndex trace : traces) {
					final SaeTrace saeTrace = new SaeTrace();
					saeTrace.setIdentifiant(trace.getIdentifiant());
					// saeTrace.setAction();
					saeTrace.setCodeEvt(trace.getCodeEvt());
					saeTrace.setContexte(trace.getContexte());
					saeTrace.setContrat(trace.getContratService());
					saeTrace.setLogin(trace.getLogin());
					// saeTrace.setStacktrace();
					saeTrace.setTimestamp(trace.getTimestamp());
					saeTrace.setPagms(trace.getPagms());
					listeTraces.add(saeTrace);
				}
			}
		}

		LOGGER.debug("{} - Sortie nb traces : {}", new String[] { prefix, Integer.toString(listeTraces.size()) });

		LOGGER.debug(FIN_LOG, prefix);
		return listeTraces;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public final List<String> getListeCodeEvenementByTypeTrace(final String typeTrace, final Keyspace keyspace) {
		final TraceDestinataireDao traceDestDao = new TraceDestinataireDao(keyspace);
		
		final TraceDestinataireSupport traceDestSupportThrift = new TraceDestinataireSupport(traceDestDao);
		
		final TraceDestinataireCqlSupport traceDestSupportCql = new TraceDestinataireCqlSupport();

		final TraceDestinaireService traceDestService = new TraceDestinataireServiceImpl(traceDestSupportThrift, traceDestSupportCql);
		
		return traceDestService.getCodeEvenementByTypeTrace(typeTrace);

	}

	/**
	 * Methode permettant de se connecter à DFCe.
	 *
	 * @param dfceConnection
	 *            Parametres de connection.
	 * @return le service de connection à DFCe
	 */
	private DFCEServices connectToDFCE(final DFCEConnection dfceConnection) {
		final DFCEServices dfceServices = new DFCEServicesImpl(dfceConnection);
		dfceServices.connectTheFistTime();
		return dfceServices;
	}

}
