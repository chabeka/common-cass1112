package fr.urssaf.image.sae.ihm.web.exploit.loader;

import java.io.File;
import java.io.FileNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;

import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Droits;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnees;
import fr.urssaf.image.sae.ihm.web.exploit.service.ConfigurationService;
import fr.urssaf.image.sae.ihm.web.exploit.service.DictionaryService;
import fr.urssaf.image.sae.ihm.web.exploit.service.DroitsService;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;

/**
 * Classe permettant le chargement de classes spécifiques
 * 
 * 
 */
public class ConfigLoader {

   /**
    * Service permettant de réaliser le chargement des droits
    */
   private final DroitsService droitsService;

   /**
    * Service permettant de réaliser le chargement des différentes
    * configurations
    */
   private final ConfigurationService configService;

   /**
    * Service permettant de réaliser le chargement des métadonnées
    */
   private final MetadonneesService metaService;
   
   /**
    * Service permettant de réaliser le chargement des dictionnaires
    */
   private final DictionaryService dicoService;

   /**
    * Constructeur
    * 
    * @param droitsService
    *           Service permettant de réaliser le chargement des droits
    * @param configService
    *           Service permettant de réaliser le chargement des différentes
    *           configurations
    * @param metaService
    *           Service permettant de réaliser le chargement des métadonnées
    *@param dicoService
    *           Service permettant de réaliser le chargement des dictionnaires           
    */
   @Autowired
   public ConfigLoader(DroitsService droitsService,
         ConfigurationService configService, MetadonneesService metaService, DictionaryService dicoService) {
      this.droitsService = droitsService;
      this.configService = configService;
      this.metaService = metaService;
      this.dicoService = dicoService;
   }

   /**
    * Renvoie la liste de tous les droits
    * 
    * @param fichier
    *           Fichier contenant la liste des droits
    * 
    * @return Liste de toutes les configurations des droits
    * @throws FileNotFoundException
    *            Exception générée si le fichier n'existe pas
    */
   public final Droits creerDroits(File fichier) throws FileNotFoundException {
      return droitsService.charger(fichier);
   }

   /**
    * Renvoie la liste de toutes les configurations d'environnements (CASSANDRA
    * et services Web)
    * 
    * @param fichier
    *           Fichier contenant le liste des configurations environnement
    *           (CASSANDRA et services Web)
    * 
    * @return Liste de toutes les configurations environnement (CASSANDRA et
    *         services Web)
    * @throws FileNotFoundException
    *            Exception générée si le fichier n'existe pas
    */
   public final ConfigurationsEnvironnement creerConfiguration(File fichier)
         throws FileNotFoundException {
      return configService.chargerConfiguration(fichier);
   }

   /**
    * Retourne la liste des toutes les métadonnées du fichier
    * 
    * @param fichier
    *           fichier contenant la liste des métadonnées
    * @return la liste des métadonnées
    * @throws FileNotFoundException
    *            Exception générée si le fichier n'existe pas
    */
   public final Metadonnees creerMetadonnees(File fichier)
         throws FileNotFoundException {
      return metaService.chargerMetadonnees(fichier);
   }
}
