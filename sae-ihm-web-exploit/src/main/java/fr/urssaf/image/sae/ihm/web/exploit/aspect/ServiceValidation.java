package fr.urssaf.image.sae.ihm.web.exploit.aspect;

import java.io.File;
import java.util.List;
import java.util.UUID;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.lang.StringUtils;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

/**
 * Classe de validation
 * 
 * 
 */
@Aspect
public class ServiceValidation {

   private static final String RECHERCHER_DOC = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.SaeResultatRecherche "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService.rechercherDocuments(*,*,*,*))"
         + "&& args(requeteLucene, code, urlWebService, login)";

   private static final String CONSULTER_DOC = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDocument "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService.consulterDocument(*,*,*,*,*))"
         + "&& args(uuid, code, urlWebService, avecContenu, login)";

   private static final String SUPPRIMER_REMETTRE_TRAVAIL = "execution(void "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.GererPileService.*(*,*))"
         + "&& args(uuid, keyspace)";

   private static final String CHARGER = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.Droits "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.DroitsService.charger(*))"
         + "&& args(fichier)";

   private static final String CHARGER_CONFIGURATION = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.ConfigurationService.chargerConfiguration(*))"
         + "&& args(fichier)";
   
   private static final String CHARGER_CONFIGURATION_FRONTAL = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnementFrontal "
         + "fr.urssaf.image.sae.ihm.web.exploit.service.ConfigurationService.chargerConfigurationFrontaux(*))"
         + "&& args(fichier)";

   private static final String CREER_DROITS = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.Droits "
         + "fr.urssaf.image.sae.ihm.web.exploit.loader.ConfigLoader.creerDroits(*))"
         + "&& args(fichier)";

   private static final String CREER_CONFIGURATION = "execution(fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement "
         + "fr.urssaf.image.sae.ihm.web.exploit.loader.ConfigLoader.creerConfiguration(*))"
         + "&& args(fichier)";

   /**
    * Vérification des arguments de la méthode rechercherDocuments
    * 
    * @param requeteLucene
    *           la requête Lucene
    * @param code
    *           la liste des métadonnées à récupérer (peut être nulle)
    * @param urlWebService
    *           l'url du service web
    * @param login
    *           login de l'utilisateur (pour la traçabilité
    */
   @Before(RECHERCHER_DOC)
   public final void validationArgRechercherDoc(String requeteLucene,
         List<String> code, String urlWebService, String login) {

      if (StringUtils.isBlank(requeteLucene)) {
         throw new IllegalArgumentException(
               "l'argument requeteLucene n'est pas valide");
      }

      if (StringUtils.isBlank(urlWebService)) {
         throw new IllegalArgumentException(
               "l'argument urlWebService n'est pas valide");
      }
   }

   /**
    * Vérification des arguments de la méthode consulterDocument
    * 
    * @param uuid
    *           l'UUID du document
    * @param code
    *           la liste des métadonnées à récupérer (peut être nulle)
    * @param urlWebService
    *           l'url du service web
    * @param avecContenu
    *           boolean indiquant si on récupère le contenu du document ou pas
    * @param login
    *           login de l'utilisateur (pour la traçabilité
    */
   @Before(CONSULTER_DOC)
   public final void validationArgConsulter(UUID uuid, List<String> code,
         String urlWebService, boolean avecContenu, String login) {

      if (uuid == null) {
         throw new IllegalArgumentException("l'argument uuid n'est pas valide");
      } else if (StringUtils.isBlank(uuid.toString())) {
         throw new IllegalArgumentException("l'argument uuid n'est pas valide");
      }

      if (StringUtils.isBlank(urlWebService)) {
         throw new IllegalArgumentException(
               "l'argument urlWebService n'est pas valide");
      }
   }

   /**
    * Vérification des arguments de la méthode supprimerTravail et
    * remettreEtatLancement
    * 
    * @param uuid
    *           uuid du job
    * @param keyspace
    *           keyspace à utiliser
    */
   @Before(SUPPRIMER_REMETTRE_TRAVAIL)
   public final void validationArgSupprimerRemettreTravail(UUID uuid,
         Keyspace keyspace) {

      if (uuid == null) {
         throw new IllegalArgumentException("l'argument uuid n'est pas valide");
      } else if (StringUtils.isBlank(uuid.toString())) {
         throw new IllegalArgumentException("l'argument uuid n'est pas valide");
      }

      if (keyspace == null) {
         throw new IllegalArgumentException(
               "l'argument keyspace n'est pas valide");
      }
   }

   /**
    * Vérification des arguments de la méthode charger
    * 
    * @param fichier
    *           fichier de conf
    */
   @Before(CHARGER)
   public final void validationArgCharger(File fichier) {

      if (fichier == null) {
         throw new IllegalArgumentException(
               "l'argument fichier n'est pas valide");
      }
   }

   /**
    * Vérification des arguments de la méthode charger
    * 
    * @param fichier
    *           fichier de conf
    */
   @Before(CHARGER_CONFIGURATION)
   public final void validationArgChargerConfiguration(File fichier) {

      if (fichier == null) {
         throw new IllegalArgumentException(
               "l'argument fichier n'est pas valide");
      }
   }
   
   /**
    * Vérification des arguments de la méthode charger
    * 
    * @param fichier
    *           fichier de conf
    */
   @Before(CHARGER_CONFIGURATION_FRONTAL)
   public final void validationArgChargerConfigurationFrontal(File fichier) {

      if (fichier == null) {
         throw new IllegalArgumentException(
               "l'argument fichier n'est pas valide");
      }
   }

   /**
    * Vérification des arguments de la méthode creerDroits
    * 
    * @param fichier
    *           fichier de conf
    */
   @Before(CREER_DROITS)
   public final void validationArgCreerDroits(File fichier) {

      if (fichier == null) {
         throw new IllegalArgumentException(
               "l'argument fichier n'est pas valide");
      }
   }

   /**
    * Vérification des arguments de la méthode creerConfiguration
    * 
    * @param fichier
    *           fichier de conf
    */
   @Before(CREER_CONFIGURATION)
   public final void validationArgCreerConfiguration(File fichier) {

      if (fichier == null) {
         throw new IllegalArgumentException(
               "l'argument fichier n'est pas valide");
      }
   }

}
