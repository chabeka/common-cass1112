package fr.urssaf.image.sae.ihm.web.exploit.modele;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import fr.urssaf.image.sae.pile.travaux.model.JobState;
import fr.urssaf.image.sae.vi.modele.VIContenuExtrait;

/**
 * Job de la pile des travaux
 * 
 * 
 */
@SuppressWarnings("PMD.TooManyFields")
public class Job {

   /**
    * Identifiant unique du traitement
    */
   private UUID idJob;

   /**
    * Type de traitement
    */
   private String type;

   /**
    * Paramètres du traitement
    */
   private String parameters;

   /**
    * Etat du traitement
    */
   private JobState state;

   /**
    * Hostname du serveur ayant réservé la demande
    */
   private String reservedBy;

   /**
    * Date/heure d'arrivée de la demande
    */
   private Date creationDate;

   /**
    * Date/heure de réservation
    */
   private Date reservationDate;

   /**
    * Date/heure de début de traitement
    */
   private Date startingDate;

   /**
    * Date/heure de fin de traitement
    */
   private Date endingDate;

   /**
    * Message de compte-rendu du traitement
    */
   private String message;

   /**
    * host du serveur de l'ordonnanceur qui exécute le traitement de masse
    */
   private String saeHost;

   /**
    * Host du client qui demande le traitement de masse
    */
   private String clientHost;

   /**
    * Nombre de documents à traiter pour un traitemtent de masse
    */
   private Integer docCount;

   /**
    * Nombre de documents traités pour un traitement de masse
    */
   private Integer docCountTraite;

   /**
    * PID du processus qui exécute le traitement de masse
    */
   private Integer pid;

   /**
    * Flag pour indiquer que le traitement est à vérifier
    */
   private Boolean toCheckFlag;

   /**
    * Raison pour laquelle le traitement est à vérifier
    */
   private String toCheckFlagRaison;

   /**
    * Le traitement (en échec) a-t-il été relancé 
    */
   private List<UUID> listeJobRelance;

   /**
    * Les éventuelles relances ont elles réussies ?
    */
   private boolean succesRelance;   

   /**
    * Contenu du VI
    */
   @SuppressWarnings("PMD.ShortVariable")
   private VIContenuExtrait vi;

   /**
    * True si le job peut être supprimé
    */
   private boolean removable;

   /**
    * True si le job peut être réinitialisé
    */
   private boolean resettable;

   /**
    * La liste des paramètres
    */
   private Map<String, String> jobParameters;
   
   /**
    * Liste de jobParameterModel
    */
   private List<ParameterModel> jobParametersModel;

   /**
    * @return the idJob
    */
   public final UUID getIdJob() {
      return idJob;
   }

   /**
    * @param idJob
    *           the idJob to set
    */
   public final void setIdJob(UUID idJob) {
      this.idJob = idJob;
   }

   /**
    * @return the type
    */
   public final String getType() {
      return type;
   }

   /**
    * @param type
    *           the type to set
    */
   public final void setType(String type) {
      this.type = type;
   }

   /**
    * @return the parameters
    */
   public final String getParameters() {
      return parameters;
   }

   /**
    * @param parameters
    *           the parameters to set
    */
   public final void setParameters(String parameters) {
      this.parameters = parameters;
   }

   /**
    * @return the state of the jobRequest
    */
   public final JobState getState() {
      return state;
   }

   /**
    * @param state
    *           the state to set
    */
   public final void setState(JobState state) {
      this.state = state;
   }

   /**
    * @return the reservedBy
    */
   public final String getReservedBy() {
      return reservedBy;
   }

   /**
    * @param reservedBy
    *           the reservedBy to set
    */
   public final void setReservedBy(String reservedBy) {
      this.reservedBy = reservedBy;
   }

   /**
    * @return the creationDate
    */
   public final Date getCreationDate() {
      // On ne renvoie pas la date directement, car c'est un objet mutable
      return creationDate == null ? null : new Date(creationDate.getTime());
   }

   /**
    * @param creationDate
    *           the creationDate to set
    */
   public final void setCreationDate(Date creationDate) {
      this.creationDate = creationDate == null ? null : new Date(creationDate
            .getTime());
   }

   /**
    * @return the reservationDate
    */
   public final Date getReservationDate() {
      // On ne renvoie pas la date directement, car c'est un objet mutable
      return reservationDate == null ? null : new Date(reservationDate
            .getTime());
   }

   /**
    * @param reservationDate
    *           the reservationDate to set
    */
   public final void setReservationDate(Date reservationDate) {
      this.reservationDate = reservationDate == null ? null : new Date(
            reservationDate.getTime());
   }

   /**
    * @return the startingDate
    */
   public final Date getStartingDate() {
      // On ne renvoie pas la date directement, car c'est un objet mutable
      return startingDate == null ? null : new Date(startingDate.getTime());
   }

   /**
    * @param startingDate
    *           the startingDate to set
    */
   public final void setStartingDate(Date startingDate) {
      this.startingDate = startingDate == null ? null : new Date(startingDate
            .getTime());
   }

   /**
    * @return the endingDate
    */
   public final Date getEndingDate() {
      // On ne renvoie pas la date directement, car c'est un objet mutable
      return endingDate == null ? null : new Date(endingDate.getTime());
   }

   /**
    * @param endingDate
    *           the endingDate to set
    */
   public final void setEndingDate(Date endingDate) {
      this.endingDate = endingDate == null ? null : new Date(endingDate
            .getTime());
   }

   /**
    * @param message
    *           : message de compte-rendu du traitement
    */
   public final void setMessage(String message) {
      this.message = message;
   }

   /**
    * 
    * @return message de compte-rendu du traitement
    */
   public final String getMessage() {
      return message;
   }

   /**
    * @return le nom de machine ou l'IP de la machine SAE ayant traité la
    *         demande
    */
   public final String getSaeHost() {
      return saeHost;
   }

   /**
    * @param saeHost
    *           le nom de machine ou l'IP de la machine SAE ayant traité la
    *           demande
    * 
    */
   public final void setSaeHost(String saeHost) {
      this.saeHost = saeHost;
   }

   /**
    * @return le nom de machine ou l'IP de la machine cliente ayant traité la
    *         demande
    */
   public final String getClientHost() {
      return clientHost;
   }

   /**
    * @param clientHost
    *           le nom de machine ou l'IP de la machine cliente ayant traité la
    *           demande
    */
   public final void setClientHost(String clientHost) {
      this.clientHost = clientHost;
   }

   /**
    * @return le nombre de documents présents dans le fichier sommaire
    */
   public final Integer getDocCount() {
      return docCount;
   }

   /**
    * @param docCount
    *           le nombre de documents présents dans le fichier sommaire
    */
   public final void setDocCount(Integer docCount) {
      this.docCount = docCount;
   }

   /**
    * @return le process ID du traitement
    */
   public final Integer getPid() {
      return pid;
   }

   /**
    * @param pid
    *           le process ID du traitement
    */
   public final void setPid(Integer pid) {
      this.pid = pid;
   }

   /**
    * @return the toCheckFlag
    */
   public final Boolean getToCheckFlag() {
      return toCheckFlag;
   }

   /**
    * @param toCheckFlag
    *           the toCheckFlag to set
    */
   public final void setToCheckFlag(Boolean toCheckFlag) {
      this.toCheckFlag = toCheckFlag;
   }

   /**
    * @return the toCheckFlagRaison
    */
   public final String getToCheckFlagRaison() {
      return toCheckFlagRaison;
   }

   /**
    * @param toCheckFlagRaison
    *           the toCheckFlagRaison to set
    */
   public final void setToCheckFlagRaison(String toCheckFlagRaison) {
      this.toCheckFlagRaison = toCheckFlagRaison;
   }

   /**
    * @return le contenu du VI
    */
   public final VIContenuExtrait getVi() {
      return vi;
   }

   /**
    * @param contenuVi
    *           le contenu du VI
    */
   public final void setVi(VIContenuExtrait contenuVi) {
      this.vi = contenuVi;
   }

   /**
    * 
    * @return si le job peut etre supprimé
    */
   public final boolean isRemovable() {
      return removable;
   }

   /**
    * 
    * @param removable
    *           true ou false
    */
   public final void setRemovable(boolean removable) {
      this.removable = removable;
   }

   /**
    * 
    * @return si le job peut être réinitialisé
    */
   public final boolean isResettable() {
      return resettable;
   }

   /**
    * 
    * @param resettable
    *           true ou false
    */
   public final void setResettable(boolean resettable) {
      this.resettable = resettable;
   }

   /**
    * @return the jobParameters
    */
   public final Map<String, String> getJobParameters() {
      return jobParameters;
   }

   /**
    * @param jobParameters
    *           the jobParameters to set
    */
   public final void setJobParameters(Map<String, String> jobParameters) {
      this.jobParameters = jobParameters;
   }
   
   /**
    * 
    * @return the jobParameters to set
    */
   public List<ParameterModel> getJobParametersModel() {
	   return jobParametersModel;
   }

   /**
    * @param jobParametersModel
    */
   public void setJobParametersModel(List<ParameterModel> jobParametersModel) {
	  this.jobParametersModel = jobParametersModel;
   }

   /**
    * @return the succesRelance
    */
   public boolean isSuccesRelance() {
      return succesRelance;
   }

   /**
    * @param succesRelance the succesRelance to set
    */
   public void setSuccesRelance(boolean succesRelance) {
      this.succesRelance = succesRelance;
   }

   /**
    * @return the listeJobRelance
    */
   public List<UUID> getListeJobRelance() {
      return listeJobRelance;
   }

   /**
    * @param listeJobRelance the listeJobRelance to set
    */
   public void setListeJobRelance(List<UUID> listeJobRelance) {
      this.listeJobRelance = listeJobRelance;
   }

   /**
    * Getter pour docCountTraite
    * 
    * @return the docCountTraite
    */
   public Integer getDocCountTraite() {
      return docCountTraite;
   }

   /**
    * Setter pour docCountTraite
    * 
    * @param docCountTraite
    *           the docCountTraite to set
    */
   public void setDocCountTraite(Integer docCountTraite) {
      this.docCountTraite = docCountTraite;
   }

}
