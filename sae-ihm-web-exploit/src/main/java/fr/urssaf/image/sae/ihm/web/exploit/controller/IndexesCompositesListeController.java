package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.sae.ihm.web.exploit.formulaire.IndexesCompositesListeForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.IndexesCompositesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.IndexesCompositesServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;
import fr.urssaf.image.sae.metadata.referential.model.SaeIndexComposite;
import net.docubase.toolkit.model.reference.Category;

/**
 * Classe permettant de consulter la liste des indexes composites existants
 */
@Controller
@RequestMapping("consulterIndexesComposites")
public class IndexesCompositesListeController {

   private static final String NOM_VUE = "consulterIndexesComposites";

   @Autowired
   private ConfigurationsEnvironnement config;

   private static final String NOM_FORMULAIRE = "indexesListeForm";

   /**
    * Nombre de ligne à afficher dans le tableau de résultats
    */
   private static final int DEFAULT_NB_LIGNE_TABLEAU = 100;

   /**
    * Le GET de l'écran
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @param nbLignesTableau
    *           Nombre de lignes dans le tableau
    * @return le nom de la vue
    */
   @RequestMapping(method = RequestMethod.GET)
   public final String leGet(Model model, HttpSession session,
         HttpServletRequest request, Integer nbLignesTableau) {

      try {
         // Création de l'objet formulaire
         IndexesCompositesListeForm form = new IndexesCompositesListeForm();
         model.addAttribute(NOM_FORMULAIRE, form);

         // Initialisation du nombre de lignes max dans le tableau
         // Regarde cette info a été passée au GET
         if (nbLignesTableau != null) {
            form.setNbLignesTableau(nbLignesTableau);
         } else {
            form.setNbLignesTableau(DEFAULT_NB_LIGNE_TABLEAU);
         }
         // ligne ci-dessous pour displaytag
         request.setAttribute("nbLignesTableau", form.getNbLignesTableau());

         // Construction de la liste des métadonnées
         List<IndexItem> indexes = getListeIndexesComposites(session);

         // Mémorisation de la liste en session
         request.setAttribute("listeIndexes", indexes);

      } catch (IllegalArgumentException e) {
         StringWriter sw = new StringWriter();
         PrintWriter pw = new PrintWriter(sw);
         e.printStackTrace(pw);
         String stacktrace = sw.toString();
         request.setAttribute("stacktrace", stacktrace);
      }

      // Renvoie le nom de la vue
      return NOM_VUE;

   }

   /**
    * Le POST de l'écran : affichage des métadonnées avec les filtres
    * utilisateurs
    * 
    * @param form
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return le nom de la vue
    */
   @RequestMapping(method = RequestMethod.POST)
   public final String lePost(
         @ModelAttribute(NOM_FORMULAIRE) @Valid IndexesCompositesListeForm form,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {

         try {

            //-- Nombre de lignes max du tableau de résultat
            int nbLignesTableau;
            if (form.getNbLignesTableau() == 0) {
               nbLignesTableau = DEFAULT_NB_LIGNE_TABLEAU;
            } else {
               nbLignesTableau = form.getNbLignesTableau();
            }
            form.setNbLignesTableau(nbLignesTableau);
            request.setAttribute("nbLignesTableau", nbLignesTableau);

            //-- Construction de la liste des indexes composites
            List<IndexItem> indexesComposites = getListeIndexesComposites(session);

            //-- Mémorisation de la liste en session
            request.setAttribute("listeIndexes", indexesComposites);

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);
         }

      }

      return NOM_VUE;
   }
   
   /**
    * Méthode de récupération de la liste des indexes composites
    * @param session
    * @return
    */
   private List<IndexItem> getListeIndexesComposites(HttpSession session) {

      //-- Initialise le résultat à renvoyer
      List<SaeIndexComposite> listeSaeIndexes;
      IndexesCompositesService service = new IndexesCompositesServiceImpl(session);
      listeSaeIndexes = service.getAllCompositesIndexes();
      
      //-- Liste des métadonnées (construction objets IndexItem)
      List<MetadataReference> metas = getListeMetadonnees(session);
      
      List<IndexItem> listeIndexes = new ArrayList<IndexItem>();
      for (SaeIndexComposite indexComposite : listeSaeIndexes) {
         IndexItem item = new IndexItem(indexComposite, metas);
         listeIndexes.add(item);
      }

      //-- Renvoie du résultat
      return listeIndexes;
   }
   
   /**
    * Méthode de récupération de la liste des métadonnées
    * @param session
    * @return
    */
   private List<MetadataReference> getListeMetadonnees(HttpSession session) {

      //-- Initialise le résultat à renvoyer
      List<MetadataReference> listeMetas = new ArrayList<MetadataReference>();

      //-- Instantiation du service de gestion des métadonnées dans la
      // configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session, config);

      //-- Construit la liste des métadonnées, triées par code long
      listeMetas = metaService.findAllMetadata();
      
      return listeMetas;
   }
   
   
   /**
    * Formate le nom long de l'indexe composité
    * @param metas : Liste des métas u référentiel
    * @return Nom long
    */
   private final String getCompsiteIndexLabel(SaeIndexComposite index, List<MetadataReference> metas) {
      StringBuffer buffer = new StringBuffer();
      List<Category> categories = index.getCategories();
      //-- Pour chaque indexe composite on reche le nom long
      for (Category category : categories) {
         for (MetadataReference ref : metas) {
            if(category.getName().equals(ref.getShortCode())){
               buffer.append(ref.getLongCode());
               buffer.append('-');
               break;
            }
         }
      }
      String label = buffer.toString();
      return label.substring(0, label.length()-1);
   }
   
   public class IndexItem {
      private String label;
      private String name; 
      private boolean isComputed;
      public IndexItem(SaeIndexComposite index, List<MetadataReference> metas){
          label = getCompsiteIndexLabel(index, metas);
          name  = index.getName();
          isComputed = index.isComputed();
      }
      public String getName() { return name; }
      public String getLabel() { return label; }
      public Boolean getIsComputed() { return isComputed; }
   }

}
