package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.IndexesCompositesListeForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.IndexesCompositesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.IndexesCompositesServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;
import fr.urssaf.image.sae.metadata.referential.model.SaeIndexComposite;
import net.docubase.toolkit.model.reference.Category;

/**
 * Classe permettant de consulter la liste des indexes composites existants
 */
@Controller
@RequestMapping("consulterIndexesComposites")
public class IndexesCompositesListeController {

  private static final String NOM_VUE = "consulterIndexesComposites";

  @Autowired
  private ConfigurationsEnvironnement config;

  private static final String NOM_FORMULAIRE = "indexesListeForm";

  /**
   * Nombre de ligne à afficher dans le tableau de résultats
   */
  private static final int DEFAULT_NB_LIGNE_TABLEAU = 100;

  /**
   * Le GET de l'écran
   * 
   * @param model
   *           le modèle
   * @param session
   *           la session
   * @param request
   *           la requête
   * @param nbLignesTableau
   *           Nombre de lignes dans le tableau
   * @return le nom de la vue
   */
  @RequestMapping(method = RequestMethod.GET)
  public final String leGet(final Model model, final HttpSession session,
                            final HttpServletRequest request, final Integer nbLignesTableau) {

    try {
      // Création de l'objet formulaire
      final IndexesCompositesListeForm form = new IndexesCompositesListeForm();
      model.addAttribute(NOM_FORMULAIRE, form);

      // Initialisation du nombre de lignes max dans le tableau
      // Regarde cette info a été passée au GET
      if (nbLignesTableau != null) {
        form.setNbLignesTableau(nbLignesTableau);
      } else {
        form.setNbLignesTableau(DEFAULT_NB_LIGNE_TABLEAU);
      }
      // ligne ci-dessous pour displaytag
      request.setAttribute("nbLignesTableau", form.getNbLignesTableau());

      // Construction de la liste des métadonnées
      final List<IndexItem> indexes = getListeIndexesComposites(session);

      // Mémorisation de la liste en session
      request.setAttribute("listeIndexes", indexes);

    } catch (final IllegalArgumentException e) {
      final StringWriter sw = new StringWriter();
      final PrintWriter pw = new PrintWriter(sw);
      e.printStackTrace(pw);
      final String stacktrace = sw.toString();
      request.setAttribute("stacktrace", stacktrace);
    }

    // Renvoie le nom de la vue
    return NOM_VUE;

  }

  /**
   * Le POST de l'écran : affichage des métadonnées avec les filtres
   * utilisateurs
   * 
   * @param form
   *           Le formulaire
   * @param result
   *           Gestion des erreurs
   * @param session
   *           La session
   * @param request
   *           La requête
   * @return le nom de la vue
   */
  @RequestMapping(method = RequestMethod.POST)
  public final String lePost(
                             @ModelAttribute(NOM_FORMULAIRE) @Valid final IndexesCompositesListeForm form,
                             final BindingResult result, final HttpSession session, final HttpServletRequest request) {

    if (!result.hasFieldErrors()) {

      try {

        //-- Nombre de lignes max du tableau de résultat
        int nbLignesTableau;
        if (form.getNbLignesTableau() == 0) {
          nbLignesTableau = DEFAULT_NB_LIGNE_TABLEAU;
        } else {
          nbLignesTableau = form.getNbLignesTableau();
        }
        form.setNbLignesTableau(nbLignesTableau);
        request.setAttribute("nbLignesTableau", nbLignesTableau);

        //-- Construction de la liste des indexes composites
        final List<IndexItem> indexesComposites = getListeIndexesComposites(session);

        //-- Mémorisation de la liste en session
        request.setAttribute("listeIndexes", indexesComposites);

      } catch (final IllegalArgumentException e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);
        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);
      }

    }

    return NOM_VUE;
  }

  /**
   * Méthode de récupération de la liste des indexes composites
   * @param session
   * @return
   */
  private List<IndexItem> getListeIndexesComposites(final HttpSession session) {

    //-- Initialise le résultat à renvoyer
    List<SaeIndexComposite> listeSaeIndexes;
    final IndexesCompositesService service = new IndexesCompositesServiceImpl(session);
    listeSaeIndexes = service.getAllCompositesIndexes();

    //-- Liste des métadonnées (construction objets IndexItem)
    final List<MetadataReference> metas = getListeMetadonnees(session);

    final List<IndexItem> listeIndexes = new ArrayList<>();
    for (final SaeIndexComposite indexComposite : listeSaeIndexes) {
      final IndexItem item = new IndexItem(indexComposite, metas);
      listeIndexes.add(item);
    }

    //-- Renvoie du résultat
    return listeIndexes;
  }

  /**
   * Méthode de récupération de la liste des métadonnées
   * @param session
   * @return
   */
  private List<MetadataReference> getListeMetadonnees(final HttpSession session) {
    final String nomConf = (String) session.getAttribute("nomConfiguration");
    final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
        .getAttribute(nomConf + Constants.CQL);
    //-- Initialise le résultat à renvoyer
    List<MetadataReference> listeMetas = new ArrayList<>();

    //-- Instantiation du service de gestion des métadonnées dans la
    // configuration courante
    final MetadonneesService metaService = new MetadonneesServiceImpl(session, config, ccf);

    //-- Construit la liste des métadonnées, triées par code long
    listeMetas = metaService.findAllMetadata();

    return listeMetas;
  }


  /**
   * Formate le nom long de l'indexe composité
   * @param metas : Liste des métas u référentiel
   * @return Nom long
   */
  private final String getCompsiteIndexLabel(final SaeIndexComposite index, final List<MetadataReference> metas) {
    final StringBuffer buffer = new StringBuffer();
    final List<Category> categories = index.getCategories();
    //-- Pour chaque indexe composite on reche le nom long
    for (final Category category : categories) {
      for (final MetadataReference ref : metas) {
        if(category.getName().equals(ref.getShortCode())){
          buffer.append(ref.getLongCode());
          buffer.append('-');
          break;
        }
      }
    }
    final String label = buffer.toString();
    return label.substring(0, label.length()-1);
  }

  public class IndexItem {
    private final String label;
    private final String name; 
    private final boolean isComputed;
    public IndexItem(final SaeIndexComposite index, final List<MetadataReference> metas){
      label = getCompsiteIndexLabel(index, metas);
      name  = index.getName();
      isComputed = index.isComputed();
    }
    public String getName() { return name; }
    public String getLabel() { return label; }
    public Boolean getIsComputed() { return isComputed; }
  }

}
