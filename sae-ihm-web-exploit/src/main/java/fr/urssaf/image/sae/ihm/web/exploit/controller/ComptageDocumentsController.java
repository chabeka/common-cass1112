package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.ihm.web.exploit.exception.IhmWebRuntimeException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ComptageDocumentsForm;
import fr.urssaf.image.sae.ihm.web.exploit.service.ComptageDocumentsService;

/**
 * Classe centralisant les opérations utilisateurs pour le comptage des
 * documents archivés par un traitement de masse
 * 
 */

@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@Controller
public class ComptageDocumentsController {

   /**
    * Service offrant les opérations de recherche sur un ou plusieurs documents
    */
   @Autowired
   private ComptageDocumentsService comptageDocumentsService;

   /**
    * Initialisation du formulaire de comptage des documents archivés par un
    * traitement de masse
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            l'exception levée
    */
   @RequestMapping(value = "comptageDocuments", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      ComptageDocumentsForm form = new ComptageDocumentsForm();

      model.addAttribute("comptageForm", form);

      return "comptageDocuments";

   }

   /**
    * Lance le comptage des documents archivés pas un traitement de masse
    * 
    * @param comptageForm
    *           le formulaire de comptage
    * @param result
    *           gestion des erreurs
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    */
   @RequestMapping(value = "lancerComptageDoc")
   public final String consulterDocument(
         @ModelAttribute("comptageForm") @Valid ComptageDocumentsForm comptageForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {
         try {

            // Récupération de l'uuid
            UUID uuid = comptageForm.getIdentifiant();

            // Récupération de la configuration choisie
            String nomConf = (String) session.getAttribute("nomConfiguration");
            DFCEConnection dfceConnection = (DFCEConnection) session
                  .getServletContext().getAttribute(nomConf + "-dfce");

            // Lancement du comptage
            int nbDocArchives = comptageDocumentsService.getNbDocArchives(uuid, dfceConnection);

            request.setAttribute("nbDocArchives", nbDocArchives);
            
         } catch (IhmWebRuntimeException e) {
            ObjectError erreur = new ObjectError("comptageForm", e
                  .getMessage());
            result.addError(erreur);

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);

         }

      }

      return "comptageDocuments";
   }
}
