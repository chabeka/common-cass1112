package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.List;

import javax.servlet.http.HttpSession;

import me.prettyprint.hector.api.Keyspace;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.sae.format.exception.UnknownFormatException;
import fr.urssaf.image.sae.format.referentiel.dao.ReferentielFormatDao;
import fr.urssaf.image.sae.format.referentiel.dao.support.ReferentielFormatSupport;
import fr.urssaf.image.sae.format.referentiel.model.FormatFichier;
import fr.urssaf.image.sae.format.referentiel.service.ReferentielFormatService;
import fr.urssaf.image.sae.format.referentiel.service.impl.ReferentielFormatServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunFormatException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.FormatsService;

/**
 * Classe implémentant le service FormatsService
 */
public class FormatsServiceImpl implements FormatsService {

   private ReferentielFormatService formatService;

   public FormatsServiceImpl() {

   }

   public FormatsServiceImpl(HttpSession session,
         ConfigurationsEnvironnement lesConfigs) {

      // On va instantier manuellement le ReferentielFormatService des services
      // SAE
      // (manuellement par opposition avec une instantiation par Spring)
      // Il faut utiliser les paramètres de configuration de la session en cours

      // Récupère les informations de la session courante

      String nomConf = (String) session.getAttribute("nomConfiguration");

      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);

      // Instantiation du JobClockSupport
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      JobClockSupport jobClockSupport = new JobClockSupportImpl(keyspace, clock);

      // Instantiation du ReferentielFormatDao
      ReferentielFormatDao formatDao = new ReferentielFormatDao(keyspace);

      // Instantiation du ReferentielFormatSupport
      ReferentielFormatSupport formatSupport = new ReferentielFormatSupport(
            formatDao);

      // Enfin, instantiation du ReferentielFormatService
      formatService = new ReferentielFormatServiceImpl(formatSupport,
            jobClockSupport, 1);

   }

   /**
    * Methode permettant de récupérer tous les formats présents dans la base
    * Cassandra
    * 
    * @param keyspace
    *           keyspace à intérroger
    * @return List<FormatFichier> liste des formats
    */
   @Override
   public final List<FormatFichier> findAllFormats() {
      return formatService.getAllFormat();
   }

   /**
    * Methode permettant de récupérer une métadonnée présente dans la base
    * Cassandra
    * 
    * @param keyspace
    *           keyspace à intérroger
    * @param codeLong
    *           code long de la métadonnée à trouver
    * @return MetadataReference une métadonnée
    * @throws AucunFormatException
    *            Excpetion levée lorque le format cherché n'existe pas
    */
   @Override
   public final FormatFichier findFormat(String idFormat)
         throws AucunFormatException {
      try {
         return formatService.getFormat(idFormat);
      } catch (UnknownFormatException e) {
         throw new AucunFormatException();
      }
   }

   /**
    * 
    */
   @Override
   public final boolean formatExiste(String idFormat) {
      return formatService.exists(idFormat);
   }

   /**
    * Methode permettant de créer un format
    * 
    * @param format
    *           un format
    */
   @Override
   public final void createFormat(FormatFichier format) {
      formatService.addFormat(format);
   }

   /**
    * Methode permettant de modifier un format
    * 
    * @param format
    *           le format à modifier
    */
   @Override
   public final void modifyFormat(FormatFichier format) {
      formatService.addFormat(format);
   }

   /**
    * Méthode de suppression d'un format
    * 
    * @param idFormat
    *           format à supprimer
    * @throws AucunFormatException
    */
   @Override
   public final void deleteFormat(String idFormat) throws AucunFormatException {
      try {
         formatService.deleteFormat(idFormat);
      } catch (UnknownFormatException e) {
         throw new AucunFormatException();
      }
   }
}
