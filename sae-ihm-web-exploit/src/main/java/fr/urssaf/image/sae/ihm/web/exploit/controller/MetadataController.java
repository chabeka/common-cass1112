package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterMetadonnesForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.MetaReference;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.metadata.referential.model.Dictionary;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;

/**
 * Classe permettant de gérer les traces
 * 
 * 
 */
@Controller
public class MetadataController {

   /**
    * Interface permettant de réaliser les opérations sur les traces
    */
   @Autowired
   private MetadonneesService metaService;

   private static final String NOM_FORMULAIRE = "metaForm";

   private static final String TYPE_AFFICHAGE_CONS = "consultation";
   private static final String TYPE_AFFICHAGE_DET = "detail";

   // Nombre de ligne à afficher dans le tableau de résultats
   private static final int NB_LIGNE_TABLEAU = 100;

   /**
    * Initialisation de l'écran de consultation des métadonnées
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            Exception
    */
   @RequestMapping(value = "consulterMetadonnees", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);

      ConsulterMetadonnesForm form = new ConsulterMetadonnesForm();
      form.setNbLignesTableau(NB_LIGNE_TABLEAU);
      form.setModeRecherche("modeToutes");
      model.addAttribute(NOM_FORMULAIRE, form);

      List<MetadataReference> listeMeta = metaService.findAllMetadata(keyspace);

      // on trie les métadonnées non typés en fonction de leur code long
      Comparator<MetadataReference> comparator = new Comparator<MetadataReference>() {
         @Override
         public int compare(MetadataReference meta1, MetadataReference meta2) {

            return meta1.getLongCode().compareTo(meta2.getLongCode());

         }
      };

      Collections.sort(listeMeta, comparator);
      request.setAttribute("listeMeta", listeMeta);

      return "consulterMetadonnees";

   }

   /**
    * Initialisation de l'écran d'ajout d'une métadonnées
    * 
    * @param model
    * @param session
    * @param request
    * @return nom de la vue
    * @throws InterruptedException
    */
   @RequestMapping(value = "ajoutMetadonnees", method = RequestMethod.GET)
   public final String initialisationAjoutMeta(Model model,
         HttpSession session, HttpServletRequest request)
         throws InterruptedException {

      ConsulterMetadonnesForm form = new ConsulterMetadonnesForm();
      MetaReference meta = new MetaReference();
      form.setDetailMeta(meta);
      form.setAjout(Boolean.TRUE);
      form.setModification(Boolean.FALSE);
      model.addAttribute(NOM_FORMULAIRE, form);

      return "gestionMetadonnees";

   }

   /**
    * Lancement de la recherche des metadonnées
    * 
    * @param metaForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return La page à afficher
    */
   @RequestMapping(value = "lancerConsultMeta")
   public final String rechercherMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterMetadonnesForm metaForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {

         try {
            // Récupération de la configuration choisie
            String nomConf = (String) session.getAttribute("nomConfiguration");
            Keyspace keyspace = (Keyspace) session.getServletContext()
                  .getAttribute(nomConf);

            metaForm.setModeAffichage(TYPE_AFFICHAGE_CONS);
            request.setAttribute("modeAffichage", TYPE_AFFICHAGE_CONS);
            // Nombre de ligne max du tableau de résultat
            if (metaForm.getNbLignesTableau() == 0) {
               metaForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
               request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
            } else {
               request.setAttribute("nbLignesTableau", metaForm
                     .getNbLignesTableau());
            }
            if ("modeToutes".equals(metaForm.getModeRecherche())) {
               List<MetadataReference> listeMeta = metaService
                     .findAllMetadata(keyspace);
               // on trie les métadonnées non typés en fonction de leur code long
               Comparator<MetadataReference> comparator = new Comparator<MetadataReference>() {
                  @Override
                  public int compare(MetadataReference meta1, MetadataReference meta2) {

                     return meta1.getLongCode().compareTo(meta2.getLongCode());

                  }
               };

               Collections.sort(listeMeta, comparator);
               request.setAttribute("listeMeta", listeMeta);
               // metaForm.setListeMeta(listeMeta);

            }
            if ("modeCodeLong".equals(metaForm.getModeRecherche())) {
               if (!StringUtils.isEmpty(metaForm.getCodeLong())) {
                  MetadataReference meta = metaService.findMetadata(metaForm
                        .getCodeLong(), keyspace);
                  List<MetadataReference> list = new ArrayList<MetadataReference>();
                  list.add(meta);
                  metaForm.setListeMeta(list);
                  request.setAttribute("listeMeta", list);
               }

            }

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);
         }

      }

      return "consulterMetadonnees";
   }

   /**
    * Récupération du détail d'une métadonnée
    * 
    * @param metaForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param codeLong
    *           code de la métadonnée à rechercher
    * @return La page à afficher
    */
   @RequestMapping(value = "detailMeta")
   public final String afficherDetailMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterMetadonnesForm metaForm,
         BindingResult result, HttpSession session, HttpServletRequest request,
         @RequestParam(value = "codeLong", required = true) String codeLong) {

      if (!result.hasFieldErrors()) {

         // Récupération de la configuration choisie
         String nomConf = (String) session.getAttribute("nomConfiguration");
         Keyspace keyspace = (Keyspace) session.getServletContext()
               .getAttribute(nomConf);
         // Colonnes à afficher suivant les types d'affichage
         metaForm.setModeAffichage(TYPE_AFFICHAGE_DET);
         metaForm.setModification(Boolean.TRUE);
         metaForm.setAjout(Boolean.FALSE);
         MetadataReference meta = metaService.findMetadata(codeLong, keyspace);
         // on copie les attributs un à un ... beanUtils.copyProperties(...) ne
         // fonctionne pas pour tes les valeurs
         MetaReference dest = new MetaReference();
         dest.setArchivable(meta.isArchivable());
         dest.setConsultable(meta.isConsultable());
         dest.setDefaultConsultable(meta.isDefaultConsultable());
         dest.setDescription(meta.getDescription());
         dest.setDictionaryName(meta.getDictionaryName());
         dest.setHasDictionary(meta.getHasDictionary());
         dest.setInternal(meta.isInternal());
         dest.setIsIndexed(meta.getIsIndexed());
         dest.setLabel(meta.getLabel());
         
         if(meta.getLength()<0){
            dest.setLength(StringUtils.EMPTY);
         }else{
            dest.setLength(String.valueOf(meta.getLength()));
         }
         
         dest.setLongCode(meta.getLongCode());
         dest.setModifiable(meta.isModifiable());
         dest.setPattern(meta.getPattern());
         dest.setRequiredForArchival(meta.isRequiredForArchival());
         dest.setRequiredForStorage(meta.isRequiredForStorage());
         dest.setSearchable(meta.isSearchable());
         dest.setShortCode(meta.getShortCode());
         dest.setType(meta.getType());
         dest.setModifiable(meta.isModifiable());

         metaForm.setDetailMeta(dest);

      }

      return "gestionMetadonnees";

   }

   /**
    * réalisation de l'ajout ou de la modification d'une métadonnée
    * 
    * @param metaForm
    * @param result
    * @param session
    * @param request
    * @return {@link RedirectView}
    */
   @RequestMapping(value = "gestionMetadonnee")
   public final String gestionMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterMetadonnesForm metaForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      MetaReference metaModifie = metaForm.getDetailMeta();

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);
      MetadataReference metaExist = metaService.findMetadata(metaModifie.getLongCode(), keyspace);
      if (metaForm.getAjout()) {
         if (null != metaExist) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE,
                  "Il existe déjà une métadonnées avec le code long : "
                        .concat(metaModifie.getLongCode()));
            result.addError(erreur);
            return "gestionMetadonnees";
         }else{
            createModifyMetadata(metaModifie, keyspace);
            metaForm.setAjout(Boolean.FALSE);
            metaForm.setModification(Boolean.TRUE);
            metaForm.setMessage("La métadonnée ".concat(metaModifie.getLongCode()).concat(" a bien été créée"));
         }
      }else if(metaForm.getModification()){
         createModifyMetadata(metaModifie, keyspace);
         metaForm.setAjout(Boolean.FALSE);
         metaForm.setModification(Boolean.TRUE);
         metaForm.setMessage("La métadonnée ".concat(metaModifie.getLongCode()).concat(" a bien été modifiée"));

      }
      
      return "gestionMetadonnees";
   }

   /**
    * Méthode appelant le service de création / modification d'une métadonnée.
    * 
    * @param meta
    * @param result
    * @param keyspace
    */
   private void createModifyMetadata(MetaReference meta, Keyspace keyspace) {
      MetadataReference metadata = new MetadataReference();

      // on copie les attributs un à un ... beanUtils.copyProperties(...) ne
      // fonctionne pas pour tes les valeurs
      metadata.setArchivable(meta.isArchivable());
      metadata.setConsultable(meta.isConsultable());
      metadata.setDefaultConsultable(meta.isDefaultConsultable());
      metadata.setDescription(meta.getDescription());
      metadata.setDictionaryName(meta.getDictionaryName());
      metadata.setHasDictionary(meta.getHasDictionary());
      metadata.setInternal(meta.isInternal());
      metadata.setIsIndexed(meta.getIsIndexed());
      metadata.setLabel(meta.getLabel());
      if(StringUtils.isEmpty(meta.getLength())){
         metadata.setLength(-1);
      }else{
         metadata.setLength(new Integer(meta.getLength()));
      }
      metadata.setLongCode(meta.getLongCode());
      metadata.setModifiable(meta.isModifiable());
      metadata.setPattern(meta.getPattern());
      metadata.setRequiredForArchival(meta.isRequiredForArchival());
      metadata.setRequiredForStorage(meta.isRequiredForStorage());
      metadata.setSearchable(meta.isSearchable());
      metadata.setShortCode(meta.getShortCode());
      metadata.setType(meta.getType());
      metadata.setModifiable(meta.isModifiable());

      // intialisation du jobClock avec les paramètres nécessaires.
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);

      metaService.createOrModifyMetadata(metadata, clock, keyspace);
   }

}
