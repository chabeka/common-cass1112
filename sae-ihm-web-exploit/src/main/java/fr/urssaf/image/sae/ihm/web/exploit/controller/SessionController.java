package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import fr.urssaf.image.commons.cassandra.helper.CassandraClientFactory;
import fr.urssaf.image.commons.cassandra.helper.CassandraServerBean;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.SessionForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationBean;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Droits;
import fr.urssaf.image.sae.vi.exception.VIException;
import fr.urssaf.image.sae.vi.modele.VIPortailContenuExtrait;
import fr.urssaf.image.sae.vi.service.PortailVIService;

/**
 * Classe permettant de gérer les déconnexions
 * 
 * 
 */
@Controller
public class SessionController {

   /**
    * Bean contenant des informations de l'application
    */
   @Autowired
   private ConfigurationBean configuration;

   /**
    * Liste des environnements disponibles pour effectuer les opérations
    */
   @Autowired
   private ConfigurationsEnvironnement environnements;

   @Autowired
   private Droits droits;

   /**
    * Vérification de l'authentification
    * 
    * @param session
    *           la session
    * @param request
    *           la requete
    * @return la page à afficher
    * @throws InterruptedException
    *            l'exception levée
    * @throws VIException
    */
   @RequestMapping(value = "authentification")
   public final String authentification(HttpSession session,
         HttpServletRequest request) throws InterruptedException, VIException {

      // Récupération des paramètres SAMLResponse et RelayState
      String relayState = request.getParameter("RelayState");

      String saml = request.getParameter("SAMLResponse");
      String SAMLResponse = org.apache.commons.codec.binary.StringUtils
            .newStringIso8859_1(Base64.decodeBase64(saml));

      // Si on arrive sur l'authentification directement
      if (StringUtils.isBlank(saml) || StringUtils.isBlank(SAMLResponse)) {
         if (session.getAttribute("pagmList") == null) {
            // Redirection vers erreur d'authentification
            return "401";
         } else {
            // L'utilisateur est déjà connecté
            return "redirect:connexion.do";
         }
      }

      // Appel de lireVI de la classe PortailVIService (sae-vi) afin
      // d'obtenir une classe VIPortailContenuExtrait représentant
      // le VI véhiculé par le paramètre SAMLResponse.
      PortailVIService portailViServ = new PortailVIService();
      VIPortailContenuExtrait contenuExtrait = portailViServ
            .lireVI(SAMLResponse);

      // Récupération de la valeur de l'attribut issuer et vérification
      // qu'il est bien égal à SAE_PORTAIL_WEB_IHM_EXPLOIT
      String issuer = contenuExtrait.getIssuer();
      if (!"SAE_PORTAIL_WEB_IHM_EXPLOIT".equals(issuer)) {
         // Redirection vers erreur d'authentification
         return "401";
      }

      // Récupération de la valeur de l'attribut audience et vérification
      // qu'il est bien égal à http://exploit.sae.urssaf.fr
      String audience = contenuExtrait.getAudience();
      if (!"http://exploit.sae.urssaf.fr".equals(audience)) {
         // Redirection vers erreur d'authentification
         return "401";
      }

      // Récupération de la liste des PAGM
      List<String> pagmList = contenuExtrait.getPagmList();

      // Vérification de l'existence des PAGM
      for (String pagm : pagmList) {
         if (!droits.existe(pagm)) {
            // Redirection vers erreur d'authentification
            return "401";
         }
      }

      // Récupération du nom de la personne
      String nameId = contenuExtrait.getNameId();

      // Récupération de l'habilitation ANAIS de l'utilisateur
      String habAnais = contenuExtrait.getHabAnais();

      // Enregistrement en session de la version
      session.setAttribute("version", configuration.getVersion());
      // Enregistrement en session de la liste des PAGM
      session.setAttribute("pagmList", pagmList);
      // Enregistrement du nom - prénom utilisateur
      session.setAttribute("nameId", nameId);
      // Enregistrement en session de l'habilitation Anais
      session.setAttribute("habAnais", habAnais);

      return "redirect:" + relayState;
   }

   /**
    * Enregistre le choix de la configuration en session Si besoin, création du
    * keyspace Cassandra et enregistrement du keyspace dans le scope application
    * 
    * @param sessionForm
    *           le formulaire
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            Exception levée
    */

   @RequestMapping(value = "connexion")
   public final String choisirEnvironnement(
         @ModelAttribute("sessionForm") SessionForm sessionForm,
         HttpSession session, HttpServletRequest request)
         throws InterruptedException {

      // Récupération du nom de la configuration choisie par le formulaire
      String nomConf = sessionForm.getConfiguration();
      // Récupération de la configuration correspondante
      ConfigurationEnvironnement confChoisie;
      // S'il n'y a pas de congiguration choisie, on regarde en session
      if (StringUtils.isBlank(nomConf)) {
         nomConf = (String) session.getAttribute("nomConfiguration");
         // S'il n'y a pas de conf en session, on prend la 1ère de la liste
         if (StringUtils.isBlank(nomConf)) {
            confChoisie = environnements.getConfigurations()[0];
         } else {
            confChoisie = environnements.getConfiguration(nomConf);
         }
      } else {
         confChoisie = environnements.getConfiguration(nomConf);
      }

      // Création du keyspace Cassandra dans le scope application
      // s'il n'existe pas
      stockKeyspaceCassandra(session, confChoisie);

      // On met en session le nom de la configuration choisie
      session.setAttribute("nomConfiguration", confChoisie.getNom());
      
      // On initialise la valeur de la conf pour le formulaire
      sessionForm.setConfiguration(confChoisie.getNom());
      
      // Liste des noms des configurations
      List<String> listNomConf = environnements.getListeNoms();

      request.setAttribute("listeNomConf", listNomConf);

      return "accueil";
   }

   /**
    * Déconnexion de l'application
    * 
    * @param session
    *           la session
    * @return la page à afficher
    */
   @RequestMapping(value = "deconnexion")
   public final String deconnexion(HttpSession session) {
      session.invalidate();
      return "redirect:/deconnexion.do";
   }

   /**
    * Stockage du keyspace Cassandra en session s'il n'existe pas déjà
    * 
    * @param session
    *           la session
    * @param conf
    *           la configuration choisie
    * @throws InterruptedException
    */
   private void stockKeyspaceCassandra(HttpSession session,
         ConfigurationEnvironnement conf) throws InterruptedException {
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            conf.getNom());
      if (keyspace == null) {
         // Serveur Cassandra
         CassandraServerBean server = new CassandraServerBean();
         server.setDataSet(null);
         server.setHosts(conf.getCassandraHost());
         server.setStartLocal(false);

         // Keyspace Cassandra
         CassandraClientFactory clientFact = new CassandraClientFactory(server,
               conf.getCassandraKeySpace(), conf.getCassandraUserName(), conf
                     .getCassandraPwd());

         session.getServletContext().setAttribute(conf.getNom(),
               clientFact.getKeyspace());
      }
   }

}
