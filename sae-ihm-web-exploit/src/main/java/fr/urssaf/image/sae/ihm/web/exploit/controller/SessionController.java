package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.sae.ihm.web.exploit.formulaire.SessionForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationBean;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Droit;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Droits;

import fr.urssaf.image.commons.cassandra.helper.*;

/**
 * Classe permettant de gérer les déconnexions
 * 
 * 
 */
@Controller
@RequestMapping(value = "authentification")
public class SessionController {

   /**
    * Bean contenant des informations de l'application
    */
   @Autowired
   private ConfigurationBean configuration;

   /**
    * Liste des environnements disponibles pour effectuer les opérations
    */
   @Autowired
   private ConfigurationsEnvironnement environnements;

   @Autowired
   private Droits droits;

   /**
    * @throws InterruptedException
    * 
    */
   @RequestMapping(method = RequestMethod.GET)
   public String authentification(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // TODO : Récupération des paramètres SAMLResponse et RelayState

      // TODO : Appel de lireVI de la classe PortailVIService (sae-vi) afin
      // d'obtenir une classe
      // VIPortailContenuExtrait représentant le VI véhiculé par le paramètre
      // SAMLResponse.

      // TODO : Récupération de la valeur de l'attribut issuer et vérification
      // qu'il est bien égal à SAE_PORTAIL_WEB_IHM_EXPLOIT

      // TODO : Récupération de la valeur de l'attribut audience et vérification
      // qu'il est bien égal à http://exploit.sae.urssaf.fr

      // TODO : Récupération de la liste des PAGM
      List<String> pagmList = new ArrayList<String>();
      //pagmList.add("ADMIN_TECHNIQUE");
      pagmList.add("CONSULT_TECHNIQUE");
      // Vérification de l'existence des PAGM
      for (String pagm : pagmList) {
         if (!droits.existe(pagm)) {
            // TODO : Redirection vers erreur d'authentification
            return "401";
         }
      }

      // TODO : Récupération du nom de la personne
      String nameId = "Garnier Aurélie";
      // TODO : Récupération de l'habilitation ANAIS de l'utilisateur
      String habAnais = "Administration Technique";

      // Enregistrement en session de la version
      session.setAttribute("version", configuration.getVersion());
      // Enregistrement en session de la liste des PAGM
      session.setAttribute("pagmList", pagmList);
      // Enregistrement du nom - prénom utilisateur
      session.setAttribute("nameId", nameId);
      // Enregistrement en session de l'habilitation Anais
      session.setAttribute("habAnais", habAnais);

      // Récupération de la 1ère configuration disponible
      ConfigurationEnvironnement confDef = environnements.getConfigurations()[0];
      // On stocke le keyspace Cassandra dans le scope application s'il n'existe
      // pas
      ConfigurationEnvironnement conf = (ConfigurationEnvironnement) session
            .getServletContext().getAttribute(confDef.getNom());
      if (conf == null) {
         // Serveur Cassandra
         CassandraServerBean server = new CassandraServerBean();
         server.setDataSet(null);
         server.setHosts(confDef.getCassandraHost());
         server.setStartLocal(false);

         // Keyspace Cassandra
         CassandraClientFactory cf = new CassandraClientFactory(server, confDef
               .getCassandraKeySpace(), confDef.getCassandraUserName(), confDef
               .getCassandraPwd());

         session.getServletContext().setAttribute(confDef.getNom(),
               cf.getKeyspace());
      }

      // Enregistrement en session du nom du 1er environnement des
      // configurations
      session.setAttribute("nomConfiguration", confDef.getNom());

      SessionForm sessionForm = new SessionForm();
      sessionForm.setConfiguration(confDef.getNom());

      model.addAttribute("sessionForm", sessionForm);

      // Liste des noms des configurations
      List<String> listNomConf = new ArrayList<String>();
      listNomConf = environnements.getListeNoms();

      request.setAttribute("listeNomConf", listNomConf);
      request.setAttribute("nomDef", confDef.getNom());

      return "accueil";

   }

   @RequestMapping(method = RequestMethod.POST)
   public String choisirEnvironnement(
         @ModelAttribute("sessionForm") SessionForm sessionForm,
         HttpSession session, HttpServletRequest request)
         throws InterruptedException {

      String nomConf = sessionForm.getConfiguration();

      // Création du keyspace Cassandra dans le scope application s'il n'existe
      // pas
      ConfigurationEnvironnement conf = (ConfigurationEnvironnement) session
            .getServletContext().getAttribute(nomConf);
      if (conf == null) {
         // Récupération de la configuration correspondante
         ConfigurationEnvironnement confChoisie = environnements
               .getConfiguration(nomConf);

         // Serveur Cassandra
         CassandraServerBean server = new CassandraServerBean();
         server.setDataSet(null);
         server.setHosts(confChoisie.getCassandraHost());
         server.setStartLocal(false);

         // Keyspace Cassandra
         CassandraClientFactory cf = new CassandraClientFactory(server,
               confChoisie.getCassandraKeySpace(), confChoisie
                     .getCassandraUserName(), confChoisie.getCassandraPwd());

         session.getServletContext().setAttribute(confChoisie.getNom(),
               cf.getKeyspace());
      }

      // On met en session le nom de la configuration choisie
      session.setAttribute("nomConfiguration", nomConf);

      // Liste des noms des configurations
      List<String> listNomConf = new ArrayList<String>();
      listNomConf = environnements.getListeNoms();

      request.setAttribute("listeNomConf", listNomConf);
      request.setAttribute("nomDef", nomConf);

      return "accueil";
   }

   @RequestMapping(value = "deconnexion")
   public String deconnexion(HttpSession session) {
      session.invalidate();
      return "redirect:/connexion.do";
   }

}
