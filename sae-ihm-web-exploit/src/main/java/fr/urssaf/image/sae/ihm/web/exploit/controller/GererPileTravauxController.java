package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import com.netflix.curator.framework.CuratorFramework;

import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunJobException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.MiseAJourJobException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.GererPileTravauxForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationBean;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Job;
import fr.urssaf.image.sae.ihm.web.exploit.service.ContratServiceService;
import fr.urssaf.image.sae.ihm.web.exploit.service.GererPileService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.ContratServiceServiceImpl;
import fr.urssaf.image.sae.pile.travaux.model.JobHistory;

/**
 * Classe centralisant les opérations utilsateur pour la manipulation de la pile
 * des travaux
 * 
 * 
 */
@Controller
public class GererPileTravauxController {

   /**
    * Service permettant de réaliser les opérations sur la pile des travaux
    */
   @Autowired
   private GererPileService gererPileService;

   @Autowired
   private ConfigurationsEnvironnement config;

   /**
    * Bean contenant des informations de l'application
    */
   @Autowired
   private ConfigurationBean configuration;

   // Numéro de colonne de la date de création dans le cas de la consultation ou
   // de la gestion (Sert pour le tri de la pile des travaux par date de
   // création)
   private static final int NUM_COLONNE_DATE_CREATION_CONSULT = 4;
   private static final int NUM_COLONNE_DATE_CREATION_GESTION = 6;

   // Nombre de ligne à afficher dans le tableau de résultats
   private static final int NB_LIGNE_TABLEAU = 10;

   private static final int MAX_CODE_CLIENT = 200;

   private static final int MINUIT = 24;
   private static final int HEURE_MAX = 23;
   private static final int MINUTE_MAX = 59;

   /**
    * Initialisation de l'écran de consultation/gestion de la pile des travaux
    * 
    * @param gererPileTravauxForm
    *           Formulaire de gestion de la pile
    * @param result
    *           Result
    * @param session
    *           Session
    * @param request
    *           Request
    * @return la page à afficher
    */
   @SuppressWarnings("unchecked")
   @RequestMapping(value = { "consulterPile", "gererPile" })
   public final String initialisation(
         @ModelAttribute("gererPileTravauxForm") @Valid GererPileTravauxForm gererPileTravauxForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);

      CuratorFramework curator = (CuratorFramework) session.getServletContext()
            .getAttribute(nomConf + "-zookeeper");
      ContratServiceService csService = new ContratServiceServiceImpl(keyspace,
            config.getConfiguration(nomConf), curator);

      List<String> listeCodesClient = csService
            .findAllCodeClientCs(MAX_CODE_CLIENT);
      request.setAttribute("listeCodesClient", listeCodesClient);

      List<String> listeParametres = config.getConfiguration(nomConf)
            .getParametres();
      request.setAttribute("listeParametres", listeParametres);

      // Récupération des droits de l'utilisateur
      List<String> listePagm = (List<String>) session.getAttribute("pagmList");

      // Liste des noms des colonnes
      List<String> colonnes = new ArrayList<String>();
      colonnes.add("type");
      colonnes.add("parameters");
      colonnes.add("state");
      colonnes.add("saeHost");
      colonnes.add("clientHost");
      colonnes.add("docCount");
      colonnes.add("reservationDate");
      colonnes.add("reservedBy");
      colonnes.add("startingDate");
      colonnes.add("pid");
      colonnes.add("endingDate");
      colonnes.add("message");
      colonnes.add("toCheckFlag");
      colonnes.add("toCheckFlagRaison");
      colonnes.add("VI");
      request.setAttribute("colonnes", colonnes);

      // Mode affichage
      String modeAffichage = gererPileTravauxForm.getModeAffichage();

      // Nombre de clé maximum à récupérer lors de la récupération de la pile de
      // travaux
      int maxKeysToReadConf = configuration.getMaxKeysToRead();
      request.setAttribute("maxKeysToReadConf", maxKeysToReadConf);
      int maxKeysToRead = maxKeysToReadConf;

      if (!StringUtils.isEmpty(gererPileTravauxForm.getMaxKeysToRead())) {
         maxKeysToRead = Integer.parseInt(gererPileTravauxForm
               .getMaxKeysToRead());
      }
      if (maxKeysToRead <= 0) {
         gererPileTravauxForm.setMaxKeysToRead(null);
      } else {
         gererPileTravauxForm.setMaxKeysToRead(Integer.toString(maxKeysToRead));
      }

      if (StringUtils.isBlank(modeAffichage)) {
         // Par défaut
         modeAffichage = "complet";
         gererPileTravauxForm.setModeAffichage(modeAffichage);
      }

      boolean premierAffichage = false;
      // Nombre de ligne max du tableau de résultat
      if (gererPileTravauxForm.getNbLignesTableau() == 0) {
         premierAffichage = true;
         gererPileTravauxForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
         request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
         gererPileTravauxForm.setHeureDebut("00");
         gererPileTravauxForm.setMinuteDebut("00");
         gererPileTravauxForm.setHeureFin("24");
         gererPileTravauxForm.setMinuteFin("00");
      } else {
         request.setAttribute("nbLignesTableau", gererPileTravauxForm
               .getNbLignesTableau());
      }

      // Colonnes à afficher
      List<String> colonnesAffichees = new ArrayList<String>();
      if ("minimal".equals(modeAffichage)) {
         colonnesAffichees.add("type");
         colonnesAffichees.add("parameters");
         colonnesAffichees.add("state");
      } else if ("personnalise".equals(modeAffichage)) {
         List<String> colonnesChoisies = gererPileTravauxForm
               .getColonnesAffichees();
         if (colonnesChoisies == null) {
            colonnesAffichees.add("type");
            colonnesAffichees.add("parameters");
            colonnesAffichees.add("state");

         } else {
            colonnesAffichees = colonnesChoisies;
         }
      } else if ("complet".equals(modeAffichage)) {
         colonnesAffichees = colonnes;
      }

      gererPileTravauxForm.setColonnesAffichees(colonnesAffichees);

      // Tri par défaut sur la colonne de date de création
      int numColonneDateCreation;
      if (request.getServletPath().equals("/consulterPile.do")) {
         numColonneDateCreation = NUM_COLONNE_DATE_CREATION_CONSULT;
      } else {
         numColonneDateCreation = NUM_COLONNE_DATE_CREATION_GESTION;
      }
      request.setAttribute("numColonneDateCreation", numColonneDateCreation);

      if (!premierAffichage) {
         // Si pas d'erreur dans le formulaire, on fait la recherche et/ou le
         // filtrage des jobs
         if (!result.hasFieldErrors()) {
            String action = request.getParameter("action");
            try {
               // Suppression de job
               if ("supprimer".equals(action)) {
                  UUID idATraiter = gererPileTravauxForm
                        .getIdentifiantATraiter();
                  gererPileService.supprimerTravail(idATraiter, keyspace);
                  gererPileTravauxForm.setIdentifiantATraiter(null);
               }

               // Affichage de l'historique du job
               if ("historique".equals(action)) {
                  UUID idATraiter = gererPileTravauxForm
                        .getIdentifiantATraiter();
                  gererPileTravauxForm.setIdentifiantATraiter(null);
                  List<JobHistory> historique;
                  try {
                     historique = gererPileService.getHistorique(idATraiter,
                           keyspace);
                     request.setAttribute("historique", historique);
                  } catch (Exception e) {
                     String message = "Une erreur est survenue lors de la lecture de la pile des travaux";
                     ObjectError erreur = new ObjectError("rechercheForm",
                           message);
                     result.addError(erreur);

                     StringWriter sw = new StringWriter();
                     PrintWriter pw = new PrintWriter(sw);
                     e.printStackTrace(pw);
                     String stacktrace = sw.toString();
                     request.setAttribute("stacktrace", stacktrace);
                  }
               }
            } catch (MiseAJourJobException e) {
               ObjectError erreur = new ObjectError("rechercheForm", e
                     .getMessage());
               result.addError(erreur);
               StringWriter sw = new StringWriter();
               PrintWriter pw = new PrintWriter(sw);
               e.printStackTrace(pw);
               String stacktrace = sw.toString();
               request.setAttribute("stacktrace", stacktrace);
            } catch (AucunJobException e) {
               ObjectError erreur = new ObjectError("rechercheForm",
                     "Le job n'existe pas !");
               result.addError(erreur);
            }

            // Si on ne vient pas du formulaire de filtrage,
            // on récupère les jobs en base
            // Sinon on utilise ceux en session
            List<Job> listeJobs = (List<Job>) session.getAttribute("listeJobs");
            if (!"filtrer".equals(action) || listeJobs == null) {
               // Rechercher tous les travaux
               try {
                  listeJobs = gererPileService.rechercherTousTravaux(keyspace,
                        maxKeysToRead);
               } catch (Exception e) {
                  String message = "Une erreur est survenue lors de la lecture de la pile des travaux\n\n";
                  ObjectError erreur = new ObjectError("rechercheForm", message);
                  result.addError(erreur);
                  StringWriter sw = new StringWriter();
                  PrintWriter pw = new PrintWriter(sw);
                  e.printStackTrace(pw);
                  String stacktrace = sw.toString();
                  request.setAttribute("stacktrace", stacktrace);

               }

               // On met en session la liste des jobs
               session.setAttribute("listeJobs", listeJobs);
            }

            // Récupération des paramètres de filtrage
            UUID identifiantATraite = gererPileTravauxForm
                  .getIdentifiantATraiter();
            Date dateCreationMinTmp = gererPileTravauxForm.getDateDebut();
            Date dateCreationMaxTmp = gererPileTravauxForm.getDateFin();
            String heureDebut = gererPileTravauxForm.getHeureDebut();
            String minuteDebut = gererPileTravauxForm.getMinuteDebut();
            String heureFin = gererPileTravauxForm.getHeureFin();
            String minuteFin = gererPileTravauxForm.getMinuteFin();
            // Ajout des heures dans les dates de début et de fin
            Date dateCreationMin = calculeDate(dateCreationMinTmp, heureDebut,
                  minuteDebut);
            Date dateCreationMax = calculeDate(dateCreationMaxTmp, heureFin,
                  minuteFin);
            String type = gererPileTravauxForm.getType();
            String state = gererPileTravauxForm.getState();
            String saeHost = gererPileTravauxForm.getSaeHost();
            String clientHost = gererPileTravauxForm.getClientHost();
            String parameters = gererPileTravauxForm.getParameters();
            if ("SAISIE".equals(parameters)) {
               parameters = gererPileTravauxForm.getParametersSaisi();
            }
            String contratService = gererPileTravauxForm.getContratService();

            // On regarde si un filtrage est actif
            if (dateCreationMin == null
                  && dateCreationMax == null
                  && ("TOUS".equals(type) || StringUtils.isBlank(type))
                  && ("TOUS".equals(state) || StringUtils.isBlank(state))
                  && StringUtils.isBlank(saeHost)
                  && StringUtils.isBlank(clientHost)
                  && ("TOUS".equals(parameters) || StringUtils
                        .isBlank(parameters))
                  && ("TOUS".equals(contratService) || StringUtils
                        .isBlank(contratService)) && identifiantATraite == null) {
               if (maxKeysToRead > 0 && maxKeysToRead != maxKeysToReadConf) {
                  request.setAttribute("filtreActif", true);
               } else {
                  request.setAttribute("filtreActif", false);
               }

               int docCountTotal = 0;
               if (CollectionUtils.isNotEmpty(listeJobs)) {
                  for (Job job : listeJobs) {
                     if (job.getDocCount() != null) {
                        docCountTotal += job.getDocCount();
                     }
                  }
               }
               request.setAttribute("docCountTotal", docCountTotal);
               request.setAttribute("listeJobAffiches", listeJobs);

            } else {
               request.setAttribute("filtreActif", true);

               List<Job> listeJobsAffiches = new ArrayList<Job>();
               // Si on fait une recherche par job, on le récupère directement
               // en base, sans parcourir tous les jobs
               // Cela évite qu'il ne soit pas trouvé si le pile des travaux
               // remontée est incomplète (nombre d'éléments retournés limité)
               if (identifiantATraite != null) {
                  listeJobsAffiches.add(gererPileService.getJob(keyspace,
                        identifiantATraite));
               } else {

                  // Filtrer les travaux
                  listeJobsAffiches = filtrerJobs(listeJobs,
                        identifiantATraite, dateCreationMin, dateCreationMax,
                        type, state, parameters, saeHost, clientHost,
                        contratService);
               }

               int docCountTotal = 0;
               for (Job job : listeJobsAffiches) {
                  if (job.getDocCount() != null) {
                     docCountTotal += job.getDocCount();
                  }
               }
               request.setAttribute("docCountTotal", docCountTotal);
               request.setAttribute("listeJobAffiches", listeJobsAffiches);

            }
         }
      }

      for (String pagm : listePagm) {
         if ("ADMIN_TECHNIQUE".equals(pagm)) {
            return "gererPile";
         }
      }

      return "consulterPile";
   }

   @SuppressWarnings("PMD.ShortVariable")
   private Date calculeDate(Date dateDebut, String heure, String minute) {
      if (dateDebut == null) {
         return null;
      }
      Date dateOk = dateDebut;

      int hh = Integer.parseInt(heure);
      int mm = Integer.parseInt(minute);

      if (hh == MINUIT) {
         hh = HEURE_MAX;
         mm = MINUTE_MAX;
      }
      dateOk = DateUtils.setHours(dateOk, hh);
      dateOk = DateUtils.setMinutes(dateOk, mm);
      dateOk = DateUtils.setSeconds(dateOk, 0);
      dateOk = DateUtils.setMilliseconds(dateOk, 0);

      return dateOk;

   }

   /**
    * Filtrage des jobs en fonction des critères de recherche
    * 
    * @param listeJobs
    *           la liste des jobs à filtrer
    * @param dateCreationMin
    *           la date de création minimale des jobs
    * @param dateCreationMax
    *           la date de création maximale des jobs
    * @param type
    *           le type des jobs
    * @param state
    *           l'état des jobs
    * @param parameters
    *           les paramètres des jobs
    * @param saeHost
    *           saeHost
    * @param clientHost
    *           client Host
    * @return la liste des jobs filtrés
    */
   @SuppressWarnings("PMD.CollapsibleIfStatements")
   private List<Job> filtrerJobs(List<Job> listeJobs, UUID identifiantATraite,
         Date dateCreationMin, Date dateCreationMax, String type, String state,
         String parameters, String saeHost, String clientHost,
         String contratService) {

      List<Job> listeJobsFiltres = new ArrayList<Job>();

      for (Job job : listeJobs) {
         boolean jobAGarder = true;

         if (dateCreationMin != null) {
            if (dateCreationMin.after(job.getCreationDate())) {
               jobAGarder = false;
               continue;
            }
         }

         if (dateCreationMax != null) {
            if (dateCreationMax.before(job.getCreationDate())) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(type)) {
            if (!type.equals(job.getType()) && !"TOUS".equals(type)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(state)) {
            if (!state.equals(job.getState().toString())
                  && !"TOUS".equals(state)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(parameters)) {
            if (!"TOUS".equals(parameters)) {
               if (job.getJobParameters() == null) {
                  jobAGarder = false;
                  if (job.getParameters() == null
                        || !job.getParameters().contains(parameters)) {
                     jobAGarder = false;
                     continue;
                  } else {
                     jobAGarder = true;
                  }
               } else {
                  jobAGarder = false;
                  Map<String, String> mapParameters = job.getJobParameters();
                  for (String key : mapParameters.keySet()) {
                     if (mapParameters.get(key).contains(parameters)) {
                        jobAGarder = true;
                        listeJobsFiltres.add(job);
                        break;
                     }
                  }
                  continue;
               }
            }
         }
         if (StringUtils.isNotBlank(contratService)
               && StringUtils.isNotBlank(job.getVi().getCodeAppli())) {
            if (!job.getVi().getCodeAppli().contains(contratService)
                  && !"TOUS".equals(contratService)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(saeHost)) {
            if (!job.getSaeHost().contains(saeHost)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(clientHost)) {
            if (!job.getClientHost().contains(clientHost)) {
               jobAGarder = false;
               continue;
            }
         }
         if (jobAGarder) {
            listeJobsFiltres.add(job);
         }
      }

      return listeJobsFiltres;
   }
}
