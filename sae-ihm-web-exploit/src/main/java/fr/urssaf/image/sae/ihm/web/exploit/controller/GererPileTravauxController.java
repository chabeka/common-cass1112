package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.netflix.curator.framework.CuratorFramework;

import fr.urssaf.image.sae.commons.utils.Constantes.TYPES_JOB;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunJobException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.MiseAJourJobException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.GererPileTravauxForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationBean;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Job;
import fr.urssaf.image.sae.ihm.web.exploit.service.ContratServiceService;
import fr.urssaf.image.sae.ihm.web.exploit.service.GererPileService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.ContratServiceServiceImpl;
import fr.urssaf.image.sae.pile.travaux.model.JobHistory;
import fr.urssaf.image.sae.pile.travaux.model.JobRequest;
import fr.urssaf.image.sae.pile.travaux.model.JobState;

/**
 * Classe centralisant les opérations utilsateur pour la manipulation de la pile
 * des travaux
 * 
 * 
 */
@Controller
public class GererPileTravauxController {

   /**
    * Service permettant de réaliser les opérations sur la pile des travaux
    */
   @Autowired
   private GererPileService gererPileService;

   @Autowired
   private ConfigurationsEnvironnement config;

   /**
    * Bean contenant des informations de l'application
    */
   @Autowired
   private ConfigurationBean configuration;

   // Numéro de colonne de la date de création dans le cas de la consultation ou
   // de la gestion (Sert pour le tri de la pile des travaux par date de
   // création)
   private static final int NUM_COLONNE_DATE_CREATION_CONSULT = 4;
   private static final int NUM_COLONNE_DATE_CREATION_GESTION = 6;

   // Nombre de ligne à afficher dans le tableau de résultats
   private static final int NB_LIGNE_TABLEAU = 10;

   private static final int MAX_CODE_CLIENT = 200;

   private static final int MINUIT = 24;
   private static final int HEURE_MAX = 23;
   private static final int MINUTE_MAX = 59;

   /**
    * Initialisation de l'écran de consultation/gestion de la pile des travaux
    * 
    * @param gererPileTravauxForm
    *           Formulaire de gestion de la pile
    * @param result
    *           Result
    * @param session
    *           Session
    * @param request
    *           Request
    * @return la page à afficher
    */
   @SuppressWarnings("unchecked")
   @RequestMapping(value = { "consulterPile", "gererPile" })
   public final String initialisation(
         @ModelAttribute("gererPileTravauxForm") @Valid GererPileTravauxForm gererPileTravauxForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      try {

         // Récupération de la configuration choisie
         String nomConf = (String) session.getAttribute("nomConfiguration");
         Keyspace keyspace = (Keyspace) session.getServletContext()
               .getAttribute(nomConf);

         CuratorFramework curator = (CuratorFramework) session
               .getServletContext().getAttribute(nomConf + "-zookeeper");
         ContratServiceService csService = new ContratServiceServiceImpl(
               keyspace, config.getConfiguration(nomConf), curator);

         List<TYPES_JOB> listeTypesServices = Arrays.asList(TYPES_JOB.values());
         request.setAttribute("listeTypesServices", listeTypesServices);

         List<JobState> listeEtatJob = Arrays.asList(JobState.values());
         request.setAttribute("listeEtatJob", listeEtatJob);

         List<String> listeCodesClient = csService
               .findAllCodeClientCs(MAX_CODE_CLIENT);
         request.setAttribute("listeCodesClient", listeCodesClient);

         List<String> listeParametres = config.getConfiguration(nomConf)
               .getParametres();
         request.setAttribute("listeParametres", listeParametres);

         // Récupération des droits de l'utilisateur
         List<String> listePagm = (List<String>) session
               .getAttribute("pagmList");

         // Liste des noms des colonnes
         List<String> colonnes = new ArrayList<String>();
         colonnes.add("type");
         colonnes.add("parameters");
         colonnes.add("state");
         colonnes.add("relance");
         colonnes.add("saeHost");
         colonnes.add("clientHost");
         colonnes.add("docCount");
         colonnes.add("docCountTraite");
         colonnes.add("reservationDate");
         colonnes.add("reservedBy");
         colonnes.add("startingDate");
         colonnes.add("pid");
         colonnes.add("endingDate");
         colonnes.add("message");
         colonnes.add("toCheckFlag");
         colonnes.add("toCheckFlagRaison");
         colonnes.add("VI");
         request.setAttribute("colonnes", colonnes);

         // Mode affichage
         String modeAffichage = gererPileTravauxForm.getModeAffichage();

         // Nombre de clé maximum à récupérer lors de la récupération de la pile de
         // travaux
         int maxKeysToReadConf = configuration.getMaxKeysToRead();
         request.setAttribute("maxKeysToReadConf", maxKeysToReadConf);
         int maxKeysToRead = maxKeysToReadConf;

         if (!StringUtils.isEmpty(gererPileTravauxForm.getMaxKeysToRead())) {
            maxKeysToRead = Integer.parseInt(gererPileTravauxForm
                  .getMaxKeysToRead());
         }
         if (maxKeysToRead <= 0) {
            gererPileTravauxForm.setMaxKeysToRead(null);
         } else {
            gererPileTravauxForm.setMaxKeysToRead(Integer
                  .toString(maxKeysToRead));
         }

         if (StringUtils.isBlank(modeAffichage)) {
            // Par défaut
            modeAffichage = "complet";
            gererPileTravauxForm.setModeAffichage(modeAffichage);
         }

         boolean premierAffichage = false;
         // Nombre de ligne max du tableau de résultat
         if (gererPileTravauxForm.getNbLignesTableau() == 0) {
            premierAffichage = true;
            gererPileTravauxForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
            request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
            gererPileTravauxForm.setHeureDebut("00");
            gererPileTravauxForm.setMinuteDebut("00");
            gererPileTravauxForm.setHeureFin("24");
            gererPileTravauxForm.setMinuteFin("00");
         } else {
            request.setAttribute("nbLignesTableau", gererPileTravauxForm
                  .getNbLignesTableau());
         }

         // Colonnes à afficher
         List<String> colonnesAffichees = new ArrayList<String>();
         if ("minimal".equals(modeAffichage)) {
            colonnesAffichees.add("type");
            colonnesAffichees.add("parameters");
            colonnesAffichees.add("state");
         } else if ("personnalise".equals(modeAffichage)) {
            List<String> colonnesChoisies = gererPileTravauxForm
                  .getColonnesAffichees();
            if (colonnesChoisies == null) {
               colonnesAffichees.add("type");
               colonnesAffichees.add("parameters");
               colonnesAffichees.add("state");

            } else {
               colonnesAffichees = colonnesChoisies;
            }
         } else if ("complet".equals(modeAffichage)) {
            colonnesAffichees = colonnes;
         }

         gererPileTravauxForm.setColonnesAffichees(colonnesAffichees);

         // Tri par défaut sur la colonne de date de création
         int numColonneDateCreation;
         if (request.getServletPath().equals("/consulterPile.do")) {
            numColonneDateCreation = NUM_COLONNE_DATE_CREATION_CONSULT;
         } else {
            numColonneDateCreation = NUM_COLONNE_DATE_CREATION_GESTION;
         }
         request.setAttribute("numColonneDateCreation", numColonneDateCreation);

         if (!premierAffichage) {
            // Si pas d'erreur dans le formulaire, on fait la recherche et/ou le
            // filtrage des jobs
            if (!result.hasFieldErrors()) {
               String action = request.getParameter("action");
               try {
                  // Suppression de job
                  if ("supprimer".equals(action)) {
                     UUID idATraiter = gererPileTravauxForm
                           .getIdentifiantATraiter();
                     gererPileService.supprimerTravail(idATraiter, keyspace);
                     gererPileTravauxForm.setIdentifiantATraiter(null);
                  }

                  // Affichage de l'historique du job
                  if ("historique".equals(action)) {
                     UUID idATraiter = gererPileTravauxForm
                           .getIdentifiantATraiter();
                     gererPileTravauxForm.setIdentifiantATraiter(null);
                     List<JobHistory> historique;
                     try {
                        historique = gererPileService.getHistorique(idATraiter,
                              keyspace);
                        request.setAttribute("historique", historique);
                     } catch (Exception e) {
                        String message = "Une erreur est survenue lors de la lecture de la pile des travaux";
                        ObjectError erreur = new ObjectError("rechercheForm",
                              message);
                        result.addError(erreur);

                        StringWriter sw = new StringWriter();
                        PrintWriter pw = new PrintWriter(sw);
                        e.printStackTrace(pw);
                        String stacktrace = sw.toString();
                        request.setAttribute("stacktrace", stacktrace);
                     }
                  }

               } catch (MiseAJourJobException e) {
                  ObjectError erreur = new ObjectError("rechercheForm", e
                        .getMessage());
                  result.addError(erreur);
                  StringWriter sw = new StringWriter();
                  PrintWriter pw = new PrintWriter(sw);
                  e.printStackTrace(pw);
                  String stacktrace = sw.toString();
                  request.setAttribute("stacktrace", stacktrace);
               } catch (AucunJobException e) {
                  ObjectError erreur = new ObjectError("rechercheForm",
                        "Le job n'existe pas !");
                  result.addError(erreur);
               }

               // Si on lance une recherche (et non un filtre),
               // Si la liste des jobs n'est pas déjà en session,
               // Si la liste des jobs est en session mais que le maxKeysToRead a
               // été modifié,
               // et si on ne cherche pas un job précis (uuid fourni dans le
               // formulaire)
               // on récupère les jobs en base
               // Sinon on utilise ceux en session
               List<Job> listeJobs = (List<Job>) session.getAttribute("listeJobs");
               UUID identifiantATraiter = gererPileTravauxForm
                     .getIdentifiantATraiter();

               int lastMaxKeysToRead = (Integer) session
                     .getAttribute("lastMaxKeysToRead");

               if ((listeJobs == null && identifiantATraiter == null)
                     || (listeJobs != null && lastMaxKeysToRead != maxKeysToRead)
                     || "refreshDatas".equals(action)) {
                  // Rechercher tous les travaux
                  try {
                     listeJobs = gererPileService.rechercherTousTravaux(keyspace,
                           maxKeysToRead);
                  } catch (Exception e) {
                     String message = "Une erreur est survenue lors de la lecture de la pile des travaux\n\n";
                     ObjectError erreur = new ObjectError("rechercheForm", message);
                     result.addError(erreur);
                     StringWriter sw = new StringWriter();
                     PrintWriter pw = new PrintWriter(sw);
                     e.printStackTrace(pw);
                     String stacktrace = sw.toString();
                     request.setAttribute("stacktrace", stacktrace);

                  }

                  // On met en session la liste des jobs
                  session.setAttribute("listeJobs", listeJobs);
               }

               // Récupération des paramètres de filtrage

               Date dateCreationMinTmp = gererPileTravauxForm.getDateDebut();
               Date dateCreationMaxTmp = gererPileTravauxForm.getDateFin();
               String heureDebut = gererPileTravauxForm.getHeureDebut();
               String minuteDebut = gererPileTravauxForm.getMinuteDebut();
               String heureFin = gererPileTravauxForm.getHeureFin();
               String minuteFin = gererPileTravauxForm.getMinuteFin();
               // Ajout des heures dans les dates de début et de fin
               Date dateCreationMin = calculeDate(dateCreationMinTmp, heureDebut,
                     minuteDebut);
               Date dateCreationMax = calculeDate(dateCreationMaxTmp, heureFin,
                     minuteFin);
               String type = gererPileTravauxForm.getType();
               String state = gererPileTravauxForm.getState();
               String saeHost = gererPileTravauxForm.getSaeHost();
               String clientHost = gererPileTravauxForm.getClientHost();
               String parameters = gererPileTravauxForm.getParameters();
               if ("SAISIE".equals(parameters)) {
                  parameters = gererPileTravauxForm.getParametersSaisi();
               }
               String contratService = gererPileTravauxForm.getContratService();

               // On regarde si un filtrage est actif
               if (dateCreationMin == null
                     && dateCreationMax == null
                     && ("TOUS".equals(type) || StringUtils.isBlank(type))
                     && ("TOUS".equals(state) || StringUtils.isBlank(state))
                     && StringUtils.isBlank(saeHost)
                     && StringUtils.isBlank(clientHost)
                     && ("TOUS".equals(parameters) || StringUtils
                           .isBlank(parameters))
                           && ("TOUS".equals(contratService) || StringUtils
                                 .isBlank(contratService))
                                 && identifiantATraiter == null) {
                  if (maxKeysToRead > 0 && maxKeysToRead != maxKeysToReadConf) {
                     request.setAttribute("filtreActif", true);
                  } else {
                     request.setAttribute("filtreActif", false);
                  }

                  comptage(listeJobs, listeJobs, gererPileTravauxForm.isVisuRelance(), request);

               } else {
                  request.setAttribute("filtreActif", true);

                  List<Job> listeJobsAffiches = new ArrayList<Job>();
                  // Si on fait une recherche par job, on le récupère directement
                  // en base, sans parcourir tous les jobs
                  // Cela évite qu'il ne soit pas trouvé si le pile des travaux
                  // remontée est incomplète (nombre d'éléments retournés limité)
                  if (identifiantATraiter != null) {
                     try {
                        listeJobsAffiches.add(gererPileService.getJob(keyspace,
                              identifiantATraiter));
                     } catch (Exception e) {
                        ObjectError erreur = new ObjectError("rechercheForm",
                              "Le job n'existe pas !");
                        result.addError(erreur);
                     }
                  } else {

                     // Filtrer les travaux
                     listeJobsAffiches = filtrerJobs(listeJobs,
                           identifiantATraiter, dateCreationMin, dateCreationMax,
                           type, state, parameters, saeHost, clientHost,
                           contratService);
                  }

                  comptage(listeJobs, listeJobsAffiches, gererPileTravauxForm.isVisuRelance(), request);

               }
            }
         } else {
            // 1er affichage

            // On s'assure de vider la liste des jobs de la session (lorsqu'on
            // change d'environnement par exemple ou quand on relance le menu)
            if (session.getAttribute("listeJobs") != null) {
               session.setAttribute("listeJobs", null);
            }

         }

         // On stocke le nombre de clé max
         session.setAttribute("lastMaxKeysToRead", maxKeysToRead);

         for (String pagm : listePagm) {
            if ("ADMIN_TECHNIQUE".equals(pagm)) {
               return "gererPile";
            }
         }

      } catch (Throwable ex) {

         StringWriter sw = new StringWriter();
         PrintWriter pw = new PrintWriter(sw);
         ex.printStackTrace(pw);
         String stacktrace = sw.toString();
         request.setAttribute("stacktrace", stacktrace);

      }

      return "consulterPile";
   }

   private void comptage(List<Job> listeJobs, List<Job> listeJobsAffiches,
         boolean visuRelance, HttpServletRequest request) {
      int docCountTotal = 0;
      int nbJobEnErreur = 0;
      int nbDocsNonArchive = 0;
      int nbJobErreurCNP69 = 0;
      int nbDocsNonArchiveCNP69 = 0;
      int nbJobErreurCNP31 = 0;
      int nbDocsNonArchiveCNP31 = 0;
      int nbJobErreurCNP75 = 0;
      int nbDocsNonArchiveCNP75 = 0;
      int nbJobErreurAutre = 0;
      int nbDocsNonArchiveAutre = 0;
      int nbTraitementRelance = 0;
      int nbTraitementRelanceSucces = 0;
      int nbTraitementRelanceCNP69 = 0;
      int nbTraitementRelanceSuccesCNP69 = 0;
      int nbTraitementRelanceCNP75 = 0;
      int nbTraitementRelanceSuccesCNP75 = 0;
      int nbTraitementRelanceCNP31 = 0;
      int nbTraitementRelanceSuccesCNP31 = 0;
      int nbTraitementRelanceAutre = 0;
      int nbTraitementRelanceSuccesAutre = 0;

      if (CollectionUtils.isNotEmpty(listeJobsAffiches)) {
         for (Job job : listeJobsAffiches) {
            if (job.getState() == JobState.FAILURE) {

               String urlEcde = getUrlEcde(job);
               if (urlEcde.contains("cnp31")) {
                  nbJobErreurCNP31++;
                  if (job.getDocCount() != null) {
                     nbDocsNonArchiveCNP31 += job.getDocCount();
                  }
               } else if (urlEcde.contains("cnp69")) {
                  nbJobErreurCNP69++;
                  if (job.getDocCount() != null) {
                     nbDocsNonArchiveCNP69 += job.getDocCount();
                  }
               } else if (urlEcde.contains("cnp75")) {
                  nbJobErreurCNP75++;
                  if (job.getDocCount() != null) {
                     nbDocsNonArchiveCNP75 += job.getDocCount();
                  }
               } else {
                  // dans ce cas, on est en environnement autre que la
                  // production
                  nbJobErreurAutre++;
                  if (job.getDocCount() != null) {
                     nbDocsNonArchiveAutre += job.getDocCount();
                  }
               }

               nbJobEnErreur++;
               if (job.getDocCount() != null) {
                  nbDocsNonArchive += job.getDocCount();
               }


               // On visualise les traitements relancés si l'option est activée
               if (visuRelance) {
                  List<Job> listeTraitementRelance = getTraitementRelance(urlEcde,
                        listeJobs, job);

                  // On regarde si un des traitements relancés est en succès
                  List<UUID> listeUUIDRelance = new ArrayList<UUID>();
                  for (Job jobRelance : listeTraitementRelance) {
                     listeUUIDRelance.add(jobRelance.getIdJob());
                     if (jobRelance.getState() == JobState.SUCCESS) {
                        job.setSuccesRelance(true);
                     }
                  }
                  if (job.isSuccesRelance()) {
                     nbTraitementRelanceSucces++;
                     if (urlEcde.contains("cnp31")) {
                        nbTraitementRelanceSuccesCNP31++;
                     } else if (urlEcde.contains("cnp69")) {
                        nbTraitementRelanceSuccesCNP69++;
                     } else if (urlEcde.contains("cnp75")) {
                        nbTraitementRelanceSuccesCNP75++;
                     } else {
                        nbTraitementRelanceSuccesAutre++;
                     }
                  }
                  if (listeTraitementRelance.size() > 0) {
                     job.setListeJobRelance(listeUUIDRelance);
                     nbTraitementRelance++;
                     if (urlEcde.contains("cnp31")) {
                        nbTraitementRelanceCNP31++;
                     } else if (urlEcde.contains("cnp69")) {
                        nbTraitementRelanceCNP69++;
                     } else if (urlEcde.contains("cnp75")) {
                        nbTraitementRelanceCNP75++;
                     } else {
                        nbTraitementRelanceAutre++;
                     }
                  }
               }

            }

            if (job.getDocCount() != null) {
               docCountTotal += job.getDocCount();
            }
         }
      }

      NumberFormat formatter = new DecimalFormat("##,###");

      request.setAttribute("nbDocsNonArchive", formatter
            .format(nbDocsNonArchive));
      request.setAttribute("nbJobEnErreur", formatter.format(nbJobEnErreur));
      request.setAttribute("nbTraitementRelance", formatter
            .format(nbTraitementRelance));
      request.setAttribute("nbTraitementRelanceSucces", formatter
            .format(nbTraitementRelanceSucces));

      request.setAttribute("nbJobErreurCNP31", formatter
            .format(nbJobErreurCNP31));
      request.setAttribute("nbDocsNonArchiveCNP31", formatter
            .format(nbDocsNonArchiveCNP31));
      request.setAttribute("nbTraitementRelanceCNP31", formatter
            .format(nbTraitementRelanceCNP31));
      request.setAttribute("nbTraitementRelanceSuccesCNP31", formatter
            .format(nbTraitementRelanceSuccesCNP31));

      request.setAttribute("nbJobErreurCNP69", formatter
            .format(nbJobErreurCNP69));
      request.setAttribute("nbDocsNonArchiveCNP69", formatter
            .format(nbDocsNonArchiveCNP69));
      request.setAttribute("nbTraitementRelanceCNP69", formatter
            .format(nbTraitementRelanceCNP69));
      request.setAttribute("nbTraitementRelanceSuccesCNP69", formatter
            .format(nbTraitementRelanceSuccesCNP69));

      request.setAttribute("nbJobErreurCNP75", formatter
            .format(nbJobErreurCNP75));
      request.setAttribute("nbDocsNonArchiveCNP75", formatter
            .format(nbDocsNonArchiveCNP75));
      request.setAttribute("nbTraitementRelanceCNP75", formatter
            .format(nbTraitementRelanceCNP75));
      request.setAttribute("nbTraitementRelanceSuccesCNP75", formatter
            .format(nbTraitementRelanceSuccesCNP75));

      request.setAttribute("nbJobErreurAutre", formatter
            .format(nbJobErreurAutre));
      request.setAttribute("nbDocsNonArchiveAutre", formatter
            .format(nbDocsNonArchiveAutre));
      request.setAttribute("nbTraitementRelanceAutre", formatter
            .format(nbTraitementRelanceAutre));
      request.setAttribute("nbTraitementRelanceSuccesAutre", formatter
            .format(nbTraitementRelanceSuccesAutre));

      request.setAttribute("docCountTotal", formatter.format(docCountTotal));

      request.setAttribute("listeJobAffiches", listeJobsAffiches);
   }

   private String getUrlEcde(Job job) {
      String urlEcde = "";
      if (job.getJobParameters() != null
            && job.getJobParameters().get("ecdeUrl") != null) {
         urlEcde = job.getJobParameters().get("ecdeUrl");
      } else if (job.getParameters() != null) {
         urlEcde = job.getParameters();
      }
      return urlEcde;
   }

   private List<Job> getTraitementRelance(String urlEcde, List<Job> jobs,
         Job jobEnErreur) {

      List<Job> listeJobsRelances = new ArrayList<Job>();
      for (Job job : jobs) {
         if (getUrlEcde(job).equals(urlEcde)
               && jobEnErreur.getIdJob() != job.getIdJob()) {
            listeJobsRelances.add(job);
         }
      }
      return listeJobsRelances;
   }

   @SuppressWarnings("PMD.ShortVariable")
   private Date calculeDate(Date dateDebut, String heure, String minute) {
      if (dateDebut == null) {
         return null;
      }
      Date dateOk = dateDebut;

      int hh = Integer.parseInt(heure);
      int mm = Integer.parseInt(minute);

      if (hh == MINUIT) {
         hh = HEURE_MAX;
         mm = MINUTE_MAX;
      }
      dateOk = DateUtils.setHours(dateOk, hh);
      dateOk = DateUtils.setMinutes(dateOk, mm);
      dateOk = DateUtils.setSeconds(dateOk, 0);
      dateOk = DateUtils.setMilliseconds(dateOk, 0);

      return dateOk;

   }

   /**
    * Filtrage des jobs en fonction des critères de recherche
    * 
    * @param listeJobs
    *           la liste des jobs à filtrer
    * @param dateCreationMin
    *           la date de création minimale des jobs
    * @param dateCreationMax
    *           la date de création maximale des jobs
    * @param type
    *           le type des jobs
    * @param state
    *           l'état des jobs
    * @param parameters
    *           les paramètres des jobs
    * @param saeHost
    *           saeHost
    * @param clientHost
    *           client Host
    * @return la liste des jobs filtrés
    */
   @SuppressWarnings("PMD.CollapsibleIfStatements")
   private List<Job> filtrerJobs(List<Job> listeJobs, UUID identifiantATraite,
         Date dateCreationMin, Date dateCreationMax, String type, String state,
         String parameters, String saeHost, String clientHost,
         String contratService) {

      List<Job> listeJobsFiltres = new ArrayList<Job>();

      for (Job job : listeJobs) {
         boolean jobAGarder = true;

         if (dateCreationMin != null) {
            if (dateCreationMin.after(job.getCreationDate())) {
               jobAGarder = false;
               continue;
            }
         }

         if (dateCreationMax != null) {
            if (dateCreationMax.before(job.getCreationDate())) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(type)) {
            if (!type.equals(job.getType()) && !"TOUS".equals(type)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(state)) {
            if (!state.equals(job.getState().toString())
                  && !"TOUS".equals(state)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(parameters)) {
            if (!"TOUS".equals(parameters)) {
               if (job.getJobParameters() == null) {
                  jobAGarder = false;
                  if (job.getParameters() == null
                        || !job.getParameters().contains(parameters)) {
                     jobAGarder = false;
                     continue;
                  } else {
                     jobAGarder = true;
                  }
               } else {
                  jobAGarder = false;
                  Map<String, String> mapParameters = job.getJobParameters();
                  for (String key : mapParameters.keySet()) {
                     if (mapParameters.get(key).contains(parameters)) {
                        jobAGarder = true;
                        listeJobsFiltres.add(job);
                        break;
                     }
                  }
                  continue;
               }
            }
         }
         if (StringUtils.isNotBlank(contratService) && job.getVi() != null
               && StringUtils.isNotBlank(job.getVi().getCodeAppli())) {
            if (!job.getVi().getCodeAppli().contains(contratService)
                  && !"TOUS".equals(contratService)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(saeHost)) {
            if (!job.getSaeHost().contains(saeHost)) {
               jobAGarder = false;
               continue;
            }
         }
         if (StringUtils.isNotBlank(clientHost)) {
            if (!job.getClientHost().contains(clientHost)) {
               jobAGarder = false;
               continue;
            }
         }
         if (jobAGarder) {
            listeJobsFiltres.add(job);
         }
      }

      return listeJobsFiltres;
   }

   @RequestMapping(value = "consulterPileParServeur")
   public ModelAndView consulterPileParServeur(@ModelAttribute("gererPileTravauxForm") @Valid GererPileTravauxForm gererPileTravauxForm,
         HttpServletRequest request,
         HttpServletResponse response) {

      ModelAndView model = new ModelAndView("consulterPileParServeur");

      // initialisation si necessaire du nombre de ligne du tableau
      if (gererPileTravauxForm.getNbLignesTableau() == 0) {
         gererPileTravauxForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
      }
      model.addObject("gererPileTravauxForm", gererPileTravauxForm);

      // ajout du nombre de lignes du tableau dans le model
      model.addObject("nbLignesTableau", gererPileTravauxForm.getNbLignesTableau());

      // Récupération de la configuration choisie
      String nomConf = (String) request.getSession().getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) request.getSession().getServletContext()
            .getAttribute(nomConf);

      // Récupére la liste des jobs en cours par serveur
      List<JobRequest> jobsParServeur = gererPileService.recupererTravauxEnCoursParServeur(keyspace);
      model.addObject("listeJobsEnCours", jobsParServeur);

      return model;
   }
}
