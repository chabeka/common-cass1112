package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import javax.activation.DataHandler;

import me.prettyprint.hector.api.Keyspace;
import net.docubase.toolkit.service.ServiceProvider;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEConnectionService;
import fr.urssaf.image.commons.dfce.service.impl.DFCEConnectionServiceImpl;
import fr.urssaf.image.commons.dfce.util.ConnexionServiceProvider;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunDocumentException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationBean;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDocument;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDonneesRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeResultatRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.SaeStubUtils;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.Consultation;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ConsultationRequestType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ConsultationResponseType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ListeMetadonneeCodeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeCodeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.Recherche;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RechercheRequestType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RechercheResponseType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RequeteRechercheType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ResultatRechercheType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.UuidType;
import fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.MetadonneesComparateur;
import fr.urssaf.image.sae.mapping.services.impl.MappingDocumentServiceImpl;
import fr.urssaf.image.sae.metadata.exceptions.ReferentialException;
import fr.urssaf.image.sae.metadata.referential.dao.SaeMetadataDao;
import fr.urssaf.image.sae.metadata.referential.services.MetadataReferenceDAO;
import fr.urssaf.image.sae.metadata.referential.services.impl.MetadataReferenceDAOImpl;
import fr.urssaf.image.sae.metadata.referential.support.SaeMetadataSupport;
import fr.urssaf.image.sae.storage.dfce.services.impl.storagedocument.RecycleBinServiceImpl;
import fr.urssaf.image.sae.storage.dfce.services.impl.storagedocument.crud.SearchingServiceImpl;
import fr.urssaf.image.sae.storage.dfce.support.StorageDocumentServiceSupport;
import fr.urssaf.image.sae.storage.dfce.support.TracesDfceSupport;
import fr.urssaf.image.sae.storage.exception.RecycleBinServiceEx;
import fr.urssaf.image.sae.storage.exception.StorageException;
import fr.urssaf.image.sae.storage.model.storagedocument.PaginatedStorageDocuments;
import fr.urssaf.image.sae.storage.model.storagedocument.StorageDocument;
import fr.urssaf.image.sae.storage.model.storagedocument.StorageMetadata;
import fr.urssaf.image.sae.storage.model.storagedocument.searchcriteria.PaginatedLuceneCriteria;
import fr.urssaf.image.sae.storage.model.storagedocument.searchcriteria.UUIDCriteria;
import fr.urssaf.image.sae.trace.service.DispatcheurService;
import fr.urssaf.image.sae.trace.service.impl.DispatcheurServiceImpl;

/**
 * Classe implémentant le service Rechercher Service Ce service permet de
 * realiser des opérations de recherche sur un ou plusieurs document
 * 
 */
@Component
public class RechercherServiceImpl implements RechercherService {

   private SaeStubUtils saeStubUtils;

   private RecycleBinServiceImpl recycleBinService;

   private SearchingServiceImpl searchingService;

   private ConfigurationBean configurationBean;

   /**
    * Provider de connexion du service DFCe
    */
   private ConnexionServiceProvider connexionServiceProvider;

   @Autowired
   public RechercherServiceImpl(SaeStubUtils saeStubUtils,
         ConfigurationBean configurationBean) {
      this.saeStubUtils = saeStubUtils;
      this.configurationBean = configurationBean;
   }

   /**
    * Renvoie la liste des documents satisfaisants à la requête lucène passée en
    * paramètre
    * 
    * @param requeteLucene
    *           Requête permettant de déterminer quels sont les documents à
    *           renvoyer
    * @param codes
    *           Liste des codes de métadonnées voulues à l'affichage
    * @param urlServiceWeb
    *           l'url du web service de la configuration choisie
    * @param login
    *           login de l'utilisateur (pour la traçabilité)
    * @return Informations sur les documents satisfaisant à la requête lucène
    * 
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur technique
    * @throws AucunDocumentException
    *            Exception levée lorsque la recherche ne renvoie aucun document
    */
   @Override
   public final SaeResultatRecherche rechercherDocuments(String requeteLucene,
         List<String> codes, String urlServiceWeb, String login)
               throws ErreurTechniqueException, AucunDocumentException {

      // Récupération du stub
      SaeServiceStub stub = saeStubUtils.getStub(urlServiceWeb, login);

      // Création de la requête de recherche
      RechercheRequestType requestType = creationRequeteRecherche(
            requeteLucene, codes);

      // Lancement de la recherche
      try {
         RechercheResponseType reponse;
         reponse = appelWSRecherche(stub, requestType);

         ResultatRechercheType[] resultats = reponse.getResultats()
               .getResultat();

         // Exception si aucun résultat
         if (resultats == null || resultats.length == 0) {
            throw new AucunDocumentException();
         }

         // Résultat tronqué ?
         boolean tronque = reponse.getResultatTronque();

         // Conversion du résultat en objet SaeDonneesRecherche
         List<SaeDonneesRecherche> listeDonneesRech = convertToSdr(resultats);
         return new SaeResultatRecherche(listeDonneesRech, tronque);

      } catch (RemoteException e) {
         throw new ErreurTechniqueException(e);
      }
   }

   /**
    * Renvoie la lsite de documents depuis la corbeille satisfaisant la requête passée en paramètre
    */
   @Override
   public final SaeResultatRecherche getDocsFromRecycleBin(
         DFCEConnection dfceConnection, String requeteLucene,
         List<String> codes, int nbrRes, Keyspace keyspace)
               throws ReferentialException, StorageException, IOException,
               AucunDocumentException {

      SaeResultatRecherche resultatRecherche = null;

      boolean resultatTronquee = false;
      List<StorageMetadata> desiredStorageMetadatas = new ArrayList<StorageMetadata>();
      StorageMetadata metadata = null;

      if (codes != null && codes.size() > 0) {
         for (String code : codes) {
            metadata = new StorageMetadata(code);
            desiredStorageMetadatas.add(metadata);
         }
      }

      PaginatedLuceneCriteria paginatedLuceneCriteria = new PaginatedLuceneCriteria(
            requeteLucene , nbrRes, desiredStorageMetadatas, null, null, null);

      this.initSearchingService(openConnectionService(dfceConnection),
            dfceConnection, keyspace);
      PaginatedStorageDocuments strDocuments = searchingService
            .searchStorageDocumentsInRecycleBean(
                  paginatedLuceneCriteria);

      // Conversion
      List<SaeDonneesRecherche> resultats = convertToSaeDonneeRechercheList(strDocuments);

      // Exception si aucun résultat
      if (resultats == null || resultats.size() == 0) {
         throw new AucunDocumentException();
      }

      if (resultats.size() > nbrRes) {
         resultatTronquee = true;
      }
      resultatRecherche = new SaeResultatRecherche(resultats, resultatTronquee);

      return resultatRecherche;

   }

   /**
    * Permet de convertir le résultat de recherche passée en paramètre en une liste de SaeDonneesRecherche
    * @param strDocuments
    * @return une liste de SaeDonneesRecherche
    */
   private List<SaeDonneesRecherche> convertToSaeDonneeRechercheList(
         PaginatedStorageDocuments strDocuments) {

      List<SaeDonneesRecherche> donneeRechercheList = new ArrayList<SaeDonneesRecherche>();
      SaeDonneesRecherche donneeRecherche = null;

      for (StorageDocument strDoc : strDocuments.getAllStorageDocuments()) {
         donneeRecherche = new SaeDonneesRecherche(
               convertToMetaDonneeList(strDoc.getMetadatas()), strDoc.getUuid());
         donneeRechercheList.add(donneeRecherche);
      }

      return donneeRechercheList;
   }

   /**
    * Permet de retourner une liste de MetaDonnee à partir d'une liste de
    * StorageMetaData
    * 
    * @param metadatas
    * @return
    */
   private List<Metadonnee> convertToMetaDonneeList(
         List<StorageMetadata> storageMetadatas) {

      List<Metadonnee> metaDonneeList = new ArrayList<Metadonnee>();
      Metadonnee metaDonnee = null;

      for (StorageMetadata storageMetadata : storageMetadatas) {
         metaDonnee = new Metadonnee(storageMetadata.getShortCode(),
               storageMetadata.getValue().toString(), null);
         metaDonneeList.add(metaDonnee);
      }

      return metaDonneeList;
   }

   /**
    * Renvoie le document associé à l'uuid passé en paramètre
    * 
    * @param uuid
    *           Identifiant unique du document à chercher
    * @param codes
    *           Liste des codes de métadonnées voulues à l'affichage
    * @param urlServiceWeb
    *           l'url du service web de la configuration choisie
    * @param avecContenu
    *           indique si on récupère le contenu du document ou juste les
    *           métadonnées
    * @param login
    *           login de l'utilisateur (pour la traçabilité)
    * @return Document recherché
    * 
    * @throws AucunDocumentException
    *            Exception levée lorsqu'aucun document n'est trouvé
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur technique
    */
   @Override
   public final SaeDocument consulterDocument(UUID uuid, List<String> codes,
         String urlServiceWeb, boolean avecContenu, String login)
               throws AucunDocumentException, ErreurTechniqueException {

      // Récupération du Stub
      SaeServiceStub stub = saeStubUtils.getStub(urlServiceWeb, login);

      // Création de la requête de consultation
      ConsultationRequestType consultRequestType = creationRequeteConsult(uuid,
            codes);

      try {
         // Lancement de la consultation
         ConsultationResponseType resultat = appelWSConsultation(stub,
               consultRequestType);

         // Exception si aucun résultat
         if (resultat == null) {
            throw new AucunDocumentException();
         }

         // Conversion du résultat en SaeDocument
         return convertToSD(resultat, avecContenu);

      } catch (RemoteException e) {
         throw new ErreurTechniqueException(e);
      }
   }

   /**
    * Permet de consulter le document depuis la corbeille à partir de son uuid passé en paramètre  
    */
   @Override
   public final SaeDocument consultDocInRecycleBin(UUID uuid,
         List<String> codes, boolean avecContenu,
         DFCEConnection dfceConnection, Keyspace keyspace)
               throws AucunDocumentException, ErreurTechniqueException {

      // constitue la liste des métadonnées du document à retourner
      List<StorageMetadata> metadatasStorageDoc = new ArrayList<StorageMetadata>();

      List<StorageMetadata> desiredStorageMetadatas = null;
      StorageMetadata metadata = null;

      if (codes != null && codes.size() > 0) {
         desiredStorageMetadatas = new ArrayList<StorageMetadata>();
         for (String code : codes) {
            metadata = new StorageMetadata(code);
            desiredStorageMetadatas.add(metadata);
         }
      }

      UUIDCriteria uuidCriteria = new UUIDCriteria(uuid,
            desiredStorageMetadatas);
      try {

         this.initRecycleBinService(openConnectionService(dfceConnection),
               dfceConnection, keyspace);

         StorageDocument doc = recycleBinService
               .getStorageDocumentFromRecycleBin(uuidCriteria, avecContenu);

         // Exception si aucun résultat
         if (doc.getMetadatas() == null
               || (doc.getMetadatas() != null && doc.getMetadatas().isEmpty())) {
            throw new AucunDocumentException();
         }

         metadatasStorageDoc = doc.getMetadatas();

         if (avecContenu && doc.getContent() != null) {
            try {
               DataHandler data = doc.getContent();
               InputStream inStream;
               inStream = data.getInputStream();
               byte[] contenu = IOUtils.toByteArray(inStream);
               inStream.close();
               return new SaeDocument(
                     convertToMetaDonneeList(metadatasStorageDoc), contenu);
            } catch (IOException e) {
               throw new ErreurTechniqueException(e);
            }
         }

         return new SaeDocument(convertToMetaDonneeList(metadatasStorageDoc) , null);

      } catch (RecycleBinServiceEx frozenExcept) {
         throw new ErreurTechniqueException(frozenExcept);
      }  catch (StorageException e) {
         throw new ErreurTechniqueException(e);
      } catch (IOException e) {
         throw new ErreurTechniqueException(e);
      } finally {
      }

   }

   /**
    * Création requete pour l'appel WS de recherche
    * 
    * @param requeteLucene
    *           la requête lucène souhaitée pour la recherche
    * @param codes
    *           les codes des métadonnées à retourner par la recherche
    */
   private RechercheRequestType creationRequeteRecherche(String requeteLucene,
         List<String> codes) {

      RechercheRequestType requestType = new RechercheRequestType();

      // Requête Lucène
      RequeteRechercheType requete = new RequeteRechercheType();
      requete.setRequeteRechercheType(requeteLucene);
      requestType.setRequete(requete);

      // Métadonnées à afficher en retour
      MetadonneeCodeType[] tabMetaCodeType = null;
      if (codes != null) {
         tabMetaCodeType = new MetadonneeCodeType[codes.size()];
         int index = 0;
         for (String codeMeta : codes) {
            MetadonneeCodeType metaCodeType = new MetadonneeCodeType();
            metaCodeType.setMetadonneeCodeType(codeMeta);
            tabMetaCodeType[index] = metaCodeType;
            index++;
         }
      }
      ListeMetadonneeCodeType listeMeta = new ListeMetadonneeCodeType();
      listeMeta.setMetadonneeCode(tabMetaCodeType);
      requestType.setMetadonnees(listeMeta);

      return requestType;
   }

   /**
    * Appel au WS de recherche
    * 
    * @param stub
    * @param requestType
    *           la requête contenant la requete lucene et les métadonnées
    * @throws RemoteException
    */
   private RechercheResponseType appelWSRecherche(SaeServiceStub stub,
         RechercheRequestType requestType) throws RemoteException {
      Recherche recherche = new Recherche();
      recherche.setRecherche(requestType);
      return stub.recherche(recherche).getRechercheResponse();
   }

   /**
    * Permet de convertir le résultat de recherche
    */
   private List<SaeDonneesRecherche> convertToSdr(
         ResultatRechercheType[] resultats) {
      List<SaeDonneesRecherche> listeDonneesRech = new ArrayList<SaeDonneesRecherche>();
      for (ResultatRechercheType resRechType : resultats) {

         MetadonneeType[] metaType = resRechType.getMetadonnees()
               .getMetadonnee();

         List<Metadonnee> metadonnees = new ArrayList<Metadonnee>();
         for (int j = 0; j < metaType.length; j++) {
            Metadonnee meta = new Metadonnee(metaType[j].getCode()
                  .getMetadonneeCodeType(), metaType[j].getValeur()
                  .getMetadonneeValeurType(), "");
            metadonnees.add(meta);
         }

         String idArchivage = resRechType.getIdArchive().getUuidType();
         UUID uuid = UUID.fromString(idArchivage);

         // Tri des métadonnées par ordre alphabétique du code
         Collections.sort(metadonnees, new MetadonneesComparateur());

         SaeDonneesRecherche sdr = new SaeDonneesRecherche(metadonnees, uuid);
         listeDonneesRech.add(sdr);
      }
      return listeDonneesRech;
   }

   /**
    * Création de la requete de consultation
    * 
    * @param uuid
    *           uuid du document à consulter
    * @param codes
    *           liste des métadonnées à retourner par la consultation
    * @return
    */
   private ConsultationRequestType creationRequeteConsult(UUID uuid,
         List<String> codes) {
      ConsultationRequestType consultRequestType = new ConsultationRequestType();

      // UUID
      UuidType uuidType = new UuidType();
      uuidType.setUuidType(uuid.toString());
      consultRequestType.setIdArchive(uuidType);

      // Métadonnées à afficher en retour
      if (codes != null) {
         MetadonneeCodeType[] tabMetaCodeType = new MetadonneeCodeType[codes
                                                                       .size()];
         int index = 0;
         for (String codeMeta : codes) {
            MetadonneeCodeType metaCodeType = new MetadonneeCodeType();
            metaCodeType.setMetadonneeCodeType(codeMeta);
            tabMetaCodeType[index] = metaCodeType;
            index++;
         }
         ListeMetadonneeCodeType listeMeta = new ListeMetadonneeCodeType();
         listeMeta.setMetadonneeCode(tabMetaCodeType);
         consultRequestType.setMetadonnees(listeMeta);
      }

      return consultRequestType;
   }

   /**
    * Appel au WS de consultation
    * 
    * @param stub
    * @param ConsultationRequestType
    *           la requête contenant l'uuid et les métadonnées
    * @throws RemoteException
    */
   private ConsultationResponseType appelWSConsultation(SaeServiceStub stub,
         ConsultationRequestType consultRequestType) throws RemoteException {

      Consultation consultation = new Consultation();
      consultation.setConsultation(consultRequestType);
      return stub.consultation(consultation).getConsultationResponse();
   }

   private SaeDocument convertToSD(ConsultationResponseType resultat,
         boolean avecContenu) throws ErreurTechniqueException {
      // Métadonnées retournée
      MetadonneeType[] metaType = resultat.getMetadonnees().getMetadonnee();
      List<Metadonnee> metadonnees = new ArrayList<Metadonnee>();
      for (int j = 0; j < metaType.length; j++) {
         Metadonnee meta = new Metadonnee(metaType[j].getCode()
               .getMetadonneeCodeType(), metaType[j].getValeur()
               .getMetadonneeValeurType(), "");
         metadonnees.add(meta);
      }
      // Tri des métadonnées par ordre alphabétique du code
      Collections.sort(metadonnees, new MetadonneesComparateur());

      if (avecContenu) {
         try {
            DataHandler data = resultat.getObjetNumerique()
                  .getObjetNumeriqueConsultationTypeChoice_type0().getContenu();
            InputStream inStream;
            inStream = data.getInputStream();
            byte[] contenu = IOUtils.toByteArray(inStream);
            inStream.close();
            return new SaeDocument(metadonnees, contenu);
         } catch (IOException e) {
            throw new ErreurTechniqueException(e);
         }
      } else {
         return new SaeDocument(metadonnees, null);
      }
   }

   /**
    * Methode permettant d'ouvrir la connection vers DFCe
    * 
    * @param dfceConnection
    *           connection DFCe
    * @return le service de connection vers DFCe
    */
   private ServiceProvider openConnectionService(DFCEConnection dfceConnection) {
      // Initialisation du service de connection vers DFCe
      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);

      return dfceConnectionService.openConnection();

   }

   /**
    * Methode permettant d'initialiser le service de gestion de la corbeille
    * 
    * @param dfceService
    *           Service de connection vers DFCe
    * @param dfceConnection
    */
   private void initRecycleBinService(ServiceProvider dfceService,
         DFCEConnection dfceConnection, Keyspace keyspace) {

      // Instantiation du JobClockSupport
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      JobClockSupport jobClockSupport = new JobClockSupportImpl(keyspace,
            clock);

      DispatcheurService dispatcheur = new DispatcheurServiceImpl(
            jobClockSupport, null, null, null, null, null, null, null);
      TracesDfceSupport tracesSupport = new TracesDfceSupport(dispatcheur);
      StorageDocumentServiceSupport storageDocumentServiceSupport = new StorageDocumentServiceSupport();
      connexionServiceProvider = new ConnexionServiceProvider();
      connexionServiceProvider.addServiceProvider(dfceConnection, dfceService);
      recycleBinService = new RecycleBinServiceImpl();
      recycleBinService.setCnxParameters(dfceConnection);
      recycleBinService.setConnexionServiceProvider(connexionServiceProvider);
      recycleBinService
      .setStorageDocumentServiceSupport(storageDocumentServiceSupport);
      recycleBinService.setTracesSupport(tracesSupport);
   }

   /**
    * 
    * Methode permettant d'initialiser le service de recherche dans la corbeille
    * 
    * @param dfceService
    *           Service de connection vers DFCe
    * @param dfceConnection
    * @param keyspace
    */

   private void initSearchingService(ServiceProvider dfceService,
         DFCEConnection dfceConnection, Keyspace keyspace) {

      // Instantiation du SaeMetadataDao
      SaeMetadataDao metaDao = new SaeMetadataDao(keyspace);

      // Instantiation du SaeMetadataSupport
      SaeMetadataSupport metaSupport = new SaeMetadataSupport(metaDao);

      MetadataReferenceDAO metaRefDao = new MetadataReferenceDAOImpl(
            configurationBean.getMetadataCache(),
            configurationBean.isMetadataInitCacheOnStartup(), metaSupport);

      MappingDocumentServiceImpl mappingService = new MappingDocumentServiceImpl();
      mappingService.setReferenceDAO(metaRefDao);
      StorageDocumentServiceSupport storageDocumentServiceSupport = new StorageDocumentServiceSupport();
      connexionServiceProvider = new ConnexionServiceProvider();
      connexionServiceProvider.addServiceProvider(dfceConnection, dfceService);

      searchingService = new SearchingServiceImpl();
      searchingService.setCnxParameters(dfceConnection);
      searchingService.setConnexionServiceProvider(connexionServiceProvider);
      searchingService.setReferenceDAO(metaRefDao);
      searchingService.setMappingService(mappingService);
      searchingService
            .setStorageDocumentServiceSupport(storageDocumentServiceSupport);
   }
}
