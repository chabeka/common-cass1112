package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Component;

import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunDocumentException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDocument;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDonneesRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeResultatRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.SaeStubUtils;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ListeMetadonneeCodeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeCodeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.Recherche;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RechercheRequestType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RechercheResponseType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RequeteRechercheType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ResultatRechercheType;
import fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.MetadonneesComparateur;

/**
 * Classe implémentant le service Rechercher Service Ce service permet de
 * realiser des opérations de recherche sur un ou plusieurs document
 * 
 */
@Component
public class RechercherServiceImpl implements RechercherService {

   /**
    * Renvoie la liste des documents satisfaisants à la requête lucène passée en
    * paramètre
    * 
    * @param requeteLucene
    *           Requête permettant de déterminer quels sont les documents à
    *           renvoyer
    * @param codes
    *           Liste des codes de métadonnées voulues à l'affichage
    * @param urlServiceWeb
    *           l'url du web service de la configuration choisie
    * @return Informations sur les documents satisfaisant à la requête lucène
    * 
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur technique
    * @throws AucunDocumentException
    *            Excpetion levée lorsque la recherche ne renvoie aucun document
    */
   @Override
   public final SaeResultatRecherche rechercherDocuments(String requeteLucene,
         List<String> codes, String urlServiceWeb)
         throws ErreurTechniqueException, AucunDocumentException {

      SaeStubUtils ssu = new SaeStubUtils();
      SaeServiceStub stub = ssu.getStub(urlServiceWeb);

      RechercheRequestType requestType = new RechercheRequestType();

      // Requête Lucène
      RequeteRechercheType requete = new RequeteRechercheType();
      requete.setRequeteRechercheType(requeteLucene);
      requestType.setRequete(requete);

      // Métadonnées à afficher en retour
      MetadonneeCodeType[] tabMetaCodeType = null;
      if (codes != null) {
         tabMetaCodeType = new MetadonneeCodeType[codes.size()];
         int i = 0;
         for (String codeMeta : codes) {
            MetadonneeCodeType metaCodeType = new MetadonneeCodeType();
            metaCodeType.setMetadonneeCodeType(codeMeta);
            tabMetaCodeType[i] = metaCodeType;
            i++;
         }
      }
      ListeMetadonneeCodeType listeMeta = new ListeMetadonneeCodeType();
      listeMeta.setMetadonneeCode(tabMetaCodeType);
      requestType.setMetadonnees(listeMeta);

      // Lancement de la recherche
      Recherche recherche2 = new Recherche();
      recherche2.setRecherche(requestType);
      RechercheResponseType reponse;
      try {
         reponse = stub.recherche(recherche2).getRechercheResponse();

         ResultatRechercheType[] resultats = reponse.getResultats()
               .getResultat();

         if (resultats == null) {
            throw new AucunDocumentException();
         }

         boolean tronque = reponse.getResultatTronque();

         List<SaeDonneesRecherche> listeDonneesRech = new ArrayList<SaeDonneesRecherche>();
         for (ResultatRechercheType resRechType : resultats) {

            MetadonneeType[] mt = resRechType.getMetadonnees().getMetadonnee();

            List<Metadonnee> metadonnees = new ArrayList<Metadonnee>();
            for (int j = 0; j < mt.length; j++) {
               Metadonnee meta = new Metadonnee(mt[j].getCode()
                     .getMetadonneeCodeType(), mt[j].getValeur()
                     .getMetadonneeValeurType(), "");
               metadonnees.add(meta);
            }

            String idArchivage = resRechType.getIdArchive().getUuidType();
            UUID uuid = UUID.fromString(idArchivage);

            // Tri des métadonnées par ordre alphbétique du code
            Collections.sort(metadonnees, new MetadonneesComparateur());

            SaeDonneesRecherche sdr = new SaeDonneesRecherche(metadonnees, uuid);
            listeDonneesRech.add(sdr);
         }
         return new SaeResultatRecherche(listeDonneesRech, tronque);
      } catch (RemoteException e) {
         throw new ErreurTechniqueException(e.getMessage());
      }
   }

   /**
    * Renvoie le document associé à l'uuid passé en paramètre
    * 
    * @param uuid
    *           Identifiant unique du document à chercher
    * @param codes
    *           Liste des codes de métadonnées voulues à l'affichage
    * 
    * @return Document recherché
    * 
    * @throws AucunDocumentException
    *            Exception levée lorsqu'aucun document n'est trouvé
    * @throws ErreurTechniqueException
    *            Exception levée lors d'une erreur technique
    */
   @Override
   public final SaeDocument consulterDocument(UUID uuid, List<String> codes)
         throws AucunDocumentException, ErreurTechniqueException {
      // TODO Auto-generated method stub
      return null;
   }

}
