package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.JournauxForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ChainageDisplay;
import fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay;
import fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService;
import fr.urssaf.image.sae.trace.model.JournalType;

/**
 * Classe permettant de centraliser les opérations utilisateur pour les journaux
 * 
 * 
 */
@Controller
public class JournauxController {

   @Autowired
   private JournauxService journauxService;

   private static final String NOM_FORMULAIRE = "journauxForm";

   /**
    * Initialisation de l'écran de recherche des journaux
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            Exception
    */
   @RequestMapping(value = "consulterJournaux", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      JournauxForm form = new JournauxForm();

      // Date du jour par défaut
      Date dateDebut = new Date();
      Date dateFin = new Date();
      form.setDateDebut(dateDebut);
      form.setDateFin(dateFin);
      // Recherche par dates par défaut
      form.setModeRecherche("parDates");

      model.addAttribute(NOM_FORMULAIRE, form);

      return "consulterJournaux";

   }

   /**
    * Lancement de la recherche des journaux
    * 
    * @param journauxForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param response
    *           La réponse
    * @return La page à afficher
    */
   @SuppressWarnings("PMD.AvoidDuplicateLiterals")
   @RequestMapping(value = "lancerConsultJournaux")
   public final String rechercher(
         @ModelAttribute(NOM_FORMULAIRE) @Valid JournauxForm journauxForm,
         BindingResult result, HttpSession session, HttpServletRequest request,
         HttpServletResponse response) {

      if (!result.hasFieldErrors()) {

         try {
            // Récupération de l'uuid du document
            UUID documentUuid = journauxForm.getDocumentUuid();
            // Récupération de la date de début
            Date dateDebut = journauxForm.getDateDebut();
            // Récupération de la date de fin
            Date dateFin = journauxForm.getDateFin();
            // Récupération du type de journal
            JournalType journalType = journauxForm.getJournalType();
            // Vérification du chainage
            boolean verifChainage = journauxForm.isVerifieChainage();
            // Récupération du mode de recherche
            String modeRecherche = journauxForm.getModeRecherche();

            // Récupération de la configuration choisie
            String nomConf = (String) session.getAttribute("nomConfiguration");
            DFCEConnection dfceConnection = (DFCEConnection) session
                  .getServletContext().getAttribute(nomConf + "-dfce");
            String nomBase = (String) session.getServletContext().getAttribute(
                  nomConf + "-base");

            if ("parIdentifiant".equals(modeRecherche)) {
               if (journalType.equals(JournalType.JOURNAL_CYCLE_VIE)) {

                  List<JournalDisplay> listeJournaux = journauxService
                        .rechercherJournauxDocument(documentUuid,
                              dfceConnection);

                  request.setAttribute("listeJournaux", listeJournaux);

               } else {
                  ObjectError erreur = new ObjectError(NOM_FORMULAIRE,
                        "Le type de journal est incorrect");
                  result.addError(erreur);
               }

            } else if ("parDates".equals(modeRecherche)) {
               if (journalType.equals(JournalType.JOURNAL_EVENEMENT_DFCE)) {

                  List<JournalDisplay> listeJournaux = journauxService
                        .rechercherJournauxEvenementDfce(dateDebut, dateFin,
                              dfceConnection);

                  request.setAttribute("listeJournaux", listeJournaux);
               } else if (journalType.equals(JournalType.JOURNAL_CYCLE_VIE)) {
                  List<JournalDisplay> listeJournaux = journauxService
                        .rechercherJournauxCycleVie(dateDebut, dateFin,
                              dfceConnection);

                  request.setAttribute("listeJournaux", listeJournaux);
               } else if (journalType.equals(JournalType.JOURNAL_EVENEMENT_SAE)) {

                  List<JournalDisplay> listeJournaux = journauxService
                        .rechercherJournauxEvenementSae(dateDebut, dateFin,
                              dfceConnection, nomBase);

                  request.setAttribute("listeJournaux", listeJournaux);
               } else {
                  ObjectError erreur = new ObjectError(NOM_FORMULAIRE,
                        "Le type de journal est incorrect");
                  result.addError(erreur);
               }
            }

            // Si la vérification du chainage est activé
            if (verifChainage
                  && (journalType.equals(JournalType.JOURNAL_EVENEMENT_DFCE) || journalType
                        .equals(JournalType.JOURNAL_CYCLE_VIE))) {
               List<ChainageDisplay> listeChainages = journauxService
                     .verifierChainage(dateDebut, dateFin, journalType,
                           dfceConnection);
               request.setAttribute("listeChainages", listeChainages);

            }

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);
         }

      }

      return "consulterJournaux";
   }

   /**
    * Récupération du contenu du journal dont l'identifiant est passé en
    * paramètre
    * 
    * @param session
    *           La session
    * @param response
    *           La réponse
    * @param journalUuid
    *           L'identifiant unique du journal
    * @param listeJournalType
    *           Le type du journal
    * @param nomFichier
    *           Le nom du fichier contenant le journal
    * @throws IOException
    *            Exception levée
    */
   @RequestMapping(value = "contenuJournal")
   public final void chargerContenuJournal(HttpSession session,
         HttpServletResponse response, String journalUuid,
         String listeJournalType, String nomFichier) throws IOException {

      // Récupération de l'uuid du journal
      UUID uuid = UUID.fromString(journalUuid);

      JournalType type = JournalType.valueOf(listeJournalType);

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      DFCEConnection dfceConnection = (DFCEConnection) session
            .getServletContext().getAttribute(nomConf + "-dfce");
      String nomBase = (String) session.getServletContext().getAttribute(
            nomConf + "-base");

      byte[] journal = null;

      if (type.equals(JournalType.JOURNAL_EVENEMENT_DFCE)
            || type.equals(JournalType.JOURNAL_CYCLE_VIE)) {

         journal = journauxService.recupererContenuJournalDfce(uuid,
               dfceConnection);

      } else if (type.equals(JournalType.JOURNAL_EVENEMENT_SAE)) {
         journal = journauxService.recupererContenuJournalSae(uuid,
               dfceConnection, nomBase);

      }

      if (journal != null) {
         // Affichage du fichier
         response.setContentType("application/pdf");

         String nom = "";
         if (StringUtils.isBlank(nomFichier)) {
            nom = journauxService.getNomJournalDfce(uuid, dfceConnection);
         } else {
            nom = nomFichier;
         }

         response.setHeader("Content-Disposition", "attachment; filename=\""
               + nom + "\"");

         ServletOutputStream outputStream = response.getOutputStream();

         outputStream.write(journal);

         outputStream.flush();
         outputStream.close();
      }

   }

}
