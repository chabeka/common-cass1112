package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.apache.axis2.databinding.utils.BeanUtil;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import fr.urssaf.image.sae.droit.dao.model.Pagm;
import fr.urssaf.image.sae.droit.dao.model.Prmd;
import fr.urssaf.image.sae.droit.dao.model.ServiceContract;
import fr.urssaf.image.sae.droit.dao.model.ServiceContractDatas;
import fr.urssaf.image.sae.ihm.web.exploit.droit.CsType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.DroitType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PagmaType;
import fr.urssaf.image.sae.ihm.web.exploit.droit.PrmdType;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterCsForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ContratServiceConsultation;
import fr.urssaf.image.sae.ihm.web.exploit.service.ContratServiceService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.ContratServiceServiceImpl;

/**
 * Classe permettant de gérer les dictionnaires
 * 
 * 
 */
@Controller
public class ContratServiceController {

   /**
    * Interface permettant de réaliser les opérations sur les dictionnaires
    */

   private static final String NOM_FORMULAIRE = "csForm";

   @Autowired
   private ConfigurationsEnvironnement config;

   // Nombre de ligne à afficher dans le tableau de résultats
   private static final int NB_LIGNE_TABLEAU = 50;

   /**
    * Initialisation de l'écran de consultation des dictionnaires
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            Exception
    */
   @RequestMapping(value = "consulterCs", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);
      ContratServiceService csService = new ContratServiceServiceImpl(keyspace, config
            .getConfiguration(nomConf));

      ConsulterCsForm form = new ConsulterCsForm();
      form.setNbLignesTableau(NB_LIGNE_TABLEAU);
      form.setModeRecherche("modeTous");
      model.addAttribute(NOM_FORMULAIRE, form);

      request.setAttribute("listeCs", getallCs(NB_LIGNE_TABLEAU, csService));

      return "consulterCs";

   }

   /**
    * Initialisation de l'écran d'ajout d'un Dictionnaires
    * 
    * @param model
    * @param session
    * @param request
    * @return nom de la vue
    * @throws InterruptedException
    */
   @RequestMapping(value = "ajoutCs", method = RequestMethod.GET)
   public final String initialisationAjoutCs(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      ConsulterCsForm form = new ConsulterCsForm();
      form.setAjout(Boolean.TRUE);
      form.setModification(Boolean.FALSE);
      model.addAttribute(NOM_FORMULAIRE, form);

      return "gestionCs";

   }

   /**
    * Lancement de la recherche des metadonnées
    * 
    * @param metaForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return La page à afficher
    */
   @RequestMapping(value = "lancerConsultCs")
   public final String rechercherDico(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterCsForm csForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {

         try {
            // Récupération de la configuration choisie
            String nomConf = (String) session.getAttribute("nomConfiguration");
            Keyspace keyspace = (Keyspace) session.getServletContext()
                  .getAttribute(nomConf);
            ContratServiceService csService = new ContratServiceServiceImpl(keyspace, config
                  .getConfiguration(nomConf));

            // Nombre de ligne max du tableau de résultat
            if (csForm.getNbLignesTableau() == 0) {
               csForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
               request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
            } else {
               request.setAttribute("nbLignesTableau", csForm
                     .getNbLignesTableau());
            }
            if ("modeTous".equals(csForm.getModeRecherche())) {

               request.setAttribute("listeCs", getallCs(NB_LIGNE_TABLEAU, csService));
            }
            if ("modeIdentifiant".equals(csForm.getModeRecherche())) {
               if (!StringUtils.isEmpty(csForm.getIdentifiant())) {

                  request.setAttribute("listeCs",
                        getCs(csForm.getIdentifiant(), csService));
               }

            }

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);
         }

      }

      return "consulterCs";
   }

   /**
    * Récupération du détail d'un dictionnaire
    * 
    * @param csForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param identifiant
    *           identifiant du dictionnaire
    * @return La page à afficher
    */
   @RequestMapping(value = "detailCs")
   public final String afficherDetailDico(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterCsForm csForm,
         BindingResult result,
         HttpSession session,
         HttpServletRequest request,
         @RequestParam(value = "identifiant", required = true) String identifiant) {

      if (!result.hasFieldErrors()) {

         // Récupération de la configuration choisie
         String nomConf = (String) session.getAttribute("nomConfiguration");
         Keyspace keyspace = (Keyspace) session.getServletContext()
               .getAttribute(nomConf);
         ContratServiceService csService = new ContratServiceServiceImpl(keyspace, config
               .getConfiguration(nomConf));

         // Colonnes à afficher suivant les types d'affichage
         ServiceContractDatas fullCs = csService.findCompleteCs(identifiant);
         
         // transformation des infos du contrat de service
         CsType cs = new CsType();
         cs.setIssuer(fullCs.getCodeClient());
         cs.setDescription(fullCs.getDescription());
         
         // transformation des infos du PRMD
         List<PrmdType> listePrmd = new ArrayList<PrmdType>();
         for (Prmd p : fullCs.getPrmds()) {
            PrmdType prmd = new PrmdType();
            try {
               BeanUtils.copyProperties(prmd, p);
            } catch (IllegalAccessException e) {
               ObjectError error = new ObjectError(NOM_FORMULAIRE, e
                     .getMessage());
               result.addError(error);
            } catch (InvocationTargetException e) {
               ObjectError error = new ObjectError(NOM_FORMULAIRE, e
                     .getMessage());
               result.addError(error);
            }
            listePrmd.add(prmd);
         }


         request.setAttribute("detailCs", fullCs);
         
         csForm.setModification(Boolean.TRUE);
         csForm.setAjout(Boolean.FALSE);

      }
      return "gestionCs";

   }

   /**
    * réalisation de l'ajout ou de la modification d'un dictionnaire
    * 
    * @param metaForm
    * @param result
    * @param session
    * @param request
    * @return {@link RedirectView}
    */
   @RequestMapping(value = "gestionCs")
   public final String gestionMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterCsForm csForm,
         BindingResult result,
         HttpSession session,
         HttpServletRequest request,
         @RequestParam(value = "action", defaultValue = StringUtils.EMPTY) String action) {

      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);
      ContratServiceService csService = new ContratServiceServiceImpl(keyspace, config
            .getConfiguration(nomConf));
      DroitType droitType = null;
      if ("ajouter".equals(action)) {
         DroitType dd = (DroitType) request.getSession().getAttribute(
               csForm.getDroit());
         csService.creationDesDroits(dd);
         csForm.setMessage("Le contrat de service à bien été créée");
         csForm.setAjout(Boolean.FALSE);
         csForm.setStore(Boolean.FALSE);
         return "gestionCs";
      }

      if ("charger".equals(action)) {
         if (null == csForm.getFile()) {
            ObjectError error = new ObjectError(NOM_FORMULAIRE,
                  "Veuillez sélectionner un fichier");
            result.addError(error);
         }
         try {
            droitType = csService.chargeFichierXml(csForm.getFile()
                  .getInputStream());
         } catch (IOException e) {
            ObjectError error = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(error);
         }

         String myObjectId = UUID.randomUUID().toString();
         request.getSession().setAttribute(myObjectId, droitType);

         csForm.setDroit(myObjectId);
         request.setAttribute("droitCs", droitType.getListeCs().getCs());
         request.setAttribute("droitPrmd", droitType.getListePrmd().getPrmd());
         request.setAttribute("droitPagm", droitType.getListeAjoutPagm()
               .getAjoutPagm());
         csForm.setAjout(Boolean.TRUE);
         csForm.setStore(Boolean.TRUE);
         csForm.setModification(Boolean.FALSE);
      }

      return "gestionCs";
      // return new RedirectView("detailDico.do?identifiant=".concat(dicoModifie
      // .getId()));
   }

   private List<ContratServiceConsultation> getallCs(int maxResult, ContratServiceService csService ) {
      List<ServiceContract> listCs = csService.findAllCs(maxResult);
      List<ContratServiceConsultation> listCsConsult = new ArrayList<ContratServiceConsultation>();
      for (ServiceContract cs : listCs) {
         ContratServiceConsultation csConsult = new ContratServiceConsultation(
               cs, csService.findPagmForCs(cs.getCodeClient()));
         listCsConsult.add(csConsult);
      }

      // on trie les contrats de services en fonction de leur code client
      Comparator<ContratServiceConsultation> comparator = new Comparator<ContratServiceConsultation>() {
         @Override
         public int compare(ContratServiceConsultation cs1,
               ContratServiceConsultation cs2) {

            return cs1.getContratService().getCodeClient().compareTo(
                  cs2.getContratService().getCodeClient());

         }
      };

      Collections.sort(listCsConsult, comparator);
      return listCsConsult;

   }

   private ContratServiceConsultation getCs(String identifiant, ContratServiceService csService) {

      ServiceContract cs = csService.findCs(identifiant);
      ContratServiceConsultation csConsult = new ContratServiceConsultation(cs,
            csService.findPagmForCs(cs.getCodeClient()));
      return csConsult;
   }

}
