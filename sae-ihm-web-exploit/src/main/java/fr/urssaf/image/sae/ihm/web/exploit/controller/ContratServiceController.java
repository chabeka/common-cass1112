package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import com.netflix.curator.framework.CuratorFramework;

import fr.urssaf.image.sae.droit.exception.ContratServiceReferenceException;
import fr.urssaf.image.sae.droit.model.SaeContratService;
import fr.urssaf.image.sae.ihm.web.exploit.droit.DroitType;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterCsForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.ContratServiceService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.ContratServiceServiceImpl;

/**
 * Classe permettant de gérer les dictionnaires
 * 
 * 
 */
@Controller
public class ContratServiceController {

   /**
    * Interface permettant de réaliser les opérations sur les dictionnaires
    */

   private static final String NOM_FORMULAIRE = "csForm";

   @Autowired
   private ConfigurationsEnvironnement config;

   // Nombre de ligne à afficher dans le tableau de résultats
   private static final int NB_LIGNE_TABLEAU = 50;

   /**
    * Initialisation de l'écran de consultation des CS
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            Exception
    */
   @RequestMapping(value = "consulterCs", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);
      CuratorFramework curator = (CuratorFramework) session.getServletContext()
            .getAttribute(nomConf + "-zookeeper");
      ContratServiceService csService = new ContratServiceServiceImpl(keyspace,
            config.getConfiguration(nomConf), curator);

      ConsulterCsForm form = new ConsulterCsForm();
      form.setNbLignesTableau(NB_LIGNE_TABLEAU);
      form.setModeRecherche("modeTous");
      model.addAttribute(NOM_FORMULAIRE, form);

      List<SaeContratService> listeCs = getallCs(NB_LIGNE_TABLEAU, csService);
      request.setAttribute("listeCs", listeCs);

      return "consulterCs";

   }

   /**
    * Initialisation de l'écran d'ajout d'un CS
    * 
    * @param model
    *           Le modèle
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return nom de la vue
    */
   @RequestMapping(value = "ajoutCs", method = RequestMethod.GET)
   public final String initialisationAjoutCs(Model model, HttpSession session,
         HttpServletRequest request) {

      ConsulterCsForm form = new ConsulterCsForm();
      form.setAjout(Boolean.TRUE);
      form.setModification(Boolean.FALSE);
      model.addAttribute(NOM_FORMULAIRE, form);

      return "gestionCs";

   }

   /**
    * Lancement de la consultation des CS
    * 
    * @param csForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return La page à afficher
    */
   @RequestMapping(value = "lancerConsultCs")
   public final String rechercherCS(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterCsForm csForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {

         try {
            // Récupération de la configuration choisie
            String nomConf = (String) session.getAttribute("nomConfiguration");
            Keyspace keyspace = (Keyspace) session.getServletContext()
                  .getAttribute(nomConf);
            CuratorFramework curator = (CuratorFramework) session
                  .getServletContext().getAttribute(nomConf + "-zookeeper");
            ContratServiceService csService = new ContratServiceServiceImpl(
                  keyspace, config.getConfiguration(nomConf), curator);

            // Nombre de ligne max du tableau de résultat
            if (csForm.getNbLignesTableau() == 0) {
               csForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
               request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
            } else {
               request.setAttribute("nbLignesTableau", csForm
                     .getNbLignesTableau());
            }
            if ("modeTous".equals(csForm.getModeRecherche())) {

               request.setAttribute("listeCs", getallCs(NB_LIGNE_TABLEAU,
                     csService));
            }
            if ("modeIdentifiant".equals(csForm.getModeRecherche())) {
               if (!StringUtils.isEmpty(csForm.getIdentifiant())) {

                  try {
                     request.setAttribute("listeCs", getCs(csForm
                           .getIdentifiant(), csService));
                  } catch (ContratServiceReferenceException e) {
                     ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e
                           .getMessage());
                     result.addError(erreur);

                     StringWriter sw = new StringWriter();
                     PrintWriter pw = new PrintWriter(sw);
                     e.printStackTrace(pw);
                     String stacktrace = sw.toString();
                     request.setAttribute("stacktrace", stacktrace);

                  }
               }

            }

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);
         }

      }

      return "consulterCs";
   }

   /**
    * Récupération du détail d'un CS
    * 
    * @param csForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param identifiant
    *           identifiant du CS
    * @return La page à afficher
    */
   @RequestMapping(value = "detailCs")
   public final String afficherDetailCS(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterCsForm csForm,
         BindingResult result,
         HttpSession session,
         HttpServletRequest request,
         @RequestParam(value = "identifiant", required = true) String identifiant) {

      if (!result.hasFieldErrors()) {

         // Récupération de la configuration choisie
         String nomConf = (String) session.getAttribute("nomConfiguration");
         Keyspace keyspace = (Keyspace) session.getServletContext()
               .getAttribute(nomConf);
         CuratorFramework curator = (CuratorFramework) session
               .getServletContext().getAttribute(nomConf + "-zookeeper");
         ContratServiceService csService = new ContratServiceServiceImpl(
               keyspace, config.getConfiguration(nomConf), curator);

         SaeContratService fullCs = csService.findCs(identifiant);

         request.setAttribute("detailCs", fullCs);

         csForm.setModification(Boolean.TRUE);
         csForm.setAjout(Boolean.FALSE);

      }
      return "gestionCs";

   }

   /**
    * réalisation de l'ajout ou de la modification d'un CS
    * 
    * @param csForm
    *           Le formulaire
    * @param result
    *           Le résultat
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param action
    *           L'action à réaliser (ajouter ou charger)
    * @return {@link RedirectView}
    * @throws ErreurTechniqueException
    *            Exception levée si pb technique
    */
   @RequestMapping(value = "gestionCs")
   public final String gestionCS(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterCsForm csForm,
         BindingResult result,
         HttpSession session,
         HttpServletRequest request,
         @RequestParam(value = "action", defaultValue = StringUtils.EMPTY) String action)
         throws ErreurTechniqueException {

      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);
      CuratorFramework curator = (CuratorFramework) session.getServletContext()
            .getAttribute(nomConf + "-zookeeper");
      ContratServiceService csService = new ContratServiceServiceImpl(keyspace,
            config.getConfiguration(nomConf), curator);
      DroitType droitType = null;
      if ("ajouter".equals(action)) {
         DroitType dd = (DroitType) request.getSession().getAttribute(
               csForm.getDroit());

         try {
            List<String> retourCreation = csService.creationDesDroits(dd);
            csForm.setMessage(retourCreation);
            csForm.setAjout(Boolean.FALSE);
            csForm.setStore(Boolean.FALSE);
            csForm.setModeCreation("modeLoad");
         } catch (Exception e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);

         }
         return "gestionCs";
      }

      if ("charger".equals(action)) {
         if (csForm.getFile().getSize() == 0) {
            ObjectError error = new ObjectError(NOM_FORMULAIRE,
                  "Veuillez sélectionner un fichier");
            result.addError(error);
         } else {
            try {
               droitType = csService.chargeFichierXml(csForm.getFile()
                     .getInputStream());

               String myObjectId = UUID.randomUUID().toString();
               request.getSession().setAttribute(myObjectId, droitType);

               csForm.setDroit(myObjectId);
               request.setAttribute("droitCs", droitType.getListeCs().getCs());
               request.setAttribute("droitPrmd", droitType.getListePrmd()
                     .getPrmd());

               if (droitType.getListeFormatControlProfil() != null) {
                  request
                        .setAttribute("formatControlProfil", droitType
                              .getListeFormatControlProfil()
                              .getFormatControlProfil());
               }
               if (droitType.getListeAjoutPagm() != null) {
                  request.setAttribute("droitAjoutPagm", droitType
                        .getListeAjoutPagm().getAjoutPagm());
               }
               if (droitType.getListeModifPagm() != null) {
                  request.setAttribute("droitModifPagm", droitType
                        .getListeModifPagm().getModifPagm());
               }
               if (droitType.getListeSuppPagm() != null) {
                  request.setAttribute("droitSuppPagm", droitType
                        .getListeSuppPagm().getSuppPagm());
               }
               if (droitType.getListeModifPrmd() != null) {
                  request.setAttribute("droitModifPrmd", droitType
                        .getListeModifPrmd().getPrmd());
               }
               if (droitType.getListeModifFormatControlProfil() != null) {
                  request.setAttribute("droitModifFormatControlProfil",
                        droitType.getListeModifFormatControlProfil()
                              .getFormatControlProfil());
               }
               csForm.setAjout(Boolean.TRUE);
               csForm.setStore(Boolean.TRUE);
               csForm.setModification(Boolean.FALSE);

            } catch (Exception e) {
               String message = e.getMessage();
               ObjectError erreur = new ObjectError(NOM_FORMULAIRE, message);
               result.addError(erreur);

               StringWriter sw = new StringWriter();
               PrintWriter pw = new PrintWriter(sw);
               e.printStackTrace(pw);
               String stacktrace = sw.toString();
               request.setAttribute("stacktrace", stacktrace);
            }

         }
         csForm.setModeCreation("modeLoad");
      }

      if (StringUtils.isEmpty(action)) {
         csForm.setModeCreation("modeLoad");
      }

      return "gestionCs";

   }

   private List<SaeContratService> getallCs(int maxResult,
         ContratServiceService csService) {
      List<SaeContratService> listCs = csService.findAllCs(maxResult);

      // on trie les contrats de services en fonction de leur code client
      Comparator<SaeContratService> comparator = new Comparator<SaeContratService>() {
         @Override
         public int compare(SaeContratService cs1, SaeContratService cs2) {

            return cs1.getCodeClient().compareTo(cs2.getCodeClient());

         }
      };

      Collections.sort(listCs, comparator);
      return listCs;

   }

   private SaeContratService getCs(String identifiant,
         ContratServiceService csService) {

      SaeContratService cs = csService.findCs(identifiant);

      return cs;
   }

}
