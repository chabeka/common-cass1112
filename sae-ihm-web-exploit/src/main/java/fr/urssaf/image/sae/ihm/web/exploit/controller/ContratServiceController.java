package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.cassandra.io.util.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.curator.framework.CuratorFramework;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import com.google.common.io.Files;

import fr.urssaf.image.commons.cassandra.helper.CassandraClientFactory;
import fr.urssaf.image.commons.cassandra.helper.CassandraServerBean;
import fr.urssaf.image.sae.droit.exception.ContratServiceReferenceException;
import fr.urssaf.image.sae.droit.model.SaeContratService;
import fr.urssaf.image.sae.ihm.web.exploit.droit.DroitType;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.factory.ObjectFactory;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterCsForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.ContratServiceService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.ContratServiceServiceImpl;
import me.prettyprint.hector.api.Keyspace;

/**
 * Classe permettant de gérer les contrats de service
 */
@Controller
public class ContratServiceController {

  private static final String SELECTIONNEZ_UN_ENVIRONNEMENT = "Selectionnez un environnement";

/**
   * Interface permettant de réaliser les opérations sur les contrats de
   * service
   */

  private static final String NOM_FORMULAIRE = "csForm";

  @Autowired
  private ConfigurationsEnvironnement config;

  // Nombre de ligne à afficher dans le tableau de résultats
  private static final int NB_LIGNE_TABLEAU = 50;
  private static final int NB_LIGNE_TABLEAU_IMPORT_CS = 100;

  // Nbre de clé max à retourner pour les contrats de service
  private static final int NB_CLE_MAX_CS = 5000;

  /**
   * Initialisation de l'écran de consultation des CS
   * 
   * @param model
   *          le modèle
   * @param session
   *          la session
   * @param request
   *          la requête
   * @return la page à afficher
   * @throws InterruptedException
   *           Exception
   */
  @RequestMapping(value = "consulterCs", method = RequestMethod.GET)
  public final String initialisation(final Model model, final HttpSession session,
                                     final HttpServletRequest request)
      throws InterruptedException {

    try {
      // Récupération de la configuration choisie
      final String nomConf = (String) session.getAttribute("nomConfiguration");
      final Keyspace keyspace = (Keyspace) session.getServletContext()
                                                  .getAttribute(nomConf);
      final CuratorFramework curator = (CuratorFramework) session
                                                                 .getServletContext()
                                                                 .getAttribute(nomConf + "-zookeeper");
      final ContratServiceService csService = new ContratServiceServiceImpl(
                                                                            keyspace,
                                                                            config.getConfiguration(nomConf),
                                                                            curator);

      final ConsulterCsForm form = new ConsulterCsForm();
      form.setNbLignesTableau(NB_LIGNE_TABLEAU);
      form.setModeRecherche("modeTous");
      model.addAttribute(NOM_FORMULAIRE, form);
      request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);

      final List<SaeContratService> listeCs = getallCs(NB_CLE_MAX_CS, csService);
      request.setAttribute("listeCs", listeCs);

    }
    catch (final Exception e) {

      final StringWriter sw = new StringWriter();
      final PrintWriter pw = new PrintWriter(sw);
      e.printStackTrace(pw);
      final String stacktrace = sw.toString();
      request.setAttribute("stacktrace", stacktrace);

    }

    return "consulterCs";

  }

  /**
   * Initialisation de l'écran d'ajout d'un CS
   * 
   * @param model
   *          Le modèle
   * @param session
   *          La session
   * @param request
   *          La requête
   * @return nom de la vue
   */
  @RequestMapping(value = "ajoutCs", method = RequestMethod.GET)
  public final String initialisationAjoutCs(final Model model, final HttpSession session,
                                            final HttpServletRequest request) {

    final ConsulterCsForm form = new ConsulterCsForm();
    form.setAjout(Boolean.TRUE);
    form.setModification(Boolean.FALSE);
    model.addAttribute(NOM_FORMULAIRE, form);

    return "gestionCs";

  }

  /**
   * Lancement de la consultation des CS
   * 
   * @param csForm
   *          Le formulaire
   * @param result
   *          Gestion des erreurs
   * @param session
   *          La session
   * @param request
   *          La requête
   * @return La page à afficher
   */
  @RequestMapping(value = "lancerConsultCs")
  public final String rechercherCS(
                                   @ModelAttribute(NOM_FORMULAIRE) @Valid final ConsulterCsForm csForm,
                                   final BindingResult result, final HttpSession session, final HttpServletRequest request) {

    if (!result.hasFieldErrors()) {

      try {
        // Récupération de la configuration choisie
        final String nomConf = (String) session.getAttribute("nomConfiguration");
        final Keyspace keyspace = (Keyspace) session.getServletContext()
                                                    .getAttribute(nomConf);
        final CuratorFramework curator = (CuratorFramework) session
                                                                   .getServletContext()
                                                                   .getAttribute(nomConf + "-zookeeper");
        final ContratServiceService csService = new ContratServiceServiceImpl(
                                                                              keyspace,
                                                                              config.getConfiguration(nomConf),
                                                                              curator);

        // Nombre de ligne max du tableau de résultat
        if (csForm.getNbLignesTableau() == 0) {
          csForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
          request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
        } else {
          request.setAttribute("nbLignesTableau",
                               csForm.getNbLignesTableau());
        }
        if ("modeTous".equals(csForm.getModeRecherche())) {

          request.setAttribute("listeCs",
                               getallCs(NB_CLE_MAX_CS, csService));
        }
        if ("modeIdentifiant".equals(csForm.getModeRecherche())) {
          if (!StringUtils.isEmpty(csForm.getIdentifiant())) {

            try {
              request.setAttribute("listeCs",
                                   getCs(csForm.getIdentifiant(), csService));
            }
            catch (final ContratServiceReferenceException e) {
              final ObjectError erreur = new ObjectError(NOM_FORMULAIRE,
                                                         e.getMessage());
              result.addError(erreur);

              final StringWriter sw = new StringWriter();
              final PrintWriter pw = new PrintWriter(sw);
              e.printStackTrace(pw);
              final String stacktrace = sw.toString();
              request.setAttribute("stacktrace", stacktrace);

            }
          }

        }

      }
      catch (final IllegalArgumentException e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);

        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);
      }
      catch (final Exception e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);

        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);

      }

    }

    return "consulterCs";
  }

  @RequestMapping(value = "telechargerCs")
  public final void telecharger(@ModelAttribute("csForm") @Valid final ConsulterCsForm form,
		  HttpSession session, HttpServletRequest request,
          HttpServletResponse response, String[] codeCsToImport)
              throws IOException {

    // Si Action d'export de CS
    List<SaeContratService> listSaeCsToExp = new ArrayList<>();
    final ConfigurationEnvironnement configSession = config.getConfiguration((String) session.getAttribute("nomConfiguration"));
    File directory = null;
	try {
		Keyspace keyspaceConfigSession = getKeyspaceCassandra(configSession);	
	     final CuratorFramework curatorConfigSession = (CuratorFramework) session
	                                                                             .getServletContext()
	                                                                             .getAttribute((String) session.getAttribute("nomConfiguration") + "-zookeeper");
	     final ContratServiceService csServiceSession = new ContratServiceServiceImpl(
	                                                                                  keyspaceConfigSession,
	                                                                                  configSession,
	                                                                                  curatorConfigSession);
	    
	    List<SaeContratService> listCsToLoad = getallCs(NB_CLE_MAX_CS, csServiceSession);
	   	listSaeCsToExp= getSelectedCSByCode(listCsToLoad, Arrays.asList(codeCsToImport));
  	
		// creation d'un repertoire temporaire pour stocker les fichiers xml des CS
		String path = request.getSession().getServletContext().getRealPath("/")+ "temp" + Calendar.getInstance().getTimeInMillis();
		FileUtils.createDirectory(path);
		directory = new File(path);
		
		// Si export d'un seul contrat de service
		if(listSaeCsToExp.size() == 1) {
			
			SaeContratService saeService = listSaeCsToExp.get(0);
			File file = ObjectFactory.createXMLOfCsOnDisk(path, saeService);
					
			// téléchargement
  	      	response.setContentType("application/octet-stream");
  	      	response.setHeader("Content-Disposition", "attachment; filename=\""
  	            + file.getName() + "\"");
  	      	
            Files.copy(file, response.getOutputStream());
            response.getOutputStream().flush();
           
		} else {
		    // Si plusieurs fichiers
		    // creation d'un fichier xml pour chaque CS
			for(SaeContratService saeService : listSaeCsToExp) {
				ObjectFactory.createXMLOfCsOnDisk(path, saeService);
			}
			
			// on zip le contenu du dossier temporaire qui contient les xml
			// et on envoie
			String[] files = directory.list();
			if (directory != null && files.length > 0) {
				byte[] zip = zipFiles(directory, files);
                ServletOutputStream sos = response.getOutputStream();
                response.setContentType("application/zip");
                response.setHeader("Content-Disposition", "attachment; filename=contratServices.zip");
                sos.write(zip);
                sos.flush();
			}
		}
    } catch (Exception e) {
    	
        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);

    } finally {
    	
	    	if(directory != null) {
	    		try {
			    	FileUtils.deleteRecursive(directory);
					directory.delete();
		    	} catch (Exception e){
		    		final StringWriter sw = new StringWriter();
		            final PrintWriter pw = new PrintWriter(sw);
		            e.printStackTrace(pw);
		            final String stacktrace = sw.toString();
		            request.setAttribute("stacktrace", stacktrace);
		    	}
	    	}	
	}
   	
  }

  /**
   * Initialisation de l'écran d'import des CS
   * 
   * @param model
   *          le modèle
   * @param session
   *          la session
   * @param request
   *          la requête
   * @return la page à afficher
   * @throws InterruptedException
   *           Exception
   */
  @RequestMapping(value = {"lancerImportCs"})
  public final String loadImportCs(
                                   @ModelAttribute("csForm") @Valid final ConsulterCsForm form,
                                   final BindingResult result,
                                   final HttpSession session, final HttpServletRequest request)
      throws InterruptedException {

	  // Nombre de ligne max du tableau de résultat
	  if (form.getNbLignesTableau() == 0) {
		  form.setNbLignesTableau(NB_LIGNE_TABLEAU_IMPORT_CS);
		  request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU_IMPORT_CS);
	  } else {
	    request.setAttribute("nbLignesTableau", form.getNbLignesTableau());
	  }
      
    //request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU_IMPORT_CS);
    form.setModeRecherche("modeTous");

    // Chargement des environnements dans la liste de selection
    final int indexConfigSession = config.getListeNoms().indexOf(session.getAttribute("nomConfiguration"));
    final List<String> listNomConf = config.getListeNoms();
    listNomConf.remove(indexConfigSession);
    listNomConf.add(0, SELECTIONNEZ_UN_ENVIRONNEMENT);
    
    request.setAttribute("listeNomConf", listNomConf);
    request.setAttribute("nomConfiguration", session.getAttribute("nomConfiguration"));

    // Chargement des codes de CS de l'environnement en cours,
    // pour demander confirmation si import de CS du même code
    final ConfigurationEnvironnement configSession = config
                                                           .getConfiguration((String) session.getAttribute("nomConfiguration"));

    String envCsToLoad = null;

    // Liste des contrats de service à charger dans le tableau
    List<SaeContratService> listCsToLoad = new ArrayList<>();

    List<SaeContratService> listCsToImport = new ArrayList<>();
    // Liste des contrats de service à importer   
    List<String> codeCsToImport = form.getCodeCsToImport();
    Boolean recapImportCs = form.getRecapImportCs();
    
    boolean isListCodeToImport = codeCsToImport != null && !codeCsToImport.isEmpty();
    // Si pas mode import et pas d'environnement selectionné
    if (!isListCodeToImport && (StringUtils.isBlank(form.getEnvCsToImport()) 
    							|| SELECTIONNEZ_UN_ENVIRONNEMENT.equals(form.getEnvCsToImport()))) {

      envCsToLoad = SELECTIONNEZ_UN_ENVIRONNEMENT;
      form.setEnvCsToImport(envCsToLoad);
      form.setRecapImportCs(false);
    } else {
    	try {
			if (!form.getImportAllCs() && isListCodeToImport && !recapImportCs){
				// on affciche le tableau des cs deja existant
				form.setRecapImportCs(true);
				List<String> listCodeCsExistant = new ArrayList<>();
				final List<String> listExistantCodeCs = form.getListCsSession();
				for (String str : codeCsToImport) {
					if (listExistantCodeCs.contains(str)) {
						listCodeCsExistant.add(str);
					}
				}
	
				form.setCodeCsToImport(codeCsToImport);
				request.setAttribute("listCodeCsExistant", listCodeCsExistant);
				request.setAttribute("CodeCsSession", listExistantCodeCs);
			} else if (form.getImportAllCs()){
				// Cas de l'import all
				form.setImportAllCs(false);
				form.setRecapImportCs(true);
				
				// Liste des code dejà présents sur la plateforme
				List<String> listCodeCs = new ArrayList<>();
				final List<String> listCodeCsSession = form.getListCsSession();
				if(form.getListCsToLoadStr() != null) {
					for (String str : form.getListCsToLoadStr()) {
						if (listCodeCsSession.contains(str)) {
							listCodeCs.add(str);
						} 
					}
				}
	
				form.setCodeCsToImport(form.getListCsToLoadStr());
				request.setAttribute("listCodeCsExistant", listCodeCs);
				request.setAttribute("CodeCsSession", listCodeCsSession);
	        }else {
	
				form.setRecapImportCs(false);
				envCsToLoad = form.getEnvCsToImport();
			
			    request.setAttribute("nomEnvAImporter", envCsToLoad);
			    
			      final ConfigurationEnvironnement confSelected = config
			                                                            .getConfiguration(envCsToLoad);
			
			      // Chargement du keyspace de l'environnement choisi
			      final Keyspace keyspaceConfigToLoad = getKeyspaceCassandra(confSelected);
			      final CuratorFramework curatorConfigToLoad = (CuratorFramework) session
			                                                                             .getServletContext()
			                                                                             .getAttribute(envCsToLoad + "-zookeeper");
			      final ContratServiceService csServiceToLoad = new ContratServiceServiceImpl(
			                                                                                  keyspaceConfigToLoad,
			                                                                                  config.getConfiguration(form.getEnvCsToImport()),
			                                                                                  curatorConfigToLoad);
			
			      listCsToLoad = getallCs(NB_CLE_MAX_CS, csServiceToLoad);
			      form.setListCsToLoad(listCsToLoad);
			      List<String> listCsToLoadStr = getListCodeCs(getallCs(NB_CLE_MAX_CS, csServiceToLoad));
			      form.setListCsToLoadStr(listCsToLoadStr);
			
			      // Gérer le chargement des CS pour l'action d'import
			      request.setAttribute("listeCs", form.getListCsToLoad());
			
			      // Changement des codes de CS de la session en cours dans le formulaire,
			      // afin de ne pas les écraser par erreur
			      if (form.getListCsSession() == null || form.getListCsSession().isEmpty()) {
			        // Chargement du keyspace de l'environnement de connexion
			        final Keyspace keyspaceConfigSession = getKeyspaceCassandra(configSession);
			        final CuratorFramework curatorConfigSession = (CuratorFramework) session
			                                                                                .getServletContext()
			                                                                                .getAttribute((String) session.getAttribute("nomConfiguration") + "-zookeeper");
			        final ContratServiceService csServiceSession = new ContratServiceServiceImpl(
			                                                                                     keyspaceConfigSession,
			                                                                                     config.getConfiguration(form.getEnvCsToImport()),
			                                                                                     curatorConfigSession);
			
			        final List<String> listExistantCodeCs = getListCodeCs(getallCs(NB_CLE_MAX_CS, csServiceSession));
			        form.setCodeCsSession(listExistantCodeCs.toString());
			        form.setListCsSession(listExistantCodeCs);
			        request.setAttribute("CodeCsSession", listExistantCodeCs);
			      }
			
			      // Si Action d'import de CS
			      if ("importCs".equals(form.getAction())) {
			
			        if (codeCsToImport != null && !codeCsToImport.isEmpty()) {
			
			          final String nomConf = (String) session.getAttribute("nomConfiguration");
			          final Keyspace keyspace = (Keyspace) session.getServletContext()
			                                                      .getAttribute(
			                                                                    nomConf);
			          final CuratorFramework curator = (CuratorFramework) session.getServletContext()
			                                                                     .getAttribute(nomConf + "-zookeeper");
			          final ContratServiceService csService = new ContratServiceServiceImpl(keyspace,
			                                                                                config.getConfiguration(nomConf),
			                                                                                curator);
			
			          // Filtrer la liste des CS à importer
			          listCsToImport = getSelectedCSByCode(listCsToLoad, codeCsToImport);
			
			          // Importer les CS sélectionnés
			          try {
			            final List<String> retourCreation = csService.creationDesDroits(listCsToImport);
			            form.setMessage(retourCreation);
			            form.setAjout(Boolean.FALSE);
			            form.setStore(Boolean.FALSE);
			            form.setModeCreation("modeLoad");
			            request.setAttribute("importedCSlist", getListCodeCs(listCsToImport));
			          }
			          catch (final Exception e) {
			            final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
			            result.addError(erreur);
			            final StringWriter sw = new StringWriter();
			            final PrintWriter pw = new PrintWriter(sw);
			            e.printStackTrace(pw);
			            final String stacktrace = sw.toString();
			            request.setAttribute("stacktrace", stacktrace);
			
			          }
			        }
			      }
			}
    	}
	    catch (final Exception e) {
	      final StringWriter sw = new StringWriter();
	      final PrintWriter pw = new PrintWriter(sw);
	      e.printStackTrace(pw);
	      final String stacktrace = sw.toString();
	      request.setAttribute("stacktrace", stacktrace);
	    }
	}

    return "importerCs";

  }
  
  @RequestMapping(value = "lancerExportCs")
  public final String lancerExportCs(
								  @ModelAttribute("csForm") @Valid final ConsulterCsForm form,
						          final BindingResult result,
						          final HttpSession session, final HttpServletRequest request, 
						          HttpServletResponse response) {

	
	  // Nombre de ligne max du tableau de résultat
	  if (form.getNbLignesTableau() == 0) {
		  form.setNbLignesTableau(NB_LIGNE_TABLEAU_IMPORT_CS);
		  request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU_IMPORT_CS);
	  } else {
	    request.setAttribute("nbLignesTableau", form.getNbLignesTableau());
	  }
	  
	 // environnement en cours
	final ConfigurationEnvironnement configSession = config.getConfiguration((String) session.getAttribute("nomConfiguration"));
	
	form.setRecapImportCs(false);
	List<SaeContratService> listCsToLoad = new ArrayList<>();
    try {
      	      	
        // Chargement du keyspace de l'environnement de connexion
        final Keyspace keyspaceConfigSession = getKeyspaceCassandra(configSession);
        final CuratorFramework curatorConfigSession = (CuratorFramework) session
                                                                                .getServletContext()
                                                                                .getAttribute((String) session.getAttribute("nomConfiguration") + "-zookeeper");
     	// Chargement des CS de l'environnement en cours
        final ContratServiceService csServiceSession = new ContratServiceServiceImpl(
                                                                                     keyspaceConfigSession,
                                                                                     config.getConfiguration(form.getEnvCsToImport()),
                                                                                     curatorConfigSession);

        listCsToLoad = getallCs(NB_CLE_MAX_CS, csServiceSession);
        final List<String> listExistantCodeCs = getListCodeCs(listCsToLoad);
        form.setCodeCsSession(listExistantCodeCs.toString());
        form.setListCsSession(listExistantCodeCs);
        request.setAttribute("CodeCsSession", listExistantCodeCs);
	    
        // Liste des cs a afficher dans le tableau	
	    request.setAttribute("listeCs", listCsToLoad);

    }
    catch (final Exception e) {
      final StringWriter sw = new StringWriter();
      final PrintWriter pw = new PrintWriter(sw);
      e.printStackTrace(pw);
      final String stacktrace = sw.toString();
      request.setAttribute("stacktrace", stacktrace);
    }
	
    return "exporterCs";

  }
 
  /**
   * Récupération du détail d'un CS
   * 
   * @param csForm
   *          Le formulaire
   * @param result
   *          Gestion des erreurs
   * @param session
   *          La session
   * @param request
   *          La requête
   * @param identifiant
   *          identifiant du CS
   * @return La page à afficher
   */
  @RequestMapping(value = "detailCs")
  public final String afficherDetailCS(
                                       @ModelAttribute(NOM_FORMULAIRE) @Valid final ConsulterCsForm csForm,
                                       final BindingResult result,
                                       final HttpSession session,
                                       final HttpServletRequest request,
                                       @RequestParam(value = "identifiant", required = true) final String identifiant) {

    if (!result.hasFieldErrors()) {

      // Récupération de la configuration choisie
      final String nomConf = (String) session.getAttribute("nomConfiguration");
      final Keyspace keyspace = (Keyspace) session.getServletContext()
                                                  .getAttribute(nomConf);
      final CuratorFramework curator = (CuratorFramework) session
                                                                 .getServletContext()
                                                                 .getAttribute(nomConf + "-zookeeper");
      final ContratServiceService csService = new ContratServiceServiceImpl(
                                                                            keyspace,
                                                                            config.getConfiguration(nomConf),
                                                                            curator);

      final SaeContratService fullCs = csService.findCs(identifiant);

      request.setAttribute("detailCs", fullCs);

      csForm.setModification(Boolean.TRUE);
      csForm.setAjout(Boolean.FALSE);

    }
    return "gestionCs";

  }
 

  /**
   * réalisation de l'ajout ou de la modification d'un CS
   * 
   * @param csForm
   *          Le formulaire
   * @param result
   *          Le résultat
   * @param session
   *          La session
   * @param request
   *          La requête
   * @param action
   *          L'action à réaliser (ajouter ou charger)
   * @return {@link RedirectView}
   * @throws ErreurTechniqueException
   *           Exception levée si pb technique
   */
  @RequestMapping(value = "gestionCs")
  public final String gestionCS(
                                @ModelAttribute(NOM_FORMULAIRE) @Valid final ConsulterCsForm csForm,
                                final BindingResult result,
                                final HttpSession session,
                                final HttpServletRequest request,
                                @RequestParam(value = "action", defaultValue = StringUtils.EMPTY) final String action)
      throws ErreurTechniqueException {

    final String nomConf = (String) session.getAttribute("nomConfiguration");
    final Keyspace keyspace = (Keyspace) session.getServletContext()
                                                .getAttribute(
                                                              nomConf);
    final CuratorFramework curator = (CuratorFramework) session.getServletContext()
                                                               .getAttribute(nomConf + "-zookeeper");
    final ContratServiceService csService = new ContratServiceServiceImpl(keyspace,
                                                                          config.getConfiguration(nomConf),
                                                                          curator);
    DroitType droitType = null;
    if ("ajouter".equals(action)) {
      final DroitType dd = (DroitType) request.getSession()
                                              .getAttribute(
                                                            csForm.getDroit());

      try {
        final List<String> retourCreation = csService.creationDesDroits(dd);
        csForm.setMessage(retourCreation);
        csForm.setAjout(Boolean.FALSE);
        csForm.setStore(Boolean.FALSE);
        csForm.setModeCreation("modeLoad");
      }
      catch (final Exception e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);

        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);

      }
      return "gestionCs";
    }

    if ("charger".equals(action)) {
      if (csForm.getFile().getSize() == 0) {
        final ObjectError error = new ObjectError(NOM_FORMULAIRE,
                                                  "Veuillez sélectionner un fichier");
        result.addError(error);
      } else {
        try {
          droitType = csService.chargeFichierXml(csForm.getFile()
                                                       .getInputStream());

          final String myObjectId = UUID.randomUUID().toString();
          request.getSession().setAttribute(myObjectId, droitType);

          csForm.setDroit(myObjectId);
          request.setAttribute("droitCs", droitType.getListeCs().getCs());
          request.setAttribute("droitPrmd",
                               droitType.getListePrmd()
                                        .getPrmd());

          if (droitType.getListeFormatControlProfil() != null) {
            request
                   .setAttribute("formatControlProfil",
                                 droitType
                                          .getListeFormatControlProfil()
                                          .getFormatControlProfil());
          }
          if (droitType.getListeModifCs() != null) {
            request.setAttribute("droitModifCs",
                                 droitType
                                          .getListeModifCs()
                                          .getCs());
          }
          if (droitType.getListeAjoutPagm() != null) {
            request.setAttribute("droitAjoutPagm",
                                 droitType
                                          .getListeAjoutPagm()
                                          .getAjoutPagm());
          }
          if (droitType.getListeModifPagm() != null) {
            request.setAttribute("droitModifPagm",
                                 droitType
                                          .getListeModifPagm()
                                          .getModifPagm());
          }
          if (droitType.getListeSuppPagm() != null) {
            request.setAttribute("droitSuppPagm",
                                 droitType
                                          .getListeSuppPagm()
                                          .getSuppPagm());
          }
          if (droitType.getListeModifPrmd() != null) {
            request.setAttribute("droitModifPrmd",
                                 droitType
                                          .getListeModifPrmd()
                                          .getPrmd());
          }
          if (droitType.getListeModifFormatControlProfil() != null) {
            request.setAttribute("droitModifFormatControlProfil",
                                 droitType.getListeModifFormatControlProfil()
                                          .getFormatControlProfil());
          }
          csForm.setAjout(Boolean.TRUE);
          csForm.setStore(Boolean.TRUE);
          csForm.setModification(Boolean.FALSE);

        }
        catch (final Exception e) {
          final String message = e.getMessage();
          final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, message);
          result.addError(erreur);

          final StringWriter sw = new StringWriter();
          final PrintWriter pw = new PrintWriter(sw);
          e.printStackTrace(pw);
          final String stacktrace = sw.toString();
          request.setAttribute("stacktrace", stacktrace);
        }

      }
      csForm.setModeCreation("modeLoad");
    }

    if (StringUtils.isEmpty(action)) {
      csForm.setModeCreation("modeLoad");
    }

    return "gestionCs";

  }

  private List<SaeContratService> getallCs(final int maxResult,
                                           final ContratServiceService csService) {
    final List<SaeContratService> listCs = csService.findAllCs(maxResult);

    // on trie les contrats de services en fonction de leur code client
    final Comparator<SaeContratService> comparator = new Comparator<SaeContratService>() {
      @Override
      public int compare(final SaeContratService cs1, final SaeContratService cs2) {

        return cs1.getCodeClient().compareTo(cs2.getCodeClient());

      }
    };

    Collections.sort(listCs, comparator);
    return listCs;

  }

  private SaeContratService getCs(final String identifiant,
                                  final ContratServiceService csService) {

    final SaeContratService cs = csService.findCs(identifiant);

    return cs;
  }

  /**
   * Retourne le keyspace Cassandra de l'environnement passé en paramètre
   * 
   * @param conf
   *          la configuration choisie
   * @throws InterruptedException
   */
  private Keyspace getKeyspaceCassandra(final ConfigurationEnvironnement conf)
      throws InterruptedException {

    // Serveur Cassandra
    final CassandraServerBean server = new CassandraServerBean();
    server.setDataSet(null);
    server.setHosts(conf.getCassandraHost());
    server.setStartLocal(false);

    // Keyspace Cassandra
    final CassandraClientFactory clientFact = new CassandraClientFactory(server,
                                                                         conf.getCassandraKeySpace(),
                                                                         conf.getCassandraUserName(),
                                                                         conf.getCassandraPwd());

    return clientFact.getKeyspace();

  }

  /**
   * Filtre la liste de Contrats de service par des code passés en paramètre
   * 
   * @param listCs
   *          liste de Contrats de service
   * @param codesCs
   *          liste de codes des CS
   * @return
   */
  private List<SaeContratService> getSelectedCSByCode(
                                                      final List<SaeContratService> listCs, final List<String> codesCs) {

    final List<SaeContratService> listCsSelected = new ArrayList<>();

    for (final SaeContratService saeContratService : listCs) {
      for (final String codeCS : codesCs) {
        if (codeCS.equals(saeContratService.getCodeClient())) {
          listCsSelected.add(saeContratService);
        }

      }
    }

    return listCsSelected;
  }

  /**
   * Retourne la liste des codes des contrats de service des SaeContratService passés en paramètre
   * 
   * @param listCs
   * @return
   */
  private List<String> getListCodeCs(final List<SaeContratService> listCs) {

    final List<String> listCodeCs = new ArrayList<>();
    for (final SaeContratService cs : listCs) {
      listCodeCs.add(cs.getCodeClient());
    }

    return listCodeCs;
  }

  
	  
  /**
   * Zipper le repertoire 
   * @param directory le repertoire à zipper
   * @param files le nom des fichers contenu dans le repertoire
   * @return Un tableau de bytes du repertoire zippé
   * @throws IOException
   */
  private byte[] zipFiles(File directory, String[] files) throws IOException {
	  
	  String FILE_SEPARATOR = System.getProperty("file.separator");
			  
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      ZipOutputStream zos = new ZipOutputStream(baos);
      byte bytes[] = new byte[2048];

      for (String fileName : files) {
          FileInputStream fis = new FileInputStream(directory.getPath() + FILE_SEPARATOR + fileName);
          BufferedInputStream bis = new BufferedInputStream(fis);

          zos.putNextEntry(new ZipEntry(fileName));

          int bytesRead;
          while ((bytesRead = bis.read(bytes)) != -1) {
              zos.write(bytes, 0, bytesRead);
          }
          zos.closeEntry();
          bis.close();
          fis.close();
      }
      zos.flush();
      baos.flush();
      zos.close();
      baos.close();

      return baos.toByteArray();
  }
 
}
