package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import me.prettyprint.hector.api.Keyspace;

import com.netflix.curator.framework.CuratorFramework;
import com.netflix.curator.framework.CuratorFrameworkFactory;
import com.netflix.curator.framework.CuratorFrameworkFactory.Builder;
import com.netflix.curator.retry.ExponentialBackoffRetry;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.StaxDriver;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEConnectionService;
import fr.urssaf.image.commons.dfce.service.impl.DFCEConnectionServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnees;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.metadata.dfce.ServiceProviderSupportMetadata;
import fr.urssaf.image.sae.metadata.referential.dao.SaeMetadataDao;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;
import fr.urssaf.image.sae.metadata.referential.services.SaeMetaDataService;
import fr.urssaf.image.sae.metadata.referential.services.impl.SaeMetaDataServiceImpl;
import fr.urssaf.image.sae.metadata.referential.support.SaeMetadataSupport;

/**
 * Classe implémentant le service MetadonneesService
 * 
 * 
 */
public class MetadonneesServiceImpl implements MetadonneesService {

   private SaeMetaDataService metaService;
   
   private SaeMetadataSupport metaSupport;

   private JobClockSupport jobClock;
   
   private CuratorFramework curator;

   @Override
   public final Metadonnees chargerMetadonnees(File fichier)
         throws FileNotFoundException {

      // Désérialisation des objets EcdeSource via Xstream
      StaxDriver staxDriver = new StaxDriver();
      XStream xstream = new XStream(staxDriver);

      xstream.alias("metadonnee", Metadonnee.class);
      xstream.alias("metadonnees", new Metadonnee[] {}.getClass());
      Metadonnees meta = new Metadonnees();
      meta.setMetadonnees((Metadonnee[]) xstream.fromXML(new FileInputStream(
            fichier)));

      return meta;

   }
   
   public MetadonneesServiceImpl(){
      
   }
   
   public MetadonneesServiceImpl(ConfigurationEnvironnement conf,Keyspace keyspace, DFCEConnection connection ){
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      jobClock = new JobClockSupportImpl(keyspace, clock);
      
      try {
         Builder builder = CuratorFrameworkFactory.builder();
         builder.connectString(conf.getZookeeperHost()).namespace(
               conf.getZookeeperNameSpace());
         builder.retryPolicy(new ExponentialBackoffRetry(100, 10));
         curator = builder.build();
         curator.start();
      } catch (IOException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
      
      metaSupport=  new SaeMetadataSupport(new SaeMetadataDao(keyspace));

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            connection);
      ServiceProviderSupportMetadata providerSupport = new ServiceProviderSupportMetadata(
            dfceConnectionService);
      providerSupport.connect();
            
      
      metaService = new SaeMetaDataServiceImpl(metaSupport,jobClock, curator, providerSupport);
      
   }

   /**
    * Methode permettant de récupérer toutes les métadonnées présentes dans la
    * base Cassandra
    * 
    * @param keyspace
    *           keyspace à intérroger
    * @return List<MetadataReference> liste de métadonnées
    */
   @Override
   public final List<MetadataReference> findAllMetadata() {

      return metaService.findAll();
   }

   /**
    * Methode permettant de récupérer une métadonnée présente dans la base
    * Cassandra
    * 
    * @param keyspace
    *           keyspace à intérroger
    * @param codeLong code long de la métadonnée à trouver          
    * @return MetadataReference une métadonnée
    */
   @Override
   public final MetadataReference findMetadata(String codeLong) {
      return metaService.find(codeLong);
   }

   /**
    * Methode permettant de créer ou modifier une métadonnée présente dans la
    * base Cassandra
    * 
    * @param meta
    *           une métadonnée
    * @param clock
    *           JobClockConfiguration
    * @param keyspace
    *           keyspace à intérroger
    * 
    */
   @Override
   public final void createOrModifyMetadata(MetadataReference meta,
         JobClockConfiguration clock, Keyspace keyspace) {
      metaService.create(meta);
   }

}
