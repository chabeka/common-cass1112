package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.List;

import javax.servlet.http.HttpSession;

import me.prettyprint.hector.api.Keyspace;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.StaxDriver;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEConnectionService;
import fr.urssaf.image.commons.dfce.service.impl.DFCEConnectionServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnees;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.metadata.dfce.ServiceProviderSupportMetadata;
import fr.urssaf.image.sae.metadata.exceptions.MetadataReferenceNotFoundException;
import fr.urssaf.image.sae.metadata.referential.dao.SaeMetadataDao;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;
import fr.urssaf.image.sae.metadata.referential.services.SaeMetaDataService;
import fr.urssaf.image.sae.metadata.referential.services.impl.SaeMetaDataServiceImpl;
import fr.urssaf.image.sae.metadata.referential.support.SaeMetadataSupport;

/**
 * Classe implémentant le service MetadonneesService
 */
public class MetadonneesServiceImpl implements MetadonneesService {

   private SaeMetaDataService metaService;

   /**
    * {@inheritDoc}
    */
   @Override
   public final Metadonnees chargerMetadonnees(File fichier)
         throws FileNotFoundException {

      // Désérialisation des objets EcdeSource via Xstream
      StaxDriver staxDriver = new StaxDriver();
      XStream xstream = new XStream(staxDriver);

      xstream.alias("metadonnee", Metadonnee.class);
      xstream.alias("metadonnees", new Metadonnee[] {}.getClass());
      Metadonnees meta = new Metadonnees();
      meta.setMetadonnees((Metadonnee[]) xstream.fromXML(new FileInputStream(
            fichier)));

      return meta;

   }

   /**
    * Constructeur
    */
   public MetadonneesServiceImpl() {

   }

   /**
    * Constructeur
    * 
    * @param session
    *           La session
    * @param lesConfigs
    *           Configurations des environnements
    */
   public MetadonneesServiceImpl(HttpSession session,
         ConfigurationsEnvironnement lesConfigs) {

      // On va instantier manuellement le SaeMetaDataService des services SAE
      // (manuellement par opposition avec une instantiation par Spring)
      // Il faut utiliser les paramètres de configuration de la session en cours

      // Récupère les informations de la session courante

      String nomConf = (String) session.getAttribute("nomConfiguration");

      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);

      DFCEConnection dfceConnection = (DFCEConnection) session
            .getServletContext().getAttribute(nomConf + "-dfce");

      // Instantiation du JobClockSupport
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      JobClockSupport jobClockSupport = new JobClockSupportImpl(keyspace, clock);

      // Instantiation du SaeMetadataDao
      SaeMetadataDao metaDao = new SaeMetadataDao(keyspace);

      // Instantiation du SaeMetadataSupport
      SaeMetadataSupport metaSupport = new SaeMetadataSupport(metaDao);

      // Instantiation du ServiceProviderSupportMetadata
      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupportMetadata providerSupport = new ServiceProviderSupportMetadata(
            dfceConnectionService);
      providerSupport.connect();

      // Enfin, instantiation du SaeMetaDataService
      metaService = new SaeMetaDataServiceImpl(metaSupport, jobClockSupport,
            providerSupport, dfceConnection);

   }

   /**
    * Methode permettant de récupérer toutes les métadonnées présentes dans la
    * base Cassandra
    * 
    * @return List<MetadataReference> liste de métadonnées
    */
   @Override
   public final List<MetadataReference> findAllMetadata() {
      return metaService.findAll();
   }

   /**
    * Methode permettant de récupérer une métadonnée présente dans la base
    * Cassandra
    * 
    * @param codeLong
    *           code long de la métadonnée à trouver
    * @return MetadataReference une métadonnée
    */
   @Override
   public final MetadataReference findMetadata(String codeLong) {
      return metaService.find(codeLong);
   }

   /**
    * Methode permettant de créer une métadonnée présente dans la base Cassandra
    * 
    * @param meta
    *           une métadonnée
    */
   @Override
   public final void createMetadata(MetadataReference meta) {
      metaService.create(meta);
   }

   /**
    * Methode permettant de modifier une métadonnée présente dans la base
    * Cassandra
    * 
    * @param meta
    *           une métadonnée
    * @throws MetadataReferenceNotFoundException
    *            Exception levée lorsque la métadonnée n'existe pas
    */
   @Override
   public final void modifyMetadata(MetadataReference meta)
         throws MetadataReferenceNotFoundException {
      metaService.modify(meta);
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public final List<MetadataReference> findMetadatasConsultables() {
      return metaService.findAllMetadatasConsultables();
   }

   /**
    * {@inheritDoc}
    */
   @Override
   public final List<MetadataReference> findMetadatasRecherchables() {
      return metaService.findAllMetadatasRecherchables();
   }
}
