package fr.urssaf.image.sae.admin.dfce.exploit.executable;

import java.io.File;

import junit.framework.Assert;

import org.easymock.EasyMock;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.BaseAdministrationServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.GeneralAdminDfceException;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AdministrationDFCEService;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-sae-dfce-admin-exploit-service-mock-test.xml" })
@SuppressWarnings("PMD.MethodNamingConventions")
public class AdministrationDFCEServiceMainTest {

   private static final String BASE_XML_FILE = "src/test/resources/data/saeBase.xml";

   private static final String CYCLE_XML_FILE = "src/test/resources/data/LifeCycleRule.xml";

   private static final String MESSAGE_UNEXPECTED = "le message de l'exception est inattendu";

   private AdministrationSAEMain administrationSAEMain;

   @Autowired
   private AdministrationDFCEService service;

   @Autowired
   private ApplicationContext context;

   @Before
   public void before() {

      administrationSAEMain = new AdministrationSAEMain("");

   }

   @After
   public void after() {

      EasyMock.reset(service);

   }

   private void assertService() {

      EasyMock.verify(service);
   }

   @Test
   public void reindex_success() throws ConnectionServiceEx,
         GeneralAdminDfceException {

      service.updateIndexes(EasyMock.anyObject(DFCEConnection.class));

      EasyMock.replay(service);

      administrationSAEMain.executeService(AdministrationSAEMain.REINDEX,
            context, new String[0]);

      assertService();

   }

   @Test
   public void updateLifecycleRules_success() throws ConnectionServiceEx,
         GeneralAdminDfceException {

      File xmlDocumentsType = new File(CYCLE_XML_FILE);

      service.updateLifeCycleRules(EasyMock
            .anyObject(DFCEConnection.class), EasyMock
            .eq(xmlDocumentsType));

      EasyMock.replay(service);

      administrationSAEMain.executeService(
            AdministrationSAEMain.UPDATE_LIFECYCLE, context,
            new String[] { CYCLE_XML_FILE });

      assertService();

   }

   @Test
   public void updateLifecycleRules_failure_LifeCycleRule_notExist()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      try {

         administrationSAEMain.executeService(
               AdministrationSAEMain.UPDATE_LIFECYCLE, context,
               new String[] { "src/test/resources/fileNotExist.xml" });

         Assert.fail("le service doit lever une BaseAdministrationServiceEx");

      } catch (BaseAdministrationServiceEx e) {

         Assert.assertEquals(MESSAGE_UNEXPECTED,
               "Le fichier des durées de conservation n'est pas valide.", e
                     .getMessage());

      }

   }

   @Test
   public void createDataBase_success() throws ConnectionServiceEx,
         GeneralAdminDfceException {

      File xmlDataBaseModel = new File(BASE_XML_FILE);
      File xmlDocumentsType = new File(CYCLE_XML_FILE);

      service.createSAEBase(EasyMock.anyObject(DFCEConnection.class),
            EasyMock.eq(xmlDataBaseModel), EasyMock.eq(xmlDocumentsType));

      EasyMock.expectLastCall().andReturn("Docubase");

      EasyMock.replay(service);

      administrationSAEMain.executeService(
            AdministrationSAEMain.CREATE_DATA_BASE, context, new String[] {
                  BASE_XML_FILE, CYCLE_XML_FILE });

      assertService();

   }

   @Test
   public void createDataBase_failure_saeBase_notexist()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      try {
         administrationSAEMain.executeService(
               AdministrationSAEMain.CREATE_DATA_BASE, context,
               new String[] { "src/test/resources/data/fileNotExist.xml",
                     CYCLE_XML_FILE });

         Assert.fail("le service doit lever une BaseAdministrationServiceEx");

      } catch (BaseAdministrationServiceEx e) {

         Assert.assertEquals(MESSAGE_UNEXPECTED,
               "Le modèle de la base de données SAE n'est pas valide.", e
                     .getMessage());

      }

   }

   @Test
   public void createDataBase_failure_LifeCycleRule_notexist()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      try {
         administrationSAEMain.executeService(
               AdministrationSAEMain.CREATE_DATA_BASE, context,
               new String[] { BASE_XML_FILE,
                     "src/test/resources/data/fileNotExist.xml" });

         Assert.fail("le service doit lever une BaseAdministrationServiceEx");

      } catch (BaseAdministrationServiceEx e) {

         Assert.assertEquals(MESSAGE_UNEXPECTED,
               "Le fichier des types de documents SAE n'est pas valide.", e
                     .getMessage());

      }

   }

   @Test
   public void createDataBase_failure_saeBase_non_renseigne()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      try {
         administrationSAEMain.executeService(
               AdministrationSAEMain.CREATE_DATA_BASE, context, new String[0]);

         Assert.fail("le service doit lever une IllegalArgumentException");

      } catch (IllegalArgumentException e) {

         Assert
               .assertEquals(
                     MESSAGE_UNEXPECTED,
                     "Le chemin complet du fichier du modèle de la base de données SAE doit être renseigné.",
                     e.getMessage());

      }

   }

   @Test
   public void createDataBase_failure_LifeCycleRule_non_renseigne()
         throws ConnectionServiceEx, GeneralAdminDfceException {

      try {
         administrationSAEMain.executeService(
               AdministrationSAEMain.CREATE_DATA_BASE, context,
               new String[] { BASE_XML_FILE });

         Assert.fail("le service doit lever une IllegalArgumentException");

      } catch (IllegalArgumentException e) {

         Assert
               .assertEquals(
                     MESSAGE_UNEXPECTED,
                     "Le chemin complet du fichier des types de documents SAE doit être renseigné.",
                     e.getMessage());

      }

   }
}
