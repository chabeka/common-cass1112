package fr.urssaf.image.sae.admin.dfce.exploit.services;

import java.util.Calendar;
import java.util.Date;

import org.apache.commons.lang.time.DateUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.services.impl.ArchiveLogSystemDFCEServiceImpl;
import fr.urssaf.image.sae.admin.dfce.exploit.utils.Utils;
import org.junit.Assert;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext-sae-dfce-admin-exploit-test.xml" })
@SuppressWarnings("all")
public class ArchiveLogSystemDFCEServiceTest extends
      ArchiveLogSystemDFCEServiceImpl {

   @Autowired
   DFCEConnection connParams;

   @Override
   protected void buildAndOpenSAEConnexion(DFCEConnection cnxParameter)
         throws ConnectionServiceEx { /* no-op */
   }

   @Override
   public void closeSAEConnection() { /* no-op */
   };

   /**
    * Teste la méthode utilitaire {@link Utils#dateFromDeltaInDays(int)}
    * 
    * @throws Exception
    */
   @Test
   public void currentDateDeltaUtils() throws Exception {
      Date delta0 = Utils.dateFromDeltaInDays(0);
      Date delta1 = Utils.dateFromDeltaInDays(1);
      Date delta30 = Utils.dateFromDeltaInDays(30);

      Date now = new Date();

      Assert.assertTrue(DateUtils.isSameDay(delta0, now));
      Assert.assertTrue(delta1.before(now));
      Assert.assertTrue(delta30.before(delta1));
   }

   /**
    * Teste la méthode utilitaire {@link Utils#dateFromDeltaInDays(int, Date)}
    * 
    * @throws Exception
    */
   @Test
   public void dateDeltaUtils() throws Exception {
      Calendar cal = Calendar.getInstance();
      cal.set(2013, 11, 25);
      Date xmas = cal.getTime();
      cal.set(2013, 9, 31);
      Date halloween = cal.getTime();

      Date xmasMinus55 = Utils.dateFromDeltaInDays(55, xmas);
      Assert.assertNotNull(xmasMinus55);
      Assert.assertTrue(DateUtils.isSameDay(halloween, xmasMinus55));
   }
}
