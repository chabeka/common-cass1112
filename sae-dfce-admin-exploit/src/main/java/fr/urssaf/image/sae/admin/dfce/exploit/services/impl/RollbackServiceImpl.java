/**
 * 
 */
package fr.urssaf.image.sae.admin.dfce.exploit.services.impl;

import java.util.Iterator;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.docubase.dfce.exception.FrozenDocumentException;
import com.docubase.dfce.exception.SearchQueryParseException;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEServices;
import fr.urssaf.image.sae.admin.dfce.exploit.exception.ConnectionServiceEx;
import fr.urssaf.image.sae.admin.dfce.exploit.services.AbstractService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.ArchiveLogSystemDFCEService;
import fr.urssaf.image.sae.admin.dfce.exploit.services.RollbackService;
import net.docubase.toolkit.model.ToolkitFactory;
import net.docubase.toolkit.model.base.Base;
import net.docubase.toolkit.model.document.Document;
import net.docubase.toolkit.model.search.SearchQuery;

/**
 * Implémente l'interface : {@link ArchiveLogSystemDFCEService}
 * <ul>
 * <li>Service de rollback de traitement de masse</li>
 * </ul>
 */
@Service
public class RollbackServiceImpl extends AbstractService implements
                                 RollbackService {

   private static final Logger LOGGER = LoggerFactory
                                                     .getLogger(RollbackServiceImpl.class);

   /**
    * {@inheritDoc}
    */
   @Override
   public void rollback(final DFCEConnection cnxParameter, final UUID idTraitement)
         throws ConnectionServiceEx {
      final String trcPrefix = "rollback()";
      LOGGER.info("{} - début", trcPrefix);

      try {
         buildAndOpenSAEConnexion(cnxParameter);

         final String query = "iti:" + idTraitement.toString();
         final DFCEServices dfceServices = getDFCEServices();
         final Base base = dfceServices.getBase();

         final SearchQuery searchQuery = ToolkitFactory.getInstance()
                                                       .createMonobaseQuery(query, base);

         Iterator<Document> iterator;
         try {
            iterator = dfceServices.createDocumentIterator(searchQuery);

            Document document;
            int count = 0;
            while (iterator.hasNext()) {
               document = iterator.next();
               try {
                  dfceServices.deleteDocument(document.getUuid());
                  LOGGER.debug("{} - Suppression du document {} "
                        + "concernant le traitement de masse {} "
                        + "réalisée avec succès. {} déjà supprimés",
                               new Object[] {trcPrefix, document.getUuid(),
                                             idTraitement.toString(), count});
                  count++;

               }
               catch (final FrozenDocumentException exception) {
                  LOGGER.error("{} - Impossible de supprimer le document {} "
                        + "concernant le traitement de masse {}",
                               new Object[] {trcPrefix, document.getUuid(),
                                             idTraitement.toString()});
               }
            }
         }
         catch (final SearchQueryParseException e) {
            LOGGER.error("{} - Requête Lucène incorrecte {} ",
                         new Object[] {
                                       trcPrefix, query});
         }

      }
      finally {
         closeSAEConnection();
      }

      LOGGER.info("{} - fin", trcPrefix);
   }
}
