package fr.urssaf.image.sae.anais.portail.service.impl;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import fr.urssaf.image.sae.anais.framework.modele.SaeAnaisAuth;
import fr.urssaf.image.sae.anais.portail.exception.VIBuildException;
import fr.urssaf.image.sae.anais.portail.service.VIService;
import fr.urssaf.image.sae.vi.exception.VIException;
import fr.urssaf.image.sae.vi.modele.VIPortailCreateParams;
import fr.urssaf.image.sae.vi.service.PortailVIService;

/**
 * Génération du VI pour l'IHM d'exploitation
 */
@Service
@Qualifier("SAE_IHM_EXPLOIT")
public class ViServiceIhmExploitImpl implements VIService {

   @Autowired
   private PortailVIService saePortailViService;
   
   /**
    * {@inheritDoc}
    */
   @Override
   public String buildVI(SaeAnaisAuth auth, String login) throws VIBuildException {

      VIPortailCreateParams viParams = new VIPortailCreateParams();

      viParams.setIssuer("SAE_PORTAIL_WEB_IHM_EXPLOIT");
      
      viParams.setLogin(login);

      viParams.setAudience("http://exploit.sae.urssaf.fr");

      viParams.setNameId(buildNameId(auth));

      // Le PAGM
      String pagm = determinePagm(auth);
      viParams.getPagmList().add(pagm);

      viParams.setHabAnais(auth.getHabilitations().get(0).getCode());

      String vi;
      try {
         vi = saePortailViService.creerVI(viParams);
      } catch (VIException e) {
         throw new VIBuildException(buildErreursViValidXsd(e), e);
      }

      return vi;

   }

   private String buildNameId(SaeAnaisAuth auth) {
      return StringUtils.trim(auth.getNom() + " " + auth.getPrenom());
   }
   
   private String buildErreursViValidXsd(VIException ex) {

      String result = ex.getMessage();

      if (ArrayUtils.isNotEmpty(ex.getErrors())) {
         result += "\r\n";
         for (String erreur : ex.getErrors()) {
            result += erreur + "\r\n";
         }
      }

      return result;

   }

   private String determinePagm(SaeAnaisAuth auth) throws VIBuildException {

      // On devrait avoir une et une seule habilitation
      // dans le cas de l'IHM d'exploit
      if (CollectionUtils.isEmpty(auth.getHabilitations())) {
         throw new VIBuildException("Aucun habilitation trouvée dans ANAIS");
      }
      if (auth.getHabilitations().size() > 1) {
         throw new VIBuildException(
               "Plusieurs habilitations trouvées dans ANAIS, alors qu'on en attendait une seule");
      }

      // Convertit les habilitations en PAGM
      String habAnais = auth.getHabilitations().get(0).getCode();
      String pagm;
      if ("Administration Technique".equalsIgnoreCase(habAnais)) {
         pagm = "ADMIN_TECHNIQUE";
      } else if ("Consultation Technique".equalsIgnoreCase(habAnais)) {
         pagm = "CONSULT_TECHNIQUE";
      } else if ("Consultation Archive".equalsIgnoreCase(habAnais)) {
         pagm = "CONSULT_ARCHIVE";
      } else {
         throw new VIBuildException("L'habilitation ANAIS " + habAnais
               + " est inconnu pour la conversion en PAGM");
      }

      // Renvoie du résultat
      return pagm;

   }

}
