Maquette Cirtil.technocom

date : 21/04/2010
version : 0.11
technologie : JavaEE 6
nom du projet : ImageMaquette
dépendance : jericho-html-3.1.jar

Utilisation :
Copier les 2 jars (ImageMaquette et jericho-html-3.1) dans le répertoire WebContent/WEB-INF/lib/ de votre 
application web
ou bien 
Otiliser Maven avec la gestion des dépendances

Fonctionnement :
dans le projet web dynamique éditer le fichier web.xml et rajouter les lignes suivantes dans le noeud xml principal web-app:
<!-- Debut de la configuration de la Maquette-->
	<filter>
		<filter-name>MaquetteFilter</filter-name>
		<filter-class>fr.urssaf.image.maquette.MaquetteFilter</filter-class>
		<init-param>
			<param-name>excludeFiles</param-name>
			<param-value>*/index.jsp</param-value>
			<!-- 
			Liste des requêtes à exclure, même fonctionnement que le tag
			url-pattern de servlet-mapping On peut préciser plusieurs requête en
			les séparant par des ; exemple : /img/*;/css/*;/js/*
			 -->
		</init-param>
		<!-- 
			Liste des paramètres applicatifs
		 -->
		<!-- Header -->
		<init-param>
			<param-name>appTitle</param-name>
			<param-value>Titre de mon application construit dans mon web.xml</param-value>			
			<!-- titre de l'application affiché dans le bandeau supérieur -->
		</init-param>
		<init-param>
			<param-name>logoPrincipal</param-name>
			<param-value>img/logo_image/toto.png</param-value>
			<!-- logo du pôle Image (204*45px) -->
		</init-param>
		<init-param>
			<param-name>appLogo</param-name>
			<param-value>img/logo_toto.png</param-value>
			<!-- logo de l'application affiché en haut à droite (85*58px) -->
		</init-param>
		<init-param>
			<param-name>implementationIMenu</param-name>
			<param-value></param-value>
			<!-- chemin vers la classe de l'application web implémentant l'interface 
			fr.urssaf.image.maquette.definition.IMenu -->
		</init-param>
		<!-- LeftCol -->
		<init-param>
			<param-name>implementationILeftCol</param-name>
			<param-value>fr.urssaf.image.application.ImplLeftCol</param-value>
			<!-- chemin vers la classe de l'application web implémentant l'interface 
			fr.urssaf.image.maquette.definition.ILeftCol -->
		</init-param>
		<!-- Footer -->
		<init-param>
			<param-name>appCopyright</param-name>
			<param-value>Copyright 2006-2010</param-value>
			<!-- texte affiché en bas à droite de la page -->
		</init-param>
		<init-param>
			<param-name>appDisplayStandardsAndNorms</param-name>
			<param-value>1</param-value>
			<!-- permet d'afficher le lien vers la page des standards et des normes -->
		</init-param>
		<!-- Personnalisation du thème graphique -->
		<init-param>
			<param-name>theme</param-name>
			<param-value>ged</param-value>
			<!-- (facultatif) theme prioritaire sur les css : aed/ged -->
		</init-param>
		<init-param>
			<param-name>cssMainBackgroundColor</param-name>
			<param-value>red</param-value>
			<!-- couleur de fond de la fenêtre -->
		</init-param>
		<init-param>
			<param-name>cssContentBackgroundColor</param-name>
			<param-value>#fff</param-value>
			<!-- couleur de fond de la zone où s'affiche le contenu applicatif -->
		</init-param>
		<init-param>
			<param-name>cssHeaderBackgroundColor</param-name>
			<param-value>#051A7D</param-value>
			<!-- couleur de fond de la zone entourant le contenu applicatif (header, leftcol, footer) -->
		</init-param>
		<init-param>
			<param-name>cssHeaderBackgroundImg</param-name>
			<param-value>img/degrade_h_toto.png</param-value>
			<!-- image du dégradé du header (1920*1px)-->
		</init-param>
		<init-param>
			<param-name>cssLeftcolBackgroundImg</param-name>
			<param-value>img/leftcol_toto.png</param-value>
			<!-- image de la même couleur que le cssHeaderBackgroundColor pour simuler la colonne de gauche (140*1px)-->
		</init-param>
		<init-param>
			<param-name>cssInfoboxBackgroundColor</param-name>
			<param-value>#EAEAEF</param-value>
			<!-- couleur de fond des boîtes contextuelles de la colonne de gauche -->
		</init-param>
		<init-param>
			<param-name>cssSelectedMenuBackgroundColor</param-name>
			<param-value>#05577D</param-value>
			<!-- couleur de fond du menu sélectionné, fil d'arianne et titre des boîtes contextuelles -->
		</init-param>
		<init-param>
			<param-name>cssMainFontColor</param-name>
			<param-value>#fff</param-value>
			<!-- couleur des polices pour les textes en dehors de la zone de contenu -->
		</init-param>
		<init-param>
			<param-name>cssContentFontColor</param-name>
			<param-value>#000</param-value>
			<!-- couleur des polices pour les textes de la zone de contenu -->
		</init-param>
		<init-param>
			<param-name>cssMenuFirstRowFontColor</param-name>
			<param-value>yellow</param-value>
			<!-- couleur des polices pour les liens de la première ligne du menu -->
		</init-param>
		<init-param>
			<param-name>cssMenuLinkFontColor</param-name>
			<param-value>purple</param-value>
			<!-- couleur des polices pour les liens du menu -->
		</init-param>
		<init-param>
			<param-name>cssMenuLinkHoverFontColor</param-name>
			<param-value>gray</param-value>
			<!-- couleur des polices pour les liens survolés du menu -->
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>MaquetteFilter</filter-name>
		<url-pattern>*.do</url-pattern>
		<url-pattern>*.jsp</url-pattern>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.htm</url-pattern>
	</filter-mapping>

	<servlet>
		<description></description>
		<display-name>MaquetteServlet</display-name>
		<servlet-name>MaquetteServlet</servlet-name>
		<servlet-class>fr.urssaf.image.maquette.MaquetteServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>MaquetteServlet</servlet-name>
		<url-pattern>/getResourceImageMaquette.do</url-pattern>
	</servlet-mapping>
<!-- Fin de la configuration de la Maquette-->

Liste des paramètres éditables :
excludeFiles : permet d'exclure les pattern uri du filtre. 
  par exemple, la liste /img/*;/css/*;/js/* correspond aux répertoires où on stocke ces resources sur son serveur web. 
  Cela peut être adapté selon ses besoins pour éviter que les images, css et fichier javascript (entre autres) ne 
  soient interceptés par le filtre Maquette

appTitle : Titre de l'application répété sur toutes les pages au niveau du bandeau supérieur de la maquette
 
appLogo : Chemin vers le logo de l'application. C'est le chemin relatif à son serveur web
 
implementationIMenu : Chemin vers la classe implémentant l'interface IMenu
 
implementationILeftCol : Chemin vers la classe implémentant l'interface ILeftCol
 
appCopyright : texte de copyright se trouvant en bas à droite de la maquette, sur toutes les pages
 
appDisplayStandardsAndNorms : 1 ou 0, permet d'afficher ou non le lien vers la page des standards (Non implémenté car on
  ne sait pas où stocker cette page : commune à toutes les applications et donc dans le jar, ou bien personnalisable)
  
Knowns Bugs :

Workaround :

Todo :

Evolution réalisée :
v0.11
suppression du contenu de la balise title du main.html
prise en compte des nullPointerException sur l'utilisation des implémentations de ILeftCol et IMenu
modification du pom.xml pour le groupId de log4j et jericho
IMenu.getMenuItem devient IMenu.getMenu
passage de la request et non plus seulement de la session 
changement du nom du package fr.urssaf.image.commons.maquette et du finalName dans le pom.xml : artifactId-version
v0.10
Arborescence MAVEN
Fil d'ariane basé sur l'url (on ne tient pas compte de la queryString)
nouveau paramètre : theme, qui permet de charger un thème AED phase 1 ou GED phase 1. Les valeurs
possibles sont aed/ged. S'il est renseigné, les paramètres de CSS ne sont plus pris en compte.  
Suppression des images par défaut (logo image et logo application)
v0.9
menu par défaut supprimé
introduction des interfaces IMenu, IMenuItem et du paramètre du fichier web.xml implementationIMenu
implémentation du menu
v0.8
implémentation de la colonne de gauche
suppression de JsPartConfig car inutilisé, trop de fonctionnalité tue l'application ...
mise en protected des setters des xxConfig dont la valeur est défini dans le web.xml
v0.7
hauteur minimum du header : réutilisation d'une image pour IE6 car il ne gère pas le min-height/max-height
introduction de l'interface ILeftCol et du paramètre du fichier web.xml implementationILeftCol
ajout du paramètre du fichier web.xml implementationIMenu
ajout des paramètres suivant dans le fichier web.xml : cssMenuFirstRowFontColor, cssMenuLinkFontColor, 
cssMenuLinkHoverFontColor
v0.6
suppression de la décoration des txt : retrait de la ligne <url-pattern>*.txt</url-pattern> dans le filter-mapping
du fichier web.xml
getResourceImageMaquette devient getResourceImageMaquette.do afin de passer systématiquement dans le filtre de pouvoir
récupérer les paramètres du web.xml
ajout de nouveau paramètre de filtre afin de personnaliser le thème graphique
suppression des éléments par défauts de la colonne de gauche
hauteur du logo de l'application fixé à 50px si le client utilise IE6 
liseré bleu en haut à droite supprimé sous IE6
le padding de 2px en haut du header est supprimé
v0.5
resources externes : implémentation du workaround proposé en v0.4, c'est à dire que l'on ne filtre que les resources
connues via le web.xml et les noeuds url-pattern de la section filter-mapping (cf. le web.xml plus haut). On n'a donc 
plus besoin des paramètres de filtre includeFiles (supprimé du web.xml)
aucun contrôle n'est fait sur la taille du logo, toutefois, via les css on a limité la hauteur de l'image entre 47 et
57px
l'erreur 404 n'est plus présente, mais aucun moyen de savoir pourquoi elle était là, ni ce qui a entraîné sa disparion
l'exclusion de fichier précis fonctionne si on fait attention à préciser le répertoire complet :
	/TestMaquette/index.jsp, et non pas /index.jsp
v0.4
les paramètres du filtre includeFiles et excludeFiles sont gérés comme des pattern-uri et non plus avec des regexp
suppression du fil blanc en bas de page quand le logo de l'application fait moins de 47px
la balise head de la source html de l'application métier est intégré dans le template, à la fin du head
la balise title du template est supprimée s'il y en a une dans le source de l'application métier 
le titre de l'application par défaut est supprimé : si rien n'est spécifié le titre dans le header sera vierge
v0.3
paramètre includeFiles pris en compte
v0.2
le ? au début
les javascripts inclus
le texte null
l'encodage des caractères, forcé à ISO-8859-15
changement du nom du package
détection automatique de l'appel au getResourceImageMaquette

TODO :
envisager dans le filtre le fait de vérifier le type mime du contenu retourné par la requête : si le contenu est 
du html, alors on lance le décorateur (sauf s'il est dans la liste des excludes)			   sinon (text/javascript,
plain, css, ...) on stop le décorateur
Tester le fonctionnement du type mime sur des images générées n'importe comment, sur les images générés via le getResource
sur le html sans doctype, sans body... sur du javascript dans un txt... : c'est fait, le conteneur web se base sur 
l'extension du fichier demandé pour déterminer le type mime. Par contre est il capable de déterminer le type mime sans
cette extension ?