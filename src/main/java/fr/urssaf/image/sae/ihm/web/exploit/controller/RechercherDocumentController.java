package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunDocumentException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.RechercherDocumentsForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDonneesRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeResultatRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;

/**
 * Classe centralisant les opérations utilisateurs pour la recherche de
 * documents
 * 
 * 
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@Controller
public class RechercherDocumentController {

   /**
    * Service offrant les opérations de recherche sur un ou plusieurs documents
    */
   @Autowired
   private RechercherService rechercherService;

   @Autowired
   private ConfigurationsEnvironnement config;

   /**
    * Liste des environnements disponibles pour effectuer les opérations
    */
   @Autowired
   private ConfigurationsEnvironnement environnements;

   private static final int NB_LIGNES_TABLEAU = 10;


   /**
    * Initialisation du formulaire de recherche de documents
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            l'exception levée
    */
   @RequestMapping(value = "rechercherDocuments")
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Instancie le service des métadonnées dans la configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Préparation de la liste des métadonnées disponibles en recherche
      List<Metadonnee> listeMetaRecherchable = metaReferenceToMetadonnee(metaService
            .findMetadatasRecherchables());
      request.setAttribute("listeMetaRecherche", listeMetaRecherchable);

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      List<Metadonnee> listeMetaConsultable = metaReferenceToMetadonnee(metaService
            .findMetadatasConsultables());
      request.setAttribute("listeMetaAffichage", listeMetaConsultable);

      RechercherDocumentsForm form = new RechercherDocumentsForm();
      form.setNbLignesTableau(NB_LIGNES_TABLEAU);
      model.addAttribute("rechercheForm", form);

      return "rechercherDocuments";

   }

   private List<Metadonnee> metaReferenceToMetadonnee(
         List<MetadataReference> findMetadatasRecherchables) {
      List<Metadonnee> listeMetadonnee = new ArrayList<Metadonnee>();
      for (MetadataReference metadataReference : findMetadatasRecherchables) {
         Metadonnee meta = new Metadonnee();
         meta.setCode(metadataReference.getLongCode());
         if (metadataReference.getIsIndexed()) {
            meta.setIndexee("Oui");
         } else {
            meta.setIndexee("Non");
         }
         meta.setLibelle(metadataReference.getLabel());
         listeMetadonnee.add(meta);
      }
      return listeMetadonnee;
   }

   /**
    * Lance la recherche de documents
    * 
    * @param rechercheForm
    *           le formulaire
    * @param result
    *           gestion des erreurs
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    */
   @RequestMapping(value = "afficherDocuments")
   public final String rechercherDocuments(
         @ModelAttribute("rechercheForm") @Valid RechercherDocumentsForm rechercheForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {
         try {
            // Nombre de ligne max du tableau de résultat
            if (rechercheForm.getNbLignesTableau() == 0) {
               rechercheForm.setNbLignesTableau(NB_LIGNES_TABLEAU);
               request.setAttribute("nbLignesTableau", NB_LIGNES_TABLEAU);
            } else {
               request.setAttribute("nbLignesTableau", rechercheForm
                     .getNbLignesTableau());
            }

            SaeResultatRecherche srr;
            // Récupération de la requête Lucène
            String requeteLucene = rechercheForm.getRequeteLucene();
            // Récupération des métadonnées à afficher en retour
            List<String> codesMeta = rechercheForm.getCodeMeta();

            // Récupération de l'url du webservice
            String nomConf = (String) session.getAttribute("nomConfiguration");
            ConfigurationEnvironnement conf = environnements
                  .getConfiguration(nomConf);
            String urlServiceWeb = conf.getUrlWs().toString();

            // Lancement de la recherche
            srr = rechercherService.rechercherDocuments(requeteLucene,
                  codesMeta, urlServiceWeb);

            request.setAttribute("resRecherche", srr);

            // Noms des colonnes à afficher
            List<SaeDonneesRecherche> sdr = srr.getDonnees();
            List<String> entete = new ArrayList<String>();
            List<Metadonnee> listeMeta = sdr.get(0).getMetadonnees();
            for (Metadonnee meta : listeMeta) {
               entete.add(meta.getCode());
            }
            request.setAttribute("entete", entete);

         } catch (ErreurTechniqueException e) {
            ObjectError erreur = new ObjectError("rechercheForm", e
                  .getMessage());
            result.addError(erreur);
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);
         } catch (AucunDocumentException e) {
            ObjectError erreur = new ObjectError("rechercheForm",
                  "Cette requête n'a retourné aucun résultat");
            result.addError(erreur);
         }

      }
      
      // Instancie le service des métadonnées dans la configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Préparation de la liste des métadonnées disponibles en recherche
      List<Metadonnee> listeMetaRecherchable = metaReferenceToMetadonnee(metaService
            .findMetadatasRecherchables());
      request.setAttribute("listeMetaRecherche", listeMetaRecherchable);

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      List<Metadonnee> listeMetaConsultable = metaReferenceToMetadonnee(metaService
            .findMetadatasConsultables());
      request.setAttribute("listeMetaAffichage", listeMetaConsultable);

      return "rechercherDocuments";
   }

}
