package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.sae.ihm.web.exploit.formulaire.IndexesCompositesAjoutForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.IndexesCompositesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.IndexesCompositesServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.metadata.exceptions.IndexCompositeException;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;

/**
 * Classe permettant de gérer les formats
 */
@Controller
@RequestMapping(value = "ajouterIndexesComposites")
public class IndexesCompositesAjoutController {

   @Autowired
   private ConfigurationsEnvironnement config;
   
   private static final String NOM_VUE = "ajouterIndexesComposites";
   
   private static final String NOM_FORMULAIRE = "indexesCompositesAjoutForm";
   
   private static final Logger LOGGER = LoggerFactory
   .getLogger(IndexesCompositesAjoutController.class);

   /**
    * Initialisation de l'écran d'ajout d'un index composite<br>
    * <br>
    * Utilisé par le menu principal de l'application "Ajouter un index composite"
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la request courante
    * @return le nom de la vue
    * 
    */
   @RequestMapping(method = RequestMethod.GET)
   public final String getForm(Model model, HttpSession session, HttpServletRequest request) {

      IndexesCompositesAjoutForm form = new IndexesCompositesAjoutForm();
      model.addAttribute(NOM_FORMULAIRE, form);

      List<MetadataReference> metas = getListeMetadonnees(session);
      model.addAttribute("listeMetas", metas);

      return NOM_VUE;
   }

   /**
    * Réalisation de l'ajout d'un indexe composite
    * 
    * @param metaForm
    *           l'objet de formulaire
    * @param result
    *           gestion des erreurs de saisie
    * @param session
    *           la session courante
    * @param request
    *           la request courante
    * @return le nom de la vue
    */
   @RequestMapping(method = RequestMethod.POST)
   public final String postForm(
         @ModelAttribute(NOM_FORMULAIRE) @Valid IndexesCompositesAjoutForm form,
         BindingResult result, HttpSession session, HttpServletRequest request) {
      
      //-- Création de l'indexe composite
      IndexesCompositesService service = new IndexesCompositesServiceImpl(session);
      request.setAttribute(NOM_FORMULAIRE, form);
      request.setAttribute("listeMetas", getListeMetadonnees(session));

      List<String> codesCourts = new ArrayList<String>();
      String param = form.getCategories();
      for (String meta : param.split("&")) {
         codesCourts.add(meta);
      }
    
      try {
         service.createCompositeIndex(codesCourts);
         String tpl = "L'indexe composite '%s' a bien été créé. Il pourra être utilisé après indexation.";
         String message = String.format(tpl, codesCourts);
         form.setMessage(message);
         LOGGER.debug(message);
      } catch (IndexCompositeException e) {
         String tpl = "Une erreur s'est produite lors de la création de l'indexe composite '%s'.";
         String message = String.format(tpl, codesCourts);
         form.setMessage(message);
         LOGGER.trace("ERREUR :" + message, e);
      }
      return NOM_VUE;
   }
   
   /**
    * Méthode de récupération de la liste des métadonnées
    * @param session
    * @return
    */
   private List<MetadataReference> metadatas;
   private List<MetadataReference> getListeMetadonnees(HttpSession session) {
      if(metadatas == null){
         //-- Initialise le résultat à renvoyer
         List<MetadataReference> listeMetas = new ArrayList<MetadataReference>();
   
         //-- Instantiation du service de gestion des métadonnées dans la
         // configuration courante
         MetadonneesService metaService = new MetadonneesServiceImpl(session, config);
   
         //-- Construit la liste des métadonnées, triées par code long
         listeMetas = metaService.findAllMetadata();
         metadatas = listeMetas;
      }
      return metadatas;
   }
}
