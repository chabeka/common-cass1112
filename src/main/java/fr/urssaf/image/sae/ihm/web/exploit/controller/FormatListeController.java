package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.sae.format.referentiel.model.FormatFichier;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunFormatException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.FormatListeForm;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.MetadataListeForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.FormatsService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.FormatsServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;

/**
 * Classe permettant de gérer les formats
 */
@Controller
@RequestMapping("consulterFormats")
public class FormatListeController {

  private static final String NOM_VUE = "consulterFormats";

  @Autowired
  private ConfigurationsEnvironnement config;


  private static final String NOM_FORMULAIRE = "formatListeForm";

  /**
   * Nombre de ligne à afficher dans le tableau de résultats
   */
  private static final int DEFAULT_NB_LIGNE_TABLEAU = 100;

  /**
   * Le GET de l'écran
   * 
   * @param model
   *          le modèle
   * @param session
   *          la session
   * @param request
   *          la requête
   * @param nbLignesTableau
   *          Nombre de ligne du tableau
   * @return le nom de la vue
   */
  @RequestMapping(method = RequestMethod.GET)
  public final String leGet(final Model model, final HttpSession session, final HttpServletRequest request, final Integer nbLignesTableau) {

    // Création de l'objet formulaire
    final FormatListeForm form = new FormatListeForm();
    model.addAttribute(NOM_FORMULAIRE, form);

    // Initialisation du nombre de lignes max dans le tableau
    // Regarde si cette info a été passée au GET
    if (nbLignesTableau != null) {
      form.setNbLignesTableau(nbLignesTableau);
    } else {
      form.setNbLignesTableau(DEFAULT_NB_LIGNE_TABLEAU);
    }
    // ligne ci-dessous pour displaytag
    request.setAttribute("nbLignesTableau", form.getNbLignesTableau());

    try {
      // Construction de la liste des formats
      final List<FormatFichier> formats = construitListeFormats(session);

      // Mémorisation de la liste en session
      request.setAttribute("listeFormats", formats);

    } catch (final Exception e) {
      final StringWriter sw = new StringWriter();
      final PrintWriter pw = new PrintWriter(sw);
      e.printStackTrace(pw);
      final String stacktrace = sw.toString();
      request.setAttribute("stacktrace", stacktrace);
    }

    // Renvoie le nom de la vue
    return NOM_VUE;

  }

  /**
   * Le POST de l'écran : affichage des métadonnées avec les filtres
   * utilisateurs
   * 
   * @param form
   *          Le formulaire
   * @param result
   *          Gestion des erreurs
   * @param session
   *          La session
   * @param request
   *          La requête
   * @return le nom de la vue
   */
  @RequestMapping(method = RequestMethod.POST)
  public final String lePost(@ModelAttribute(NOM_FORMULAIRE) @Valid final MetadataListeForm form, final BindingResult result, final HttpSession session,
                             final HttpServletRequest request) {

    if (!result.hasFieldErrors()) {

      try {
        final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
            .getAttribute(Constants.CQL);
        // Nombre de lignes max du tableau de résultat
        int nbLignesTableau;
        if (form.getNbLignesTableau() == 0) {
          nbLignesTableau = DEFAULT_NB_LIGNE_TABLEAU;
        } else {
          nbLignesTableau = form.getNbLignesTableau();
        }
        form.setNbLignesTableau(nbLignesTableau);
        request.setAttribute("nbLignesTableau", nbLignesTableau);

        final String action = request.getParameter("action");
        if ("supprimer".equals(action)) {
          final String idFormat = request.getParameter("identifiantATraiter");
          final FormatsService formatService = new FormatsServiceImpl(session, config, ccf);
          try {
            formatService.deleteFormat(idFormat);
          } catch (final AucunFormatException e) {
            final ObjectError erreur = new ObjectError("formatForm", "Le format n'existe pas !");
            result.addError(erreur);
          }

        }
        // Construction de la liste des métadonnées
        final List<FormatFichier> listeFormats = construitListeFormats(session);

        // Mémorisation de la liste en session
        request.setAttribute("listeFormats", listeFormats);

      } catch (final IllegalArgumentException e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);
        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);
      } catch (final Exception e) {
        final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
        result.addError(erreur);
        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        final String stacktrace = sw.toString();
        request.setAttribute("stacktrace", stacktrace);
      }
    }

    return NOM_VUE;
  }

  private List<FormatFichier> construitListeFormats(final HttpSession session) {

    final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
        .getAttribute(Constants.CQL);
    // Initialise le résultat à renvoyer
    List<FormatFichier> listeFormats = new ArrayList<>();

    // Instantiation du service de gestion des formats dans la
    // configuration courante
    // final StaticMessageSourceInitializer staticContextInitializer = new StaticMessageSourceInitializer(messageSource);
    final FormatsService formatService = new FormatsServiceImpl(session, config, ccf);

    // Construit la liste des formats, triées par identifiant
    listeFormats = formatService.findAllFormats();
    final Comparator<FormatFichier> comparator = new Comparator<FormatFichier>() {
      @Override
      public int compare(final FormatFichier format1, final FormatFichier format2) {

        return format1.getIdFormat().compareTo(format2.getIdFormat());

      }
    };
    Collections.sort(listeFormats, comparator);

    // Renvoie du résultat
    return listeFormats;
  }

}
