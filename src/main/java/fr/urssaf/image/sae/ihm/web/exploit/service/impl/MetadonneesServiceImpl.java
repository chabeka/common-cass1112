package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.List;

import javax.servlet.http.HttpSession;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.commons.cassandra.modeapi.IModeAPIDaoCql;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPICqlDaoImpl;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPIService;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPIServiceImpl;
import fr.urssaf.image.commons.cassandra.modeapi.ModeApiCqlSupport;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEServices;
import fr.urssaf.image.commons.dfce.service.impl.DFCEServicesImpl;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;
import fr.urssaf.image.sae.metadata.exceptions.MetadataReferenceNotFoundException;
import fr.urssaf.image.sae.metadata.referential.dao.SaeMetadataDao;
import fr.urssaf.image.sae.metadata.referential.dao.cql.IMetadataDaoCql;
import fr.urssaf.image.sae.metadata.referential.dao.cql.impl.MetadataCqlDaoImpl;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;
import fr.urssaf.image.sae.metadata.referential.services.SaeMetaDataService;
import fr.urssaf.image.sae.metadata.referential.services.impl.SaeMetaDataServiceImpl;
import fr.urssaf.image.sae.metadata.referential.support.SaeMetadataSupport;
import fr.urssaf.image.sae.metadata.referential.support.cql.SaeMetadataCqlSupport;
import fr.urssaf.image.sae.metadata.referential.support.facade.SaeMetadataSupportFacade;
import me.prettyprint.hector.api.Keyspace;

/**
 * Classe implémentant le service MetadonneesService
 */
public class MetadonneesServiceImpl implements MetadonneesService {

  private final SaeMetaDataService metaService;

  /**
   * Constructeur
   *
   * @param session
   *           La session
   * @param lesConfigs
   *           Configurations des environnements
   */
  public MetadonneesServiceImpl(final HttpSession session,
                                final ConfigurationsEnvironnement lesConfigs, final CassandraCQLClientFactory ccf) {

    // On va instancier manuellement le SaeMetaDataService des services SAE
    // (manuellement par opposition avec une instantiation par Spring)
    // Il faut utiliser les paramètres de configuration de la session en cours

    // Récupère les informations de la session courante

    final String nomConf = (String) session.getAttribute("nomConfiguration");

    final Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
                                                                                  nomConf);

    final DFCEConnection dfceConnection = (DFCEConnection) session
        .getServletContext().getAttribute(nomConf + "-dfce");

    // Instantiation du JobClockSupport
    final JobClockConfiguration clock = new JobClockConfiguration();
    clock.setMaxTimeSynchroError(10000000);
    clock.setMaxTimeSynchroWarn(2000000);
    final JobClockSupport jobClockSupport = new JobClockSupportImpl(keyspace, clock);

    // Gestion modeAPI Support
    final IModeAPIDaoCql modeAPIDaoCql = new ModeAPICqlDaoImpl(ccf);
    final ModeApiCqlSupport modeApiCqlSupport = new ModeApiCqlSupport(modeAPIDaoCql);
    final ModeAPIService modeAPIService = new ModeAPIServiceImpl(modeApiCqlSupport, Constants.REFRESH_CACHE_MODEAPI_TIME);

    // Instantiation du SaeMetadataDao
    final SaeMetadataDao metaDao = new SaeMetadataDao(keyspace);
    // Instantiation du SaeMetadataSupport
    final SaeMetadataSupport saeMetadataSupport = new SaeMetadataSupport(metaDao);
    // Instantiation du SaeMetadataCqlSupport
    final IMetadataDaoCql metadataDaoCql = new MetadataCqlDaoImpl(ccf);
    metadataDaoCql.setCcf(ccf);
    final SaeMetadataCqlSupport saeMetadataCqlSupport = new SaeMetadataCqlSupport(metadataDaoCql);
    // Instanciation de la facade
    final SaeMetadataSupportFacade saeMetadataSupportFacade = new SaeMetadataSupportFacade(saeMetadataSupport,
                                                                                           saeMetadataCqlSupport,
                                                                                           jobClockSupport,
                                                                                           modeAPIService);
    // Instantiation du ServiceProviderSupportMetadata
    final DFCEServices dfceServices = new DFCEServicesImpl(dfceConnection);

    // Enfin, instantiation du SaeMetaDataService
    metaService = new SaeMetaDataServiceImpl(saeMetadataSupportFacade, dfceServices);

  }

  /**
   * Méthode permettant de récupérer toutes les métadonnées présentes dans la
   * base Cassandra
   *
   * @return List<MetadataReference> liste de métadonnées
   */
  @Override
  public final List<MetadataReference> findAllMetadata() {
    return metaService.findAll();
  }

  /**
   * Méthode permettant de récupérer une métadonnée présente dans la base
   * Cassandra
   *
   * @param codeLong
   *           code long de la métadonnée à trouver
   * @return MetadataReference une métadonnée
   */
  @Override
  public final MetadataReference findMetadata(final String codeLong) {
    return metaService.find(codeLong);
  }

  /**
   * Méthode permettant de créer une métadonnée présente dans la base Cassandra
   *
   * @param meta
   *           une métadonnée
   */
  @Override
  public final void createMetadata(final MetadataReference meta) {
    metaService.create(meta);
  }

  /**
   * Méthode permettant de modifier une métadonnée présente dans la base
   * Cassandra
   *
   * @param meta
   *           une métadonnée
   * @throws MetadataReferenceNotFoundException
   *            Exception levée lorsque la métadonnée n'existe pas
   */
  @Override
  public final void modifyMetadata(final MetadataReference meta)
      throws MetadataReferenceNotFoundException {
    metaService.modify(meta);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public final List<MetadataReference> findMetadatasConsultables() {
    return metaService.findAllMetadatasConsultables();
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public final List<MetadataReference> findMetadatasRecherchables() {
    return metaService.findAllMetadatasRecherchables();
  }
}
