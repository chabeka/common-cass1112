package fr.urssaf.image.sae.ihm.web.exploit.modele;

import java.util.Date;

import org.joda.time.DateTime;

/**
 * Etat d'un job SAE.
 * 
 */
public class EtatJobSAE {
   
   /**
    * Code du job.
    * 
    * JOURNALISATION_EVT : Journalisation des événements du SAE
    * PURGE_EVT : Purge du journal des événements du SAE
    * PURGE_EXPLOIT : Purge du registre d'exploitation 
    * PURGE_SECU : Purge du registre de sécurité
    * PURGE_TECH : Purge du registre de surveillance technique 
    * PURGE_PILE_TRAVAUX : Purge de la pile des travaux
    * PURGE_CORBEILLE : Purge de la corbeille
    */
   private String codeJob;

   /**
    * Date.
    * 
    * Cette date correspond à la date de derniere execution pour le job de journalisation du sae.
    * Par contre, pour les jobs de purge, c'est la date des derniers elements purges.
    */
   private Date date;
   
   /**
    * Duree.
    * 
    * Pour les jobs de purge, c'est le nombre de jours de conservation des elements.
    * Pour le job de journalisation, c'est la duree entre deux journalisation.  
    */
   private Integer duree;
   
   /**
    * Flag indiquant si le job est en cours.
    */
   private boolean running;
   
   /**
    * Etat du job.
    */
   private String etat;

   /**
    * Getter sur le code du job.
    * @return String
    */
   public final String getCodeJob() {
      return codeJob;
   }

   /**
    * Setter sur le code du job.
    * @param codeJob code du job
    */
   public final void setCodeJob(final String codeJob) {
      this.codeJob = codeJob;
   }

   /**
    * Getter sur la date.
    * @return Date
    */
   public final Date getDate() {
      return date;
   }

   /**
    * Setter sur la date.
    * @param date date
    */
   public final void setDate(final Date date) {
      this.date = date;
   }

   /**
    * Getter sur la duree.
    * @return Integer
    */
   public final Integer getDuree() {
      return duree;
   }

   /**
    * Setter sur la duree.
    * @param duree duree
    */
   public final void setDuree(final Integer duree) {
      this.duree = duree;
   }

   /**
    * Getter sur le flag en cours.
    * @return boolean
    */
   public final boolean isRunning() {
      return running;
   }

   /**
    * Setter sur le flag en cours.
    * @param isRunning en cours
    */
   public final void setRunning(final boolean running) {
      this.running = running;
   }
   
   /**
    * Methode pour calculer l'etat du job.
    */
   public void calculateEtat() {
      Date dateMax = new DateTime().withTimeAtStartOfDay().minusDays(duree).toDate();
      if (!date.before(dateMax)) {
         // la date est correct, on suppose que le job est en succes
         etat = "SUCCESS";
      } else if (!"PURGE_PILE_TRAVAUX".equals(codeJob)) {
         // la date n'est pas correct, et on n'a un autre job que la purge de la pile des travaux
         // on a donc une erreur
         etat = "FAILURE";
      } else {
         // pour la purge de la pile des travaux, comme il n'y a pas de date, on met juste
         // un warning pour indiquer que tous les jobs n'ont pas été purgé
         etat = "WARNING";
      }
   }
   
   /**
    * Getter sur l'etat. 
    * @return String
    */
   public final String getEtat() {
      return etat;
   }
   
   /**
    * Setter sur l'etat.
    * @param etat etat
    */
   public final void setEtat(final String etat) {
      this.etat = etat;
   }
   
   
}
