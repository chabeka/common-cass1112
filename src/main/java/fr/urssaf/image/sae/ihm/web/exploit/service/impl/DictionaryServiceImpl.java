package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.List;

import org.apache.commons.collections.ListUtils;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.commons.cassandra.modeapi.IModeAPIDaoCql;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPICqlDaoImpl;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPIService;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPIServiceImpl;
import fr.urssaf.image.commons.cassandra.modeapi.ModeApiCqlSupport;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.sae.ihm.web.exploit.service.DictionaryService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;
import fr.urssaf.image.sae.metadata.exceptions.DictionaryNotFoundException;
import fr.urssaf.image.sae.metadata.referential.dao.DictionaryDao;
import fr.urssaf.image.sae.metadata.referential.dao.cql.IDictionaryDaoCql;
import fr.urssaf.image.sae.metadata.referential.dao.cql.impl.DictionaryCqlDaoImpl;
import fr.urssaf.image.sae.metadata.referential.model.Dictionary;
import fr.urssaf.image.sae.metadata.referential.support.DictionarySupport;
import fr.urssaf.image.sae.metadata.referential.support.cql.DictionaryCqlSupport;
import fr.urssaf.image.sae.metadata.referential.support.facade.DictionarySupportFacade;
import me.prettyprint.hector.api.Keyspace;

/**
 * Classe implémentant le service DictionaryService
 * 
 * 
 */
public class DictionaryServiceImpl implements DictionaryService {

  /**
   * Méthode permettant de récupérer tous les dictionnaires présents dans la
   * base Cassandra
   * 
   * @param keyspace
   *           keyspace à interroger
   * @return List<Dictionary> liste de dictionnaires
   */
  @Override
  public final List<Dictionary> findAllDictionaries(final Keyspace keyspace, final CassandraCQLClientFactory ccf) {
    final DictionarySupportFacade dictSupportFacade = getFacade(keyspace, ccf);
    return dictSupportFacade.findAll();
  }


  /**
   * Méthode permettant de récupérer un dictionnaire présent dans la base
   * Cassandra
   * 
   * @param keyspace
   *           keyspace à interroger
   * @param dict
   *           identifiant du dictionnaire à trouver
   * @return Dictionary un dictionnaire
   */
  @Override
  public final Dictionary findDictionary(final String dict,
                                         final Keyspace keyspace, final CassandraCQLClientFactory ccf) {

    final DictionarySupportFacade dictSupportFacade = getFacade(keyspace, ccf);
    return dictSupportFacade.find(dict);
  }

  /**
   * Méthode permettant de créer ou modifier un dictionnaire dans la base cassandra
   * 
   * @param dict
   *           un dictionnaire
   * @param clock
   *           JobClockConfiguration
   * @param keyspace
   *           keyspace à interroger
   */
  @Override
  public final void createOrModifyDictionary(final Dictionary dict,
                                             final JobClockConfiguration clock, final Keyspace keyspace, final CassandraCQLClientFactory ccf) {
    final DictionarySupportFacade dictSupportFacade = getFacade(keyspace, ccf);

    try{

      final Dictionary dictExist = dictSupportFacade.find(dict.getIdentifiant());
      // modification d'un dictionnaire on peut ajouter ou supprimer des valeurs
      final List<String> elementAjout = ListUtils.subtract(dict.getEntries(), dictExist.getEntries());
      final List<String> elementSup = ListUtils.subtract(dictExist.getEntries(), dict.getEntries());
      //suppression des éléments
      for(final String sup : elementSup){
        if(!dict.getEntries().contains(sup)){
          dictSupportFacade.deleteElement(dict.getIdentifiant(), sup);
        }
      }
      // Ajout des éléments
      for(final String ajout : elementAjout){
        if(!dictExist.getEntries().contains(ajout)){
          dictSupportFacade.addElement(dict.getIdentifiant(), ajout);
        }
      }

    }catch(final DictionaryNotFoundException ex){
      // ajout d'un nouveau dictionnaire
      for(final String value : dict.getEntries()){         
        dictSupportFacade.addElement(dict.getIdentifiant(), value);
      }
    }
  }

  /**
   * @param keyspace
   * @param ccf
   */
  private DictionarySupportFacade getFacade(final Keyspace keyspace, final CassandraCQLClientFactory ccf) {
    // Gestion modeAPI Support
    final IModeAPIDaoCql modeAPIDaoCql = new ModeAPICqlDaoImpl(ccf);
    final ModeApiCqlSupport modeApiCqlSupport = new ModeApiCqlSupport(modeAPIDaoCql);
    final ModeAPIService modeAPIService = new ModeAPIServiceImpl(modeApiCqlSupport, Constants.REFRESH_CACHE_MODEAPI_TIME);

    // Support thrift
    final DictionarySupport dictSupport = new DictionarySupport(new DictionaryDao(keyspace));
    // Support Cql
    final IDictionaryDaoCql dictionaryDaoCql = new DictionaryCqlDaoImpl(ccf);
    final DictionaryCqlSupport dictCqlSupport = new DictionaryCqlSupport(dictionaryDaoCql);
    // Facade
    final JobClockSupport jobClock = getClockSupport(keyspace);
    return new DictionarySupportFacade(dictSupport, dictCqlSupport, jobClock, modeAPIService);
  }

  /**
   * @param keyspace
   */
  private JobClockSupport getClockSupport(final Keyspace keyspace) {
    final JobClockConfiguration clock = new JobClockConfiguration();
    clock.setMaxTimeSynchroError(10000000);
    clock.setMaxTimeSynchroWarn(2000000);

    return new JobClockSupportImpl(keyspace, clock);
  }

}
