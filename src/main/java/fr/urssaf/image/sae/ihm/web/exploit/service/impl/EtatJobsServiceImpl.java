package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import me.prettyprint.hector.api.Keyspace;

import org.apache.curator.framework.CuratorFramework;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.sae.commons.dao.ParametersDao;
import fr.urssaf.image.sae.commons.exception.ParameterNotFoundException;
import fr.urssaf.image.sae.commons.service.ParametersService;
import fr.urssaf.image.sae.commons.service.impl.ParametersServiceImpl;
import fr.urssaf.image.sae.commons.support.ParametersSupport;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.EtatJobSAE;
import fr.urssaf.image.sae.ihm.web.exploit.service.EtatJobsService;
import fr.urssaf.image.sae.pile.travaux.dao.JobHistoryDao;
import fr.urssaf.image.sae.pile.travaux.dao.JobRequestDao;
import fr.urssaf.image.sae.pile.travaux.dao.JobsQueueDao;
import fr.urssaf.image.sae.pile.travaux.model.JobRequest;
import fr.urssaf.image.sae.pile.travaux.service.JobLectureService;
import fr.urssaf.image.sae.pile.travaux.service.impl.JobLectureServiceImpl;

/**
 * Classe implémentant le service EtatJobsService
 */
public class EtatJobsServiceImpl implements EtatJobsService {

   private ParametersService parametersService; 
   
   private JobLectureService jobsLecture;
   
   private Keyspace keyspace;
   
   /**
    * Constructeur
    */
   public EtatJobsServiceImpl() {
      super();
   }

   /**
    * Constructeur
    * 
    * @param keyspace
    *           Le keyspace
    * @param lesConfigs
    *           Les configurations environnement
    * @param curator
    *           Le curator
    */
   public EtatJobsServiceImpl(Keyspace keyspace,
         ConfigurationsEnvironnement lesConfigs, CuratorFramework curator) {

      // On va instantier manuellement le ParametersService des services
      // SAE
      // (manuellement par opposition avec une instantiation par Spring)
      // Il faut utiliser les paramètres de configuration de la session en cours

      // Instantiation du JobClockSupport
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      JobClockSupport jobClockSupport = new JobClockSupportImpl(keyspace, clock);

      // Instantiation du ParametersDao
      ParametersDao parametersDao = new ParametersDao(keyspace);
      
      // Instantiation du ParametersSupport
      ParametersSupport parametersSupport = new ParametersSupport(parametersDao);
      
      // Enfin, instantiation du ParametersService
      parametersService = new ParametersServiceImpl(parametersSupport, jobClockSupport, curator);
      
      // Instantiation du JobRequestDao, JobQueueDao et JobHistoryDao
      JobRequestDao jobRequestDao = new JobRequestDao(keyspace);
      JobsQueueDao jobsQueueDao = new JobsQueueDao(keyspace);
      JobHistoryDao jobHistoryDao = new JobHistoryDao(keyspace);
      
      // Enfin, instantiation du JobLectureService
      jobsLecture = new JobLectureServiceImpl(jobRequestDao,
            jobsQueueDao, jobHistoryDao);
      
      this.keyspace = keyspace;
   }
   
   /**
    * {@inheritDoc}
    */
   @Override
   public List<EtatJobSAE> getEtatJobsSAE() {
      
      List<EtatJobSAE> etatsJobs = new ArrayList<EtatJobSAE>();
      
      addEtatJob("PURGE_EVT", etatsJobs);
      addEtatJob("PURGE_TECH", etatsJobs);
      addEtatJob("PURGE_SECU", etatsJobs);
      addEtatJob("PURGE_EXPLOIT", etatsJobs);
      addEtatJob("JOURNALISATION_EVT", etatsJobs);
      addEtatPurgePile(etatsJobs);
      addEtatJob("PURGE_CORBEILLE", etatsJobs);
      
      return etatsJobs;
   }
   
   /**
    * Methode permettant de gerer les etats des jobs a l'aide la CF Parameters.
    * @param codeJob code du job
    * @param etatsJobs liste des jobs
    */
   private void addEtatJob(final String codeJob, final List<EtatJobSAE> etatsJobs) {
      EtatJobSAE etatJob = new EtatJobSAE();
      etatJob.setCodeJob(codeJob);
      try {
         if ("PURGE_EVT".equals(codeJob)) {
            etatJob.setDate(parametersService.getPurgeEvtDate());
            etatJob.setDuree(parametersService.getPurgeEvtDuree());
            etatJob.setRunning(parametersService.isPurgeEvtIsRunning());
         } else if ("PURGE_TECH".equals(codeJob)) {
            etatJob.setDate(parametersService.getPurgeTechDate());
            etatJob.setDuree(parametersService.getPurgeTechDuree());
            etatJob.setRunning(parametersService.isPurgeTechIsRunning());
         } else if ("PURGE_SECU".equals(codeJob)) {
            etatJob.setDate(parametersService.getPurgeSecuDate());
            etatJob.setDuree(parametersService.getPurgeSecuDuree());
            etatJob.setRunning(parametersService.isPurgeSecuIsRunning());
         } else if ("PURGE_EXPLOIT".equals(codeJob)) {
            etatJob.setDate(parametersService.getPurgeExploitDate());
            etatJob.setDuree(parametersService.getPurgeExploitDuree());
            etatJob.setRunning(parametersService.isPurgeExploitIsRunning());
         } else if ("JOURNALISATION_EVT".equals(codeJob)) {
            etatJob.setDate(parametersService.getJournalisationEvtDate());
            etatJob.setDuree(Integer.valueOf(1));
            etatJob.setRunning(parametersService.isJournalisationEvtIsRunning());
         } else if ("PURGE_CORBEILLE".equals(codeJob)) {
            etatJob.setDate(parametersService.getPurgeCorbeilleDateLancement());
            etatJob.setDuree(parametersService.getPurgeCorbeilleDuree());
            etatJob.setRunning(parametersService.isPurgeCorbeilleIsRunning());
         } 
         // calcule le statut du job
         etatJob.calculateEtat();
      } catch (ParameterNotFoundException e) {
         e.printStackTrace();
      }
      etatsJobs.add(etatJob);
   }

   /**
    * Methode permettant de gerer l'etat de la purge de la pile des travaux
    * @param etatsJobs liste des jobs
    */
   private void addEtatPurgePile(final List<EtatJobSAE> etatsJobs) {
      // etat de la purge de la pile des travaux
      EtatJobSAE etatPurgePile = new EtatJobSAE();
      etatPurgePile.setCodeJob("PURGE_PILE_TRAVAUX");
      List<JobRequest> jobs  = jobsLecture.getAllJobs(keyspace, 200000);
      // on va rechercher la date du job le plus ancien
      Date minDate = new Date();
      for (JobRequest job : jobs) {
         if (job.getCreationDate().before(minDate)) {
            minDate = job.getCreationDate();
         }
      }
      etatPurgePile.setDate(minDate);
      // par defaut, le nombre de jours de retention des jobs dans la pile est de 30 jours
      etatPurgePile.setDuree(Integer.valueOf(30));
      // on ne peut pas facilement dire si le job est en cours
      // donc, on le met termine
      etatPurgePile.setRunning(false);
      // calcule le statut du job
      etatPurgePile.calculateEtat();
      etatsJobs.add(etatPurgePile);
   }

   

}
