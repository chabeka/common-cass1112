package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.apache.commons.collections.ListUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterDictionaryForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Dictionnaire;
import fr.urssaf.image.sae.ihm.web.exploit.service.DictionaryService;
import fr.urssaf.image.sae.metadata.exceptions.DictionaryNotFoundException;
import fr.urssaf.image.sae.metadata.referential.model.Dictionary;

/**
 * Classe permettant de gérer les dictionnaires
 * 
 * 
 */
@Controller
public class DictionaryController {

   /**
    * Interface permettant de réaliser les opérations sur les dictionnaires
    */
   @Autowired
   private DictionaryService dictService;

   private static final String NOM_FORMULAIRE = "dictForm";

   private static final String TYPE_AFFICHAGE_CONS = "consultation";
   private static final String TYPE_AFFICHAGE_DET = "detail";

   // Nombre de ligne à afficher dans le tableau de résultats
   private static final int NB_LIGNE_TABLEAU = 50;

   /**
    * Initialisation de l'écran de consultation des dictionnaires
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            Exception
    */
   @RequestMapping(value = "consulterDictionnaires", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);

      ConsulterDictionaryForm form = new ConsulterDictionaryForm();
      form.setNbLignesTableau(NB_LIGNE_TABLEAU);
      form.setModeRecherche("modeTous");
      model.addAttribute(NOM_FORMULAIRE, form);

      List<Dictionary> listeDict = dictService.findAllDictionaries(keyspace);

      // on trie les dictionnaires en fonction de leur identifiant
      Comparator<Dictionary> comparator = new Comparator<Dictionary>() {
         @Override
         public int compare(Dictionary dict1, Dictionary dict2) {

            return dict1.getId().compareTo(dict2.getId());

         }
      };

      Collections.sort(listeDict, comparator);
      request.setAttribute("listeDict", listeDict);

      return "consulterDictionnaires";

   }

   /**
    * Initialisation de l'écran d'ajout d'un Dictionnaires
    * 
    * @param model
    *           Le modèle
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return nom de la vue
    */
   @RequestMapping(value = "ajoutDictionnaire", method = RequestMethod.GET)
   public final String initialisationAjoutMeta(Model model,
         HttpSession session, HttpServletRequest request) {

      ConsulterDictionaryForm form = new ConsulterDictionaryForm();
      Dictionnaire dict = new Dictionnaire(StringUtils.EMPTY,
            ListUtils.EMPTY_LIST);
      form.setDetailDico(dict);
      form.setAjout(Boolean.TRUE);
      form.setModification(Boolean.FALSE);
      model.addAttribute(NOM_FORMULAIRE, form);

      return "gestionDictionnaire";

   }

   /**
    * Lancement de la recherche des dictionnaires
    * 
    * @param dicoForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return La page à afficher
    */
   @RequestMapping(value = "lancerConsultDico")
   public final String rechercherDico(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterDictionaryForm dicoForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {

         try {
            // Récupération de la configuration choisie
            String nomConf = (String) session.getAttribute("nomConfiguration");
            Keyspace keyspace = (Keyspace) session.getServletContext()
                  .getAttribute(nomConf);

            dicoForm.setModeAffichage(TYPE_AFFICHAGE_CONS);
            request.setAttribute("modeAffichage", TYPE_AFFICHAGE_CONS);
            // Nombre de ligne max du tableau de résultat
            if (dicoForm.getNbLignesTableau() == 0) {
               dicoForm.setNbLignesTableau(NB_LIGNE_TABLEAU);
               request.setAttribute("nbLignesTableau", NB_LIGNE_TABLEAU);
            } else {
               request.setAttribute("nbLignesTableau", dicoForm
                     .getNbLignesTableau());
            }
            if ("modeTous".equals(dicoForm.getModeRecherche())) {
               List<Dictionary> listeDict = dictService
                     .findAllDictionaries(keyspace);
               // on trie les métadonnées non typés en fonction de leur code
               // long
               Comparator<Dictionary> comparator = new Comparator<Dictionary>() {
                  @Override
                  public int compare(Dictionary dict1, Dictionary dict2) {

                     return dict1.getId().compareTo(dict2.getId());

                  }
               };

               Collections.sort(listeDict, comparator);
               request.setAttribute("listeDict", listeDict);
            }
            if ("modeIdentifiant".equals(dicoForm.getModeRecherche())) {
               if (!StringUtils.isEmpty(dicoForm.getIdentifiant())) {
                  Dictionary dico = dictService.findDictionary(dicoForm
                        .getIdentifiant(), keyspace);
                  List<Dictionary> list = new ArrayList<Dictionary>();
                  list.add(dico);
                  dicoForm.setListeDict(list);
                  request.setAttribute("listeDict", list);
               }

            }

         } catch (IllegalArgumentException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);
         } catch (DictionaryNotFoundException e) {
            ObjectError erreur = new ObjectError(NOM_FORMULAIRE, e.getMessage());
            result.addError(erreur);


         }

      }

      return "consulterDictionnaires";
   }

   /**
    * Récupération du détail d'un dictionnaire
    * 
    * @param dicoForm
    *           Le formulaire
    * @param result
    *           Gestion des erreurs
    * @param session
    *           La session
    * @param request
    *           La requête
    * @param identifiant
    *           identifiant du dictionnaire
    * @return La page à afficher
    */
   @RequestMapping(value = "detailDico")
   public final String afficherDetailDico(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterDictionaryForm dicoForm,
         BindingResult result,
         HttpSession session,
         HttpServletRequest request,
         @RequestParam(value = "identifiant", required = true) String identifiant) {

      if (!result.hasFieldErrors()) {

         // Récupération de la configuration choisie
         String nomConf = (String) session.getAttribute("nomConfiguration");
         Keyspace keyspace = (Keyspace) session.getServletContext()
               .getAttribute(nomConf);
         // Colonnes à afficher suivant les types d'affichage
         dicoForm.setModeAffichage(TYPE_AFFICHAGE_DET);
         dicoForm.setModification(Boolean.TRUE);
         dicoForm.setAjout(Boolean.FALSE);
         Dictionnaire dico = new Dictionnaire(dictService.findDictionary(
               identifiant, keyspace));
         dicoForm.setDetailDico(dico);
      }
      return "gestionDictionnaire";

   }

   /**
    * réalisation de l'ajout ou de la modification d'un dictionnaire
    * 
    * @param dicoForm
    *           Le formulaire
    * @param result
    *           Le résultat
    * @param session
    *           La session
    * @param request
    *           La requête
    * @return {@link RedirectView}
    */
   @RequestMapping(value = "gestionDictionnaire")
   public final String gestionMeta(
         @ModelAttribute(NOM_FORMULAIRE) @Valid ConsulterDictionaryForm dicoForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      // Récupération de la configuration choisie
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);

      // // intialisation du jobClock avec les paramètres nécessaires.
      JobClockConfiguration clock = new JobClockConfiguration();
      clock.setMaxTimeSynchroError(10000000);
      clock.setMaxTimeSynchroWarn(2000000);
      Dictionary dicoModifie = new Dictionary(dicoForm.getDetailDico()
            .getIdentifiant(), dicoForm.getDetailDico().getEntries());
      if (dicoForm.getAjout()) {
         try {
            Dictionary existingDico = dictService.findDictionary(dicoForm
                  .getDetailDico().getIdentifiant(), keyspace);
            if (null != existingDico) {
               ObjectError erreur = new ObjectError(NOM_FORMULAIRE,
                     "Il existe déjà un dictionnaire avec l'identifiant : "
                           .concat(existingDico.getId()));
               result.addError(erreur);
               return "gestionDictionnaire";
            }
         } catch (DictionaryNotFoundException ex) {

            dictService.createOrModifyDictionary(dicoModifie, clock, keyspace);
            dicoForm.setMessage("Le dictionnaire ".concat(dicoModifie.getId())
                  .concat(" a bien été créé"));
            dicoForm.setAjout(Boolean.FALSE);
            dicoForm.setModification(Boolean.TRUE);
         }
      } else if (dicoForm.getModification()) {
         dictService.createOrModifyDictionary(dicoModifie, clock, keyspace);
         dicoForm.setMessage("Le dictionnaire ".concat(dicoModifie.getId())
               .concat(" a bien été modifié"));
         dicoForm.setAjout(Boolean.FALSE);
         dicoForm.setModification(Boolean.TRUE);
      }

      return "gestionDictionnaire";
      // return new RedirectView("detailDico.do?identifiant=".concat(dicoModifie
      // .getId()));
   }

}
