package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import me.prettyprint.hector.api.Keyspace;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunDocumentException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.ConsulterDocumentForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDocument;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;
import fr.urssaf.image.sae.storage.dfce.model.StorageTechnicalMetadatas;

/**
 * Classe centralisant les opérations utilisateurs pour la consultation d'un
 * document
 * 
 */

@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@Controller
public class ConsulterDocumentController {

   /**
    * Service offrant les opérations de recherche sur un ou plusieurs documents
    */
   @Autowired
   private RechercherService rechercherService;

   /**
    * Liste des environnements disponibles pour effectuer les opérations
    */
   @Autowired
   private ConfigurationsEnvironnement environnements;

   @Autowired
   private ConfigurationsEnvironnement config;

   /**
    * Initialisation du formulaire de consultation de document
    * 
    * @param model
    *           le modèle
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    * @throws InterruptedException
    *            l'exception levée
    */
   @RequestMapping(value = "consulterDocument", method = RequestMethod.GET)
   public final String initialisation(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Instancie le service des métadonnées dans la configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      List<Metadonnee> listeMetaConsultable = metaReferenceToMetadonnee(metaService
            .findMetadatasConsultables());
      request.setAttribute("listeMetaAffichage", listeMetaConsultable);

      ConsulterDocumentForm form = new ConsulterDocumentForm();

      model.addAttribute("consultationForm", form);

      return "consulterDocument";

   }

   /**
    * Initialisation de la consultation de document dans la corbeille
    * @param model
    * @param session
    * @param request
    * @return
    * @throws InterruptedException
    */
   @RequestMapping(value = "consulterDocumentEnCorbeille", method = RequestMethod.GET)
   public final String initConsultDocInRecycleBin(Model model, HttpSession session,
         HttpServletRequest request) throws InterruptedException {

      // Instancie le service des métadonnées dans la configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      List<Metadonnee> listeMetaConsultable = metaReferenceToMetadonnee(metaService
            .findMetadatasConsultables());
      
      // Enlever le GEL de la liste des métadonnées consultables dans la corbeille
      int indexGel = -1;
      for (Metadonnee metadonnee : listeMetaConsultable) {
         if(metadonnee.getShortCode().equals(StorageTechnicalMetadatas.GEL.getShortCode())){
            indexGel = listeMetaConsultable.indexOf(metadonnee);
         }
      }
      if(indexGel > 0 ){
         listeMetaConsultable.remove(indexGel);
      }
      
      request.setAttribute("listeMetaAffichage", listeMetaConsultable);
      ConsulterDocumentForm form = new ConsulterDocumentForm();

      model.addAttribute("consultationForm", form);

      return "consulterDocumentEnCorbeille";

   }

   /**
    * Conversion d'une liste de MetadataReference en une liste de Metadonnee
    * @param findMetadatasRecherchables
    * @return une liste de Metadonnee
    */
   private List<Metadonnee> metaReferenceToMetadonnee(
         List<MetadataReference> findMetadatasRecherchables) {
      List<Metadonnee> listeMetadonnee = new ArrayList<Metadonnee>();
      for (MetadataReference metadataReference : findMetadatasRecherchables) {
         Metadonnee meta = new Metadonnee();
         meta.setShortCode(metadataReference.getShortCode());
         meta.setCode(metadataReference.getLongCode());
         if (metadataReference.getIsIndexed()) {
            meta.setIndexee("Oui");
         } else {
            meta.setIndexee("Non");
         }
         meta.setLibelle(metadataReference.getLabel());
         listeMetadonnee.add(meta);
      }
      return listeMetadonnee;
   }

   /**
    * Lance la consultation de document
    * 
    * @param consulterForm
    *           le formulaire de consultation
    * @param result
    *           gestion des erreurs
    * @param session
    *           la session
    * @param request
    *           la requête
    * @return la page à afficher
    */
   @RequestMapping(value = "lancerConsultDoc")
   public final String consulterDocument(
         @ModelAttribute("consultationForm") @Valid ConsulterDocumentForm consulterForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {
         try {
            SaeDocument saeDoc;
            // Récupération de l'uuid
            UUID uuid = consulterForm.getIdentifiant();
            // Récupération des métadonnées à afficher en retour
            List<String> codesMeta = consulterForm.getCodeMeta();

            // Récupération de l'url du webservice
            String nomConf = (String) session.getAttribute("nomConfiguration");
            ConfigurationEnvironnement conf = environnements
                  .getConfiguration(nomConf);
            String urlServiceWeb = conf.getUrlWs().toString();

            // Récupération du login de l'utilisateur (pour la traçabilité)
            String login = (String) session.getAttribute("login");

            // Lancement de la consultation (on ne stocke pas le contenu du
            // document)
            saeDoc = rechercherService.consulterDocument(uuid, codesMeta,
                  urlServiceWeb, false, login);

            request.setAttribute("resRecherche", saeDoc);
            request.setAttribute("id", uuid.toString());

         } catch (ErreurTechniqueException e) {
            ObjectError erreur = new ObjectError("consultationForm", e
                  .getMessage());
            result.addError(erreur);

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);

         } catch (AucunDocumentException e) {
            ObjectError erreur = new ObjectError("consultationForm",
                  "Aucun document ne correspond à cet identifiant");
            result.addError(erreur);
         }

      }

      // Instancie le service des métadonnées dans la configuration courante
      MetadonneesService metaService = new MetadonneesServiceImpl(session,
            config);

      // Préparation de la liste des métadonnées disponibles pour la
      // consultation
      List<Metadonnee> listeMetaConsultable = metaReferenceToMetadonnee(metaService
            .findMetadatasConsultables());
      request.setAttribute("listeMetaAffichage", listeMetaConsultable);

      return "consulterDocument";
   }

   /**
    * Permet le téléchargement du document
    * 
    * @param session
    *           la session
    * @param response
    *           la réponse
    * @param idConsult
    *           l'identifiant du document à télécharger
    * @throws AucunDocumentException
    *            Exception levée si aucun document retourné
    * @throws ErreurTechniqueException
    *            Excpetion levée si erreur technique
    * @throws IOException
    *            Exception levée lors de l'affichage du fichier
    */
   @RequestMapping(value = "telecharger")
   public final void telecharger(HttpSession session,
         HttpServletResponse response, String idConsult)
               throws AucunDocumentException, ErreurTechniqueException, IOException {

      SaeDocument saeDoc;

      // Récupération de l'uuid
      UUID uuid = UUID.fromString(idConsult);
      // Récupération des métadonnées à afficher en retour
      List<String> codesMeta = null;

      // Récupération de l'url du webservice
      String nomConf = (String) session.getAttribute("nomConfiguration");
      ConfigurationEnvironnement conf = environnements
            .getConfiguration(nomConf);
      String urlServiceWeb = conf.getUrlWs().toString();

      // Récupération du login de l'utilisateur (pour la traçabilité)
      String login = (String) session.getAttribute("login");

      // Lancement de la consultation (on stocke le contenu du document)
      saeDoc = rechercherService.consulterDocument(uuid, codesMeta,
            urlServiceWeb, true, login);

      // Récupération du nom du fichier
      List<Metadonnee> listeMeta = saeDoc.getMetadonnees();
      String nomFichier = idConsult.concat(".pdf");
      for (Metadonnee metadonnee : listeMeta) {
         if ("NomFichier".equals(metadonnee.getCode())) {
            nomFichier = metadonnee.getValeur();
            break;
         }
      }

      // Affichage du fichier
      response.setContentType("application/pdf");
      response.setHeader("Content-Disposition", "attachment; filename=\""
            + nomFichier + "\"");

      ServletOutputStream outputStream = response.getOutputStream();
      outputStream.write(saeDoc.getContenu());

      outputStream.flush();
      outputStream.close();

   }

   /**
    * Permet le téléchargement du document
    * 
    * @param session
    *           la session
    * @param response
    *           la réponse
    * @param idConsult
    *           l'identifiant du document à télécharger
    * @throws AucunDocumentException
    *            Exception levée si aucun document retourné
    * @throws ErreurTechniqueException
    *            Excpetion levée si erreur technique
    * @throws IOException
    *            Exception levée lors de l'affichage du fichier
    */
   @RequestMapping(value = "telechargerInRecycleBin")
   public final void telechargerInRecycleBin(HttpSession session,
         HttpServletResponse response, String idConsult)
               throws AucunDocumentException, ErreurTechniqueException, IOException {

      SaeDocument saeDoc;

      // Récupération de l'uuid
      UUID uuid = UUID.fromString(idConsult);
      // Récupération des métadonnées à afficher en retour
      List<String> codesMeta = null;

      // Récupération du nom de la configuration selectionnée
      String nomConf = (String) session.getAttribute("nomConfiguration");
      Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
            nomConf);
      // Récupération de la connection à DFCe
      DFCEConnection dfceConnection = (DFCEConnection) session
            .getServletContext().getAttribute(nomConf + "-dfce");

      // Lancement de la consultation (on stocke le contenu du document)
      saeDoc = rechercherService.consultDocInRecycleBin(uuid, codesMeta, true,
            dfceConnection, keyspace);

      // Récupération du nom du fichier
      List<Metadonnee> listeMeta = saeDoc.getMetadonnees();
      String nomFichier = idConsult.concat(".pdf");
      for (Metadonnee metadonnee : listeMeta) {
         if ("NomFichier".equals(metadonnee.getCode())) {
            nomFichier = metadonnee.getValeur();
            break;
         }
      }

      // Affichage du fichier
      response.setContentType("application/pdf");
      response.setHeader("Content-Disposition", "attachment; filename=\""
            + nomFichier + "\"");

      ServletOutputStream outputStream = response.getOutputStream();
      outputStream.write(saeDoc.getContenu());

      outputStream.flush();
      outputStream.close();

   }

   /**
    * Action de consultation de document dans la corbeille
    * @param consulterForm
    * @param result
    * @param session
    * @param request
    * @return
    */
   @RequestMapping(value = "lancerConsultDocEnCorbeille")
   public final String consultDocInRecycleBin(
         @ModelAttribute("consultationForm") @Valid ConsulterDocumentForm consulterForm,
         BindingResult result, HttpSession session, HttpServletRequest request) {

      if (!result.hasFieldErrors()) {
         try {
            SaeDocument saeDoc;
            // Récupération de l'uuid
            UUID uuid = consulterForm.getIdentifiant();
            // Récupération des métadonnées à afficher en retour
            List<String> shortCodesMeta = consulterForm.getShortCodeMeta();

            // Instancie le service des métadonnées dans la configuration courante
            MetadonneesService metaService = new MetadonneesServiceImpl(session,
                  config);            
            // Préparation de la liste des métadonnées disponibles pour la
            // consultation
            List<Metadonnee> listeMetaConsultable = metaReferenceToMetadonnee(metaService
                  .findMetadatasConsultables());
            
            // Enlever le GEL de la liste des métadonnées consultables dans la corbeille
            int indexGel = -1;
            for (Metadonnee metadonnee : listeMetaConsultable) {
               if(metadonnee.getShortCode().equals(StorageTechnicalMetadatas.GEL.getShortCode())){
                  indexGel = listeMetaConsultable.indexOf(metadonnee);
               }
            }
            if(indexGel > 0 ){
               listeMetaConsultable.remove(indexGel);
            }
            
            request.setAttribute("listeMetaAffichage", listeMetaConsultable);

            // Récupération du nom de la configuration selectionnée
            String nomConf = (String) session.getAttribute("nomConfiguration");
            Keyspace keyspace = (Keyspace) session.getServletContext()
                  .getAttribute(nomConf);
            // Récupération de la connection à DFCe
            DFCEConnection dfceConnection = (DFCEConnection) session
                  .getServletContext().getAttribute(nomConf + "-dfce");

            saeDoc = rechercherService.consultDocInRecycleBin(uuid,
                  shortCodesMeta, false, dfceConnection, keyspace);

            List<Metadonnee> metadataSaeDoc = getMetadonneeSaeDocByShortCodes(saeDoc.getMetadonnees(), listeMetaConsultable);

            saeDoc.setMetadonnees(metadataSaeDoc);

            request.setAttribute("resRecherche", saeDoc);
            request.setAttribute("id", uuid.toString());

         } catch (ErreurTechniqueException e) {
            ObjectError erreur = new ObjectError("consultationForm", e
                  .getMessage());
            result.addError(erreur);

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);

         } catch (AucunDocumentException e) {
            ObjectError erreur = new ObjectError("consultationForm",
                  "Aucun document dans la corbeille ne correspond à cet identifiant");
            result.addError(erreur);
         }
      }
      return "consulterDocumentEnCorbeille";
   }

   /**
    * Mapping du shortCode par le code dans les métadonnées retournées
    * @param metadonnees
    * @param listeMetaRecherchable
    * @return
    */
   private List<Metadonnee> getMetadonneeSaeDocByShortCodes(
         List<Metadonnee> metadonnees, List<Metadonnee> listeMetaRecherchable) {
      for (Metadonnee metadonnee : metadonnees) {
         for (Metadonnee metadonneeRecherchable : listeMetaRecherchable) {
            if( metadonnee.getCode().equals(metadonneeRecherchable.getShortCode())){
               metadonnee.setCode(metadonneeRecherchable.getCode());
            }
         }
      }
      return metadonnees;
   }

}
