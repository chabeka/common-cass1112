/**
 * 
 */
package fr.urssaf.image.sae.ihm.web.exploit.service;

import java.util.List;
import java.util.UUID;

import me.prettyprint.hector.api.Keyspace;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunJobException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.MiseAJourJobException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Job;
import fr.urssaf.image.sae.pile.travaux.exception.JobNonReinitialisableException;
import fr.urssaf.image.sae.pile.travaux.model.JobHistory;

/**
 * Ce service permet de réaliser des opérations sur la pile de travaux
 * 
 */
public interface GererPileService {

   /**
    * Renvoit la liste de tous les travaux actuellement dans la pile
    * 
    * @param keyspace
    *           keyspace de la configuration choisie
    * @param maxKeysToRead
    *           nombre de clés maximum à récuperer lors de la lecture de la pile
    *           des travaux
    * @return Liste de tous les travaux actuellement dans la pile
    * @throws ErreurTechniqueException
    *            Erreur si pb lors de la récupération des travaux
    */
   List<Job> rechercherTousTravaux(Keyspace keyspace, int maxKeysToRead)
         throws ErreurTechniqueException;

   /**
    * Renvoit le job correspondant à l'indentifiant
    * 
    * @param keyspace
    *           Le keyspace
    * @param idJob
    *           l'indentifiant du job à récupérer
    * @return Le job récupéré
    */
   Job getJob(Keyspace keyspace, UUID idJob);

   /**
    * Supprime le travail dont l'identifiant est passé en paramètre
    * 
    * @param uuid
    *           Identifiant unique du travail à supprimer
    * @param keyspace
    *           keyspace de la configuration choisie
    * @throws AucunJobException
    *            Exception levée lorsque le travail à supprimer n'existe pas
    * @throws MiseAJourJobException
    *            Exception levée lorsque le travail ne satisfait pas aux
    *            conditions de suppression
    */
   void supprimerTravail(UUID uuid, Keyspace keyspace)
         throws AucunJobException, MiseAJourJobException;

   /**
    * Mise à jour du travail afin que celui-ci soit en état d'être relancé par
    * l'odonnanceur
    * 
    * @param uuid
    *           Identifiant unique du travail à mettre à jour
    * @param keyspace
    *           keyspace de la configuration choisie
    * 
    * @throws AucunJobException
    *            Exception levée lorsque le travail à supprimer n'existe pas
    * @throws MiseAJourJobException
    *            Exception levée lorsque le travail ne satisfait pas aux
    *            conditions de suppression
    * @throws JobNonReinitialisableException
    *            Exception levée lorsque le job n'est pas réinitialisable
    */
   void remettreTravailEtatLancement(UUID uuid, Keyspace keyspace)
         throws AucunJobException, MiseAJourJobException,
         JobNonReinitialisableException;

   /**
    * Récupère l'historique du job passé en paramètre
    * 
    * @param uuid
    *           id di job dont on récupère l'historique
    * @param keyspace
    *           keyspace de la configuration choisie
    * @return l'historique du job
    * @throws ErreurTechniqueException
    *            Erreur si problème lors de la récupération de l'historique
    */
   List<JobHistory> getHistorique(UUID uuid, Keyspace keyspace)
         throws ErreurTechniqueException;
}
