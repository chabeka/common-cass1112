package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.List;

import javax.servlet.http.HttpSession;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.commons.cassandra.modeapi.IModeAPIDaoCql;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPICqlDaoImpl;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPIService;
import fr.urssaf.image.commons.cassandra.modeapi.ModeAPIServiceImpl;
import fr.urssaf.image.commons.cassandra.modeapi.ModeApiCqlSupport;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockConfiguration;
import fr.urssaf.image.commons.cassandra.support.clock.JobClockSupport;
import fr.urssaf.image.commons.cassandra.support.clock.impl.JobClockSupportImpl;
import fr.urssaf.image.sae.format.exception.UnknownFormatException;
import fr.urssaf.image.sae.format.referentiel.dao.ReferentielFormatDao;
import fr.urssaf.image.sae.format.referentiel.dao.cql.IReferentielFormatDaoCql;
import fr.urssaf.image.sae.format.referentiel.dao.cql.impl.ReferentielFormatCqlDaoImpl;
import fr.urssaf.image.sae.format.referentiel.dao.support.ReferentielFormatSupport;
import fr.urssaf.image.sae.format.referentiel.dao.support.cql.ReferentielFormatCqlSupport;
import fr.urssaf.image.sae.format.referentiel.dao.support.facade.ReferentielFormatSupportFacade;
import fr.urssaf.image.sae.format.referentiel.model.FormatFichier;
import fr.urssaf.image.sae.format.referentiel.service.ReferentielFormatService;
import fr.urssaf.image.sae.format.referentiel.service.impl.ReferentielFormatServiceImpl;
import fr.urssaf.image.sae.format.utils.message.SaeFormatMessageHandler;
import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunFormatException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.service.FormatsService;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;
import me.prettyprint.hector.api.Keyspace;

/**
 * Classe implémentant le service FormatsService
 */
public class FormatsServiceImpl implements FormatsService {

  private final ReferentielFormatService formatService;

  /**
   * Constructeur
   * 
   * @param session
   *           La session
   * @param lesConfigs
   *           Les configurations environnement
   */
  public FormatsServiceImpl(final HttpSession session,
                            final ConfigurationsEnvironnement lesConfigs, final SaeFormatMessageHandler messageFormatHandler,
                            final CassandraCQLClientFactory ccf) {

    // On va instancier manuellement le ReferentielFormatService des services
    // SAE
    // (manuellement par opposition avec une instantiation par Spring)
    // Il faut utiliser les paramètres de configuration de la session en cours

    // Récupère les informations de la session courante

    final String nomConf = (String) session.getAttribute("nomConfiguration");

    final Keyspace keyspace = (Keyspace) session.getServletContext().getAttribute(
                                                                                  nomConf);

    // Instantiation du JobClockSupport
    final JobClockConfiguration clock = new JobClockConfiguration();
    clock.setMaxTimeSynchroError(10000000);
    clock.setMaxTimeSynchroWarn(2000000);
    final JobClockSupport jobClockSupport = new JobClockSupportImpl(keyspace, clock);

    // Gestion modeAPI Support
    final IModeAPIDaoCql modeAPIDaoCql = new ModeAPICqlDaoImpl(ccf);
    final ModeApiCqlSupport modeApiCqlSupport = new ModeApiCqlSupport(modeAPIDaoCql);
    final ModeAPIService modeAPIService = new ModeAPIServiceImpl(modeApiCqlSupport, Constants.REFRESH_CACHE_MODEAPI_TIME);

    // Instantiation du ReferentielFormatDao
    final ReferentielFormatDao formatDao = new ReferentielFormatDao(keyspace);

    // Instantiation du ReferentielFormatSupport
    final ReferentielFormatSupport referentielFormatSupport = new ReferentielFormatSupport(
                                                                                           formatDao, messageFormatHandler);
    // Instantiation du ReferentielFormatSupportCql
    final IReferentielFormatDaoCql referentielFormatDaoCql = new ReferentielFormatCqlDaoImpl(ccf);
    referentielFormatDaoCql.setCcf(ccf);
    final ReferentielFormatCqlSupport referentielFormatCqlSupport = new ReferentielFormatCqlSupport(referentielFormatDaoCql);
    // Instanciation de la facade
    final ReferentielFormatSupportFacade referentielFormatSupportFacade = new ReferentielFormatSupportFacade(referentielFormatSupport,
                                                                                                             referentielFormatCqlSupport,
                                                                                                             jobClockSupport,
                                                                                                             modeAPIService);

    // Enfin, instantiation du ReferentielFormatService
    formatService = new ReferentielFormatServiceImpl(referentielFormatSupportFacade,
                                                     1,
                                                     false);

  }

  /**
   * Méthode permettant de récupérer tous les formats présents dans la base
   * Cassandra
   * 
   * @return List<FormatFichier> liste des formats
   */
  @Override
  public final List<FormatFichier> findAllFormats() {
    return formatService.getAllFormat();
  }

  /**
   * Méthode permettant de récupérer une format présent dans la base Cassandra
   * 
   * @param idFormat
   *           Identifiant du format à récupérer
   * @return FormatFichier un format
   * @throws AucunFormatException
   *            Exception levée lorsque le format cherché n'existe pas
   */
  @Override
  public final FormatFichier findFormat(final String idFormat)
      throws AucunFormatException {
    try {
      return formatService.getFormat(idFormat);
    } catch (final UnknownFormatException e) {
      throw new AucunFormatException();
    }
  }

  /**
   * Teste l'existence d'un format
   * 
   * @param idFormat
   *           Identifiant du format
   * @return vrai ou faux suivant si le format existe ou non
   */
  @Override
  public final boolean formatExiste(final String idFormat) {
    return formatService.exists(idFormat);
  }

  /**
   * Méthode permettant de créer un format
   * 
   * @param format
   *           un format
   */
  @Override
  public final void createFormat(final FormatFichier format) {
    formatService.addFormat(format);
  }

  /**
   * Méthode permettant de modifier un format
   * 
   * @param format
   *           le format à modifier
   */
  @Override
  public final void modifyFormat(final FormatFichier format) {
    formatService.addFormat(format);
  }

  /**
   * Méthode de suppression d'un format
   * 
   * @param idFormat
   *           format à supprimer
   * @throws AucunFormatException
   *            Exception si le format n'existe pas
   */
  @Override
  public final void deleteFormat(final String idFormat) throws AucunFormatException {
    try {
      formatService.deleteFormat(idFormat);
    } catch (final UnknownFormatException e) {
      throw new AucunFormatException();
    }
  }
}
