package fr.urssaf.image.sae.ihm.web.exploit.saeservice;

import java.util.Arrays;
import java.util.List;

import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.ConfigurationContextFactory;
import org.apache.axis2.engine.AxisConfiguration;
import org.apache.axis2.engine.Phase;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import fr.urssaf.image.sae.client.vi.VIHandler;
import fr.urssaf.image.sae.client.vi.signature.KeyStoreInterface;
import fr.urssaf.image.sae.ihm.web.exploit.exception.IhmWebRuntimeException;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub;

/**
 * Classe permettant de réaliser des opérations sur le STUB
 * 
 */
@Component
public class SaeStubUtils {

   private static final String VI_PAGM = "IHM_EXPLOIT_RECHERCHE_CONSULTATION";
   private static final String VI_ISSUER = "CS_IHM_EXPLOIT";

   private final KeyStoreInterface keyStoreInterface;

   /**
    * Constructeur
    * 
    * @param keyStoreInterface
    *           keyStoreInterface
    */
   @Autowired
   public SaeStubUtils(final KeyStoreInterface keyStoreInterface) {
      this.keyStoreInterface = keyStoreInterface;
   }

   /**
    * Renvoie le STUB permettant l'accès au webServices du SAE
    * 
    * @param urlServiceWeb
    *           url du web service de la configuration choisie
    * @param login
    *           login de l'utilisateur (pour la traçabilité)
    * @return Stub permettant l'accès aux webservices du SAE
    */
   public final SaeServiceStub getStub(final String urlServiceWeb, final String login) {

      try {
         // Création d'une configuration Axis2 par défaut
         final ConfigurationContext configContext = ConfigurationContextFactory
               .createConfigurationContextFromFileSystem(null, null);

         // ----------------------------------------------
         // Gestion du VI + Log du message SOAP de request
         // ----------------------------------------------

         // Ajout d'un Handler lors de la phase "MessageOut" pour insérer le VI
         final AxisConfiguration axisConfig = configContext.getAxisConfiguration();
         final List<Phase> outFlowPhases = axisConfig.getOutFlowPhases();
         final Phase messageOut = findPhaseByName(outFlowPhases, "MessageOut");
         messageOut.addHandler(new VIHandler(keyStoreInterface, Arrays
               .asList(VI_PAGM), VI_ISSUER, login));

         // Création du Stub
         final SaeServiceStub service = new SaeServiceStub(configContext,
               urlServiceWeb);

         // Renvoie du Stub
         return service;

      } catch (final Exception e) {
         throw new IhmWebRuntimeException(e);
      }

   }

   private static Phase findPhaseByName(final List<Phase> phases,
         final String nomPhaseRecherchee) {
      Phase result = null;
      for (final Phase phase : phases) {
         if (phase.getName().equals(nomPhaseRecherchee)) {
            result = phase;
            break;
         }
      }
      return result;
   }

}
