package fr.urssaf.image.sae.ihm.web.exploit.controller;

import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import fr.urssaf.image.commons.cassandra.helper.CassandraCQLClientFactory;
import fr.urssaf.image.sae.ihm.web.exploit.formulaire.MetadataAjoutModifForm;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ConfigurationsEnvironnement;
import fr.urssaf.image.sae.ihm.web.exploit.modele.MetaReference;
import fr.urssaf.image.sae.ihm.web.exploit.service.MetadonneesService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.MetadonneesServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.utils.Constants;
import fr.urssaf.image.sae.metadata.exceptions.MetadataReferenceNotFoundException;
import fr.urssaf.image.sae.metadata.referential.model.MetadataReference;

/**
 * Classe permettant de gérer les métadonnées
 */
@Controller
public class MetadataAjoutModifController {

  private static final String NOM_VUE = "gestionMetadonnees";

  @Autowired
  private ConfigurationsEnvironnement config;

  private static final String NOM_FORMULAIRE = "metaAjoutModifForm";

  /**
   * GET, affichage du détail d'une métadonnée en mode modification<br>
   * <br>
   * Utilisé notamment par l'écran listant les métadonnées, lien "détails"
   * 
   * @param metaForm
   *           Le formulaire
   * @param result
   *           Gestion des erreurs
   * @param session
   *           La session
   * @param request
   *           La requête
   * @param codeLong
   *           code long de la métadonnée
   * @return La page à afficher
   */
  @RequestMapping(value = "detailMeta", method = RequestMethod.GET)
  public final String afficherDetailMeta(
                                         @ModelAttribute(NOM_FORMULAIRE) @Valid final MetadataAjoutModifForm metaForm,
                                         final BindingResult result, final HttpSession session, final HttpServletRequest request,
                                         @RequestParam(value = "codeLong", required = true) final String codeLong) {

    if (!result.hasFieldErrors()) {
      final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
          .getAttribute(Constants.CQL);
      // En arrivant sur cette action, on se met en mode modification
      metaForm.setModification(Boolean.TRUE);
      metaForm.setAjout(Boolean.FALSE);

      // Instancie le service des métadonnées dans la configuration courante
      final MetadonneesService metaService = new MetadonneesServiceImpl(session,
                                                                        config,
                                                                        ccf);

      // Récupère les propriétés de la métadonnée à modifier
      final MetadataReference metaSae = metaService.findMetadata(codeLong);

      // Fait une copie de l'objet MetadataReference (renvoyé par les
      // services SAE) dans un objet MetaReference (utilisable par l'IHM)
      final MetaReference metaIhm = copie(metaSae);

      // Affecte l'objet métadonnée à l'objet formulaire
      metaForm.setDetailMeta(metaIhm);

    }

    return NOM_VUE;

  }

  private MetaReference copie(final MetadataReference source) {

    final MetaReference dest = new MetaReference();
    dest.setArchivable(source.isArchivable());
    dest.setConsultable(source.isConsultable());
    dest.setDefaultConsultable(source.isDefaultConsultable());
    dest.setDescription(source.getDescription());
    dest.setDictionaryName(source.getDictionaryName());
    dest.setHasDictionary(source.getHasDictionary());
    dest.setInternal(source.isInternal());
    dest.setIsIndexed(source.getIsIndexed());
    dest.setLabel(source.getLabel());
    dest.setLength(source.getLength());
    dest.setLongCode(source.getLongCode());
    dest.setModifiable(source.isModifiable());
    dest.setPattern(source.getPattern());
    dest.setRequiredForArchival(source.isRequiredForArchival());
    dest.setRequiredForStorage(source.isRequiredForStorage());
    dest.setSearchable(source.isSearchable());
    dest.setShortCode(source.getShortCode());
    dest.setType(source.getType());
    dest.setModifiable(source.isModifiable());
    dest.setClientAvailable(source.isClientAvailable());
    dest.setLeftTrimable(source.isLeftTrimable());
    dest.setRightTrimable(source.isRightTrimable());
    dest.setTransferable(source.getTransferable());

    return dest;

  }

  private MetadataReference copie(final MetaReference source) {

    final MetadataReference dest = new MetadataReference();

    dest.setArchivable(source.isArchivable());
    dest.setConsultable(source.isConsultable());
    dest.setDefaultConsultable(source.isDefaultConsultable());
    dest.setDescription(source.getDescription());
    dest.setDictionaryName(source.getDictionaryName());
    dest.setHasDictionary(source.getHasDictionary());
    dest.setInternal(source.isInternal());
    dest.setIsIndexed(source.getIsIndexed());
    dest.setLabel(source.getLabel());
    if (source.getLength() == null) {
      dest.setLength(-1);
    } else {
      dest.setLength(source.getLength());
    }
    dest.setLongCode(source.getLongCode());
    dest.setModifiable(source.isModifiable());
    dest.setPattern(source.getPattern());
    dest.setRequiredForArchival(source.isRequiredForArchival());
    dest.setRequiredForStorage(source.isRequiredForStorage());
    dest.setSearchable(source.isSearchable());
    dest.setShortCode(source.getShortCode());
    dest.setType(source.getType());
    dest.setModifiable(source.isModifiable());
    dest.setLeftTrimable(source.getLeftTrimable());
    dest.setRightTrimable(source.getRightTrimable());
    dest.setClientAvailable(source.getClientAvailable());
    dest.setTransferable(source.getTransferable());

    return dest;

  }

  /**
   * Initialisation de l'écran d'ajout d'une métadonnées<br>
   * <br>
   * Utilisé par le menu principal de l'application "Ajouter une métadonnée"
   * 
   * @param model
   *           le modèle
   * @param session
   *           la session
   * @param request
   *           la request courante
   * @return le nom de la vue
   * 
   */
  @RequestMapping(value = "ajoutMetadonnees", method = RequestMethod.GET)
  public final String initialisationAjoutMeta(final Model model,
                                              final HttpSession session, final HttpServletRequest request) {

    final MetadataAjoutModifForm form = new MetadataAjoutModifForm();
    final MetaReference meta = new MetaReference();
    form.setDetailMeta(meta);
    form.setAjout(Boolean.TRUE);
    form.setModification(Boolean.FALSE);
    model.addAttribute(NOM_FORMULAIRE, form);

    return NOM_VUE;

  }

  /**
   * Réalisation de l'ajout ou de la modification d'une métadonnée
   * 
   * @param metaForm
   *           l'objet de formulaire
   * @param result
   *           gestion des erreurs de saisie
   * @param session
   *           la session courante
   * @param request
   *           la request courante
   * @return le nom de la vue
   */
  @RequestMapping(value = "gestionMetadonnee")
  public final String gestionMeta(
                                  @ModelAttribute(NOM_FORMULAIRE) @Valid final MetadataAjoutModifForm metaForm,
                                  final BindingResult result, final HttpSession session, final HttpServletRequest request) {

    final CassandraCQLClientFactory ccf = (CassandraCQLClientFactory) session.getServletContext()
                                                                             .getAttribute(Constants.CQL);
    if (!result.hasFieldErrors()) {
      final MetaReference metaModifie = metaForm.getDetailMeta();

      // Instancie le service des métadonnées dans la configuration courante
      final MetadonneesService metaService = new MetadonneesServiceImpl(session,
                                                                        config,
                                                                        ccf);

      // Regarde si la métadonnée existe déjà
      final MetadataReference metaExist = metaService.findMetadata(metaModifie
                                                                   .getLongCode());

      // Différentes règles selon si la méta existe déjà ou non
      if (metaForm.getAjout()) {

        // On se trouve en mode "création d'une nouvelle métadonnée"
        if (metaExist == null) {

          // La métadonnée n'existe pas. Cas normal. On la créé
          // Copie de l'objet MetaReference du modèle de l'IHM vers un
          // objet
          // MetadataReference pour les services SAE
          final MetadataReference metaSae = copie(metaModifie);
          // Appel du service adéquat
          try {
            metaService.createMetadata(metaSae);

            // On passe l'écran en mode "modification"
            metaForm.setAjout(Boolean.FALSE);
            metaForm.setModification(Boolean.TRUE);

            // Message pour l'utilisateur
            metaForm.setMessage(String.format(
                                              "La métadonnée %s a bien été créée", metaModifie
                                              .getLongCode()));

          } catch (final RuntimeException ex) {
            final ObjectError erreur = new ObjectError(NOM_FORMULAIRE, ex
                                                       .getMessage());
            result.addError(erreur);

            final StringWriter sw = new StringWriter();
            final PrintWriter pw = new PrintWriter(sw);
            ex.printStackTrace(pw);
            final String stacktrace = sw.toString();
            request.setAttribute("stacktrace", stacktrace);
          }

        } else {

          // La métadonnée existe déjà alors que l'on se trouve en mode
          // "création"
          // On informe l'utilisateur qu'il y a un problème
          final ObjectError erreur = new ObjectError(
                                                     NOM_FORMULAIRE,
                                                     String
                                                     .format(
                                                             "Il existe déjà une métadonnée avec le code long : %s",
                                                             metaModifie.getLongCode()));
          result.addError(erreur);

        }
      } else if (metaForm.getModification()) {

        // On se trouve en mode "modification"

        // On modifie la métadonnée
        // Copie de l'objet MetaReference du modèle de l'IHM vers un objet
        // MetadataReference pour les services SAE
        final MetadataReference metaSae = copie(metaModifie);
        // Appel du service adéquat
        try {
          metaService.modifyMetadata(metaSae);
        } catch (final MetadataReferenceNotFoundException e) {
          // La métadonnée n'existe pas alors que l'on se trouve en mode
          // "modification"
          // On informe l'utilisateur qu'il y a un problème
          final ObjectError erreur = new ObjectError(
                                                     NOM_FORMULAIRE,
                                                     String
                                                     .format(
                                                             "Il n'existe pas de métadonnée avec le code long : %s",
                                                             metaModifie.getLongCode()));
          result.addError(erreur);
        }

        // L'écran reste en mode modification
        metaForm.setAjout(Boolean.FALSE);
        metaForm.setModification(Boolean.TRUE);

        // Message pour l'utilisateur
        metaForm.setMessage(String.format(
                                          "La métadonnée %s a bien été modifiée", metaModifie
                                          .getLongCode()));

      }
    }
    return NOM_VUE;
  }

}
