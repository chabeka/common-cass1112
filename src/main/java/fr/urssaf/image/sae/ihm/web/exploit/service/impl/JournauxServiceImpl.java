package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEServices;
import fr.urssaf.image.commons.dfce.service.impl.DFCEServicesImpl;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ChainageDisplay;
import fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay;
import fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService;
import fr.urssaf.image.sae.trace.dao.model.Chainage;
import fr.urssaf.image.sae.trace.dao.model.Journal;
import fr.urssaf.image.sae.trace.dao.support.JournalDfceSupport;
import fr.urssaf.image.sae.trace.dao.support.JournalSaeSupport;
import fr.urssaf.image.sae.trace.model.JournalType;
import fr.urssaf.image.sae.trace.service.JournalService;
import fr.urssaf.image.sae.trace.service.impl.JournalServiceImpl;

/**
 * Implémentation du service {@link}Journaux Service
 *
 *
 */
@Service
public class JournauxServiceImpl implements JournauxService {

   private static final String FIN_LOG = "{} - fin";
   private static final String DEBUT_LOG = "{} - début";

   private static final Logger LOGGER = LoggerFactory.getLogger(JournauxServiceImpl.class);

   @Override
   public final List<JournalDisplay> rechercherJournauxDocument(final UUID uuidDoc,
         final DFCEConnection dfceConnection) {

      final String trcPrefix = "rechercherJournauxDocument";
      LOGGER.debug(DEBUT_LOG, trcPrefix);

      LOGGER.debug("{} - UUID Doc : {}", trcPrefix, uuidDoc);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport, journalSaeSupport);
      final List<Journal> liste = journalService.rechercherJournauxDocument(uuidDoc);

      final List<JournalDisplay> listeJournaux = new ArrayList<>();

      for (final Journal journal : liste) {

         /**
          * Conversion de la taille en unité lisible
          */
         final long tailleFichier = journal.getTaille();
         final String tailleAffichable = conversionTaille(tailleFichier);

         final JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
               .getDateDebutEvt(), journal.getDateFinEvt(),
               tailleAffichable);
         listeJournaux.add(journalDisplay);
      }
      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeJournaux;
   }


   @Override
   public final List<JournalDisplay> rechercherJournauxEvenementDfce(
         final Date dateDebut, final Date dateFin, final DFCEConnection dfceConnection) {

      final String trcPrefix = "rechercherJournauxEvenementDfce";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - Date début : {}", trcPrefix, dateDebut);
      LOGGER.debug("{} - Date fin : {}", trcPrefix, dateFin);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final List<Journal> liste = journalService.rechercherJournauxEvenementDfce(dateDebut, dateFin);

      final List<JournalDisplay> listeJournaux = new ArrayList<>();

      for (final Journal journal : liste) {

         /**
          * Conversion de la taille en unité lisible
          */
         final long tailleFichier = journal.getTaille();
         final String tailleAffichable = conversionTaille(tailleFichier);

         final JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
               .getDateDebutEvt(), journal.getDateFinEvt(),
               tailleAffichable);
         listeJournaux.add(journalDisplay);
      }
      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeJournaux;
   }

   @Override
   public final JournalDisplay rechercherJournauxDfce(final UUID uuidJournal,
         final DFCEConnection dfceConnection) {

      final String trcPrefix = "rechercherJournauxEvenementDfce";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - UUID Journal : {}", trcPrefix, uuidJournal);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final Journal journal = journalService.rechercherJournauxDfce(uuidJournal);

      dfceServices.closeConnexion();

      /**
       * Conversion de la taille en unité lisible
       */
      if (journal != null) {
         final long tailleFichier = journal.getTaille();
         final String tailleAffichable = conversionTaille(tailleFichier);

         final JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
               .getDateDebutEvt(), journal.getDateFinEvt(), tailleAffichable);
         LOGGER.debug(FIN_LOG, trcPrefix);
         return journalDisplay;
      } else {
         LOGGER.debug(FIN_LOG, trcPrefix);
         return null;
      }




   }

   @Override
   public final List<JournalDisplay> rechercherJournauxCycleVie(final Date dateDebut,
         final Date dateFin, final DFCEConnection dfceConnection) {

      final String trcPrefix = "rechercherJournauxCycleVie";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - Date début : {}", trcPrefix, dateDebut);
      LOGGER.debug("{} - Date fin : {}", trcPrefix, dateFin);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final List<Journal> liste = journalService.rechercherJournauxCycleVie(
            dateDebut, dateFin);

      final List<JournalDisplay> listeJournaux = new ArrayList<>();

      for (final Journal journal : liste) {
         /**
          * Conversion de la taille en unité lisible
          */
         final long tailleFichier = journal.getTaille();
         final String tailleAffichable = conversionTaille(tailleFichier);

         final JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
               .getDateDebutEvt(), journal.getDateFinEvt(),
               tailleAffichable);
         listeJournaux.add(journalDisplay);
      }
      dfceServices.closeConnexion();
      LOGGER.debug("{} - fin", trcPrefix);
      return listeJournaux;
   }

   /**
    * Conversion de la taille en donnée visualisable (Ko, Mo, Go)
    *
    * @param tailleFichier
    * @return
    */
   private String conversionTaille(final long tailleFichier) {
      final long tailleKo = tailleFichier / 1024;
      final long tailleMo = tailleKo / 1024;
      final long tailleGo = tailleMo / 1024;
      String tailleAffichable = "";
      if (tailleGo > 0) {
         tailleAffichable = tailleGo + " Go";
      } else if (tailleMo > 0) {
         tailleAffichable = tailleMo + " Mo";
      } else if (tailleKo > 0) {
         tailleAffichable = tailleKo + " Ko";
      } else {
         tailleAffichable = tailleFichier + " o";
      }
      return tailleAffichable;
   }

   @Override
   public final List<JournalDisplay> rechercherJournauxEvenementSae(
         final Date dateDebut, final Date dateFin, final DFCEConnection dfceConnection,
         final String nomBase) {

      final String trcPrefix = "rechercherJournauxEvenementSae";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - Date début : {}", trcPrefix, dateDebut);
      LOGGER.debug("{} - Date fin : {}", trcPrefix, dateFin);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());
      LOGGER.debug("{} - Nom de la base : {}", trcPrefix, nomBase);

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final List<Journal> liste = journalService.rechercherJournauxEvenementSae(
            dateDebut, dateFin, nomBase);

      final List<JournalDisplay> listeJournaux = new ArrayList<>();

      for (final Journal journal : liste) {
         final long tailleFichier = journal.getTaille();
         final String tailleAffichable = conversionTaille(tailleFichier);
         final JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
               .getDateDebutEvt(), journal.getDateFinEvt(),
               tailleAffichable);
         listeJournaux.add(journalDisplay);
      }

      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeJournaux;
   }

   @Override
   public final List<ChainageDisplay> verifierChainage(final Date dateDebut,
         final Date dateFin, final JournalType journalType, final DFCEConnection dfceConnection) {

      final String trcPrefix = "verifierChainage";
      LOGGER.debug(DEBUT_LOG, trcPrefix);

      LOGGER.debug("{} - Date début : {}", trcPrefix, dateDebut);
      LOGGER.debug("{} - Date fin : {}", trcPrefix, dateFin);
      LOGGER.debug("{} - Type de journal : {}", trcPrefix, journalType);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);
      final List<Chainage> liste = journalService.verifierChainage(dateDebut,
            dateFin, journalType);

      final List<ChainageDisplay> listeChainage = new ArrayList<>();
      for (final Chainage chainage : liste) {
         final ChainageDisplay chainageDisplay = new ChainageDisplay();
         chainageDisplay.setAlgoHash(chainage.getAlgoHash());
         chainageDisplay.setDateFin(chainage.getDateFin());
         chainageDisplay.setHash(chainage.getHash());
         chainageDisplay.setHashRecalcule(chainage.getHashRecalcule());
         chainageDisplay.setUuidPrecedentJournal(chainage
               .getUuidPrecedentJournal());
         listeChainage.add(chainageDisplay);
      }
      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeChainage;

   }

   @Override
   public final byte[] recupererContenuJournalDfce(final UUID uuidJournal,
         final DFCEConnection dfceConnection) {

      final String trcPrefix = "recupererContenuJournalDfce";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - UUID Journal : {}", trcPrefix, uuidJournal);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final byte[] contenu = journalService.recupererContenuJournalDfce(uuidJournal);
      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);

      return contenu;

   }

   @Override
   public final byte[] recupererContenuJournalSae(final UUID uuidJournal,
         final DFCEConnection dfceConnection, final String nomBase) {

      final String trcPrefix = "recupererContenuJournalSae";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - UUID Journal : {}", trcPrefix, uuidJournal);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, nomBase);

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final byte[] contenu = journalService.recupererContenuJournalSae(uuidJournal,
            nomBase);

      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return contenu;
   }

   @Override
   public final String getNomJournalDfce(final UUID uuidJournal,
         final DFCEConnection dfceConnection) {
      final String trcPrefix = "getNomJournalDfce";
      LOGGER.debug(DEBUT_LOG, trcPrefix);

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final String nomFichier = journalService.getNomJournalDfce(uuidJournal);

      dfceServices.closeConnexion();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return nomFichier;
   }

   @Override
   public JournalDisplay rechercherJournauxEvenementSae(final UUID uuidJournal,
         final DFCEConnection dfceConnection, final String nomBase) {
      final String trcPrefix = "rechercherJournauxEvenementSae";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - UUID Journal : {}", trcPrefix, uuidJournal);
      LOGGER.debug("{} - Connexion DFCE : {}", trcPrefix, dfceConnection.getServerUrl());
      LOGGER.debug("{} - Nom de la base : {}", trcPrefix, nomBase);

      final DFCEServices dfceServices = connectToDFCE(dfceConnection);

      final JournalDfceSupport journalDfceSupport = new JournalDfceSupport(dfceServices);
      final JournalSaeSupport journalSaeSupport = new JournalSaeSupport(dfceServices);
      final JournalService journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      final Journal journal = journalService.rechercherJournauxEvenementSae(
            uuidJournal, nomBase);

      dfceServices.closeConnexion();

      if (journal != null) {
         final long tailleFichier = journal.getTaille();
         final String tailleAffichable = conversionTaille(tailleFichier);
         final JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
               .getDateDebutEvt(), journal.getDateFinEvt(), tailleAffichable);
         LOGGER.debug(FIN_LOG, trcPrefix);
         return journalDisplay;
      } else {
         LOGGER.debug(FIN_LOG, trcPrefix);
         return null;
      }

   }

   /**
    * Méthode permettant de se connecter à DFCe.
    *
    * @param dfceConnection
    *           Paramètres de connection.
    * @return le service de connection à DFCe
    */
   private DFCEServices connectToDFCE(final DFCEConnection dfceConnection) {
      final DFCEServices dfceServices = new DFCEServicesImpl(dfceConnection);
      dfceServices.connectTheFistTime();
      return dfceServices;
   }
}
