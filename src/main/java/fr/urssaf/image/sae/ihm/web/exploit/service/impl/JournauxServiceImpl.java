package fr.urssaf.image.sae.ihm.web.exploit.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import fr.urssaf.image.commons.dfce.model.DFCEConnection;
import fr.urssaf.image.commons.dfce.service.DFCEConnectionService;
import fr.urssaf.image.commons.dfce.service.impl.DFCEConnectionServiceImpl;
import fr.urssaf.image.sae.ihm.web.exploit.modele.ChainageDisplay;
import fr.urssaf.image.sae.ihm.web.exploit.modele.JournalDisplay;
import fr.urssaf.image.sae.ihm.web.exploit.service.JournauxService;
import fr.urssaf.image.sae.trace.dao.model.Chainage;
import fr.urssaf.image.sae.trace.dao.model.Journal;
import fr.urssaf.image.sae.trace.dao.support.JournalDfceSupport;
import fr.urssaf.image.sae.trace.dao.support.JournalSaeSupport;
import fr.urssaf.image.sae.trace.dao.support.ServiceProviderSupport;
import fr.urssaf.image.sae.trace.model.JournalType;
import fr.urssaf.image.sae.trace.service.JournalService;
import fr.urssaf.image.sae.trace.service.impl.JournalServiceImpl;

/**
 * Implémentation du service {@link}Journaux Service
 * 
 * 
 */
@Service
public class JournauxServiceImpl implements JournauxService {

   private static final String FIN_LOG = "{} - fin";
   private static final String DEBUT_LOG = "{} - début";
   private static final Logger LOGGER = LoggerFactory
         .getLogger(JournauxServiceImpl.class);

   /**
    * Service permettant de réaliser des opérations sur les journaux
    */
   private JournalService journalService;

   @Override
   public final List<JournalDisplay> rechercherJournauxDocument(UUID uuidDoc,
         DFCEConnection dfceConnection) {

      String trcPrefix = "rechercherJournauxDocument";
      LOGGER.debug(DEBUT_LOG, trcPrefix);

      LOGGER.debug("{} - UUID Doc : {}", new String[] { trcPrefix,
            uuidDoc.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);
      List<Journal> liste = journalService.rechercherJournauxDocument(uuidDoc);

      List<JournalDisplay> listeJournaux = new ArrayList<JournalDisplay>();

      for (Journal journal : liste) {
         JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
                     .getDateDebutEvt(), journal.getDateFinEvt());
         listeJournaux.add(journalDisplay);
      }
      serviceProvider.disconnect();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeJournaux;
   }

   @Override
   public final List<JournalDisplay> rechercherJournauxEvenementDfce(
         Date dateDebut, Date dateFin, DFCEConnection dfceConnection) {

      String trcPrefix = "rechercherJournauxEvenementDfce";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - Date début : {}", new String[] { trcPrefix,
            dateDebut.toString() });
      LOGGER.debug("{} - Date fin : {}", new String[] { trcPrefix,
            dateFin.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      List<Journal> liste = journalService.rechercherJournauxEvenementDfce(
            dateDebut, dateFin);

      List<JournalDisplay> listeJournaux = new ArrayList<JournalDisplay>();

      for (Journal journal : liste) {
         JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
                     .getDateDebutEvt(), journal.getDateFinEvt());
         listeJournaux.add(journalDisplay);
      }
      serviceProvider.disconnect();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeJournaux;
   }

   @Override
   public final List<JournalDisplay> rechercherJournauxCycleVie(Date dateDebut,
         Date dateFin, DFCEConnection dfceConnection) {

      String trcPrefix = "rechercherJournauxCycleVie";
      LOGGER.debug("{} - début", trcPrefix);
      LOGGER.debug("{} - Date début : {}", new String[] { trcPrefix,
            dateDebut.toString() });
      LOGGER.debug("{} - Date fin : {}", new String[] { trcPrefix,
            dateFin.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      List<Journal> liste = journalService.rechercherJournauxCycleVie(
            dateDebut, dateFin);

      List<JournalDisplay> listeJournaux = new ArrayList<JournalDisplay>();

      for (Journal journal : liste) {
         JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
                     .getDateDebutEvt(), journal.getDateFinEvt());
         listeJournaux.add(journalDisplay);
      }
      serviceProvider.disconnect();
      LOGGER.debug("{} - fin", trcPrefix);
      return listeJournaux;
   }

   @Override
   public final List<JournalDisplay> rechercherJournauxEvenementSae(
         Date dateDebut, Date dateFin, DFCEConnection dfceConnection,
         String nomBase) {

      String trcPrefix = "rechercherJournauxEvenementSae";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - Date début : {}", new String[] { trcPrefix,
            dateDebut.toString() });
      LOGGER.debug("{} - Date fin : {}", new String[] { trcPrefix,
            dateFin.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });
      LOGGER.debug("{} - Nom de la base : {}", new String[] { trcPrefix,
            nomBase });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      List<Journal> liste = journalService.rechercherJournauxEvenementSae(
            dateDebut, dateFin, nomBase);

      List<JournalDisplay> listeJournaux = new ArrayList<JournalDisplay>();

      for (Journal journal : liste) {
         JournalDisplay journalDisplay = new JournalDisplay(journal.getDate(),
               journal.getIdentifiant(), journal.getNomFichier(), journal
                     .getDateDebutEvt(), journal.getDateFinEvt());
         listeJournaux.add(journalDisplay);
      }

      serviceProvider.disconnect();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeJournaux;
   }

   @Override
   public final List<ChainageDisplay> verifierChainage(Date dateDebut,
         Date dateFin, JournalType journalType, DFCEConnection dfceConnection) {

      String trcPrefix = "verifierChainage";
      LOGGER.debug(DEBUT_LOG, trcPrefix);

      LOGGER.debug("{} - Date début : {}", new String[] { trcPrefix,
            dateDebut.toString() });
      LOGGER.debug("{} - Date fin : {}", new String[] { trcPrefix,
            dateFin.toString() });
      LOGGER.debug("{} - Type de journal : {}", new String[] { trcPrefix,
            journalType.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);
      List<Chainage> liste = journalService.verifierChainage(dateDebut,
            dateFin, journalType);

      List<ChainageDisplay> listeChainage = new ArrayList<ChainageDisplay>();
      for (Chainage chainage : liste) {
         ChainageDisplay chainageDisplay = new ChainageDisplay();
         chainageDisplay.setAlgoHash(chainage.getAlgoHash());
         chainageDisplay.setDateFin(chainage.getDateFin());
         chainageDisplay.setHash(chainage.getHash());
         chainageDisplay.setHashRecalcule(chainage.getHashRecalcule());
         chainageDisplay.setUuidPrecedentJournal(chainage
               .getUuidPrecedentJournal());
         listeChainage.add(chainageDisplay);
      }
      serviceProvider.disconnect();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return listeChainage;

   }

   @Override
   public final byte[] recupererContenuJournalDfce(UUID uuidJournal,
         DFCEConnection dfceConnection) {

      String trcPrefix = "recupererContenuJournalDfce";
      LOGGER.debug(DEBUT_LOG, trcPrefix);
      LOGGER.debug("{} - UUID Journal : {}", new String[] { trcPrefix,
            uuidJournal.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      byte[] contenu = journalService.recupererContenuJournalDfce(uuidJournal);
      serviceProvider.disconnect();
      LOGGER.debug(FIN_LOG, trcPrefix);

      return contenu;

   }

   @Override
   public final byte[] recupererContenuJournalSae(UUID uuidJournal,
         DFCEConnection dfceConnection, String nomBase) {

      String trcPrefix = "recupererContenuJournalSae";
      LOGGER.debug("DEBUT_LOG", trcPrefix);
      LOGGER.debug("{} - UUID Journal : {}", new String[] { trcPrefix,
            uuidJournal.toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            dfceConnection.getServerUrl().toString() });
      LOGGER.debug("{} - Connexion DFCE : {}", new String[] { trcPrefix,
            nomBase });

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      byte[] contenu = journalService.recupererContenuJournalSae(uuidJournal,
            nomBase);

      serviceProvider.disconnect();
      LOGGER.debug(FIN_LOG, trcPrefix);
      return contenu;
   }

   @Override
   public final String getNomJournalDfce(UUID uuidJournal,
         DFCEConnection dfceConnection) {
      String trcPrefix = "getNomJournalDfce";
      LOGGER.debug("{} - début", trcPrefix);

      DFCEConnectionService dfceConnectionService = new DFCEConnectionServiceImpl(
            dfceConnection);
      ServiceProviderSupport serviceProvider = new ServiceProviderSupport(
            dfceConnectionService);
      serviceProvider.connect();
      JournalDfceSupport journalDfceSupport = new JournalDfceSupport(
            serviceProvider);
      JournalSaeSupport journalSaeSupport = new JournalSaeSupport(
            serviceProvider);
      journalService = new JournalServiceImpl(journalDfceSupport,
            journalSaeSupport);

      String nomFichier = journalService.getNomJournalDfce(uuidJournal);

      LOGGER.debug("{} - fin", trcPrefix);
      return nomFichier;
   }

}
