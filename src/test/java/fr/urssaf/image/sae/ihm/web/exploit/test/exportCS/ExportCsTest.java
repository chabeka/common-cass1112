package fr.urssaf.image.sae.ihm.web.exploit.test.exportCS;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.PropertyException;

import org.junit.Assert;
import org.junit.Test;
import org.springframework.core.io.ClassPathResource;
import org.xml.sax.SAXException;

import fr.urssaf.image.sae.droit.dao.model.FormatControlProfil;
import fr.urssaf.image.sae.droit.dao.model.FormatProfil;
import fr.urssaf.image.sae.droit.dao.model.Prmd;
import fr.urssaf.image.sae.droit.model.SaeContratService;
import fr.urssaf.image.sae.droit.model.SaePagm;
import fr.urssaf.image.sae.droit.model.SaePagma;
import fr.urssaf.image.sae.droit.model.SaePagmf;
import fr.urssaf.image.sae.droit.model.SaePagmp;
import fr.urssaf.image.sae.droit.model.SaePrmd;
import fr.urssaf.image.sae.ihm.web.exploit.droit.DroitType;
import fr.urssaf.image.sae.ihm.web.exploit.factory.ObjectFactory;
import fr.urssaf.image.sae.ihm.web.exploit.utils.IgnoringValidationEventHandler;
import fr.urssaf.image.sae.ihm.web.exploit.utils.JAXBUtils;

public class ExportCsTest {
	
	
	@Test
	public void export_cs() throws UnsupportedEncodingException, IOException, PropertyException, JAXBException, SAXException {
		SaeContratService sae = createSaeContratService();
		File file = new File("src/test/resources/exportTest/exportTest.xml");
		
		// on nettoie le fichier
		PrintWriter writer = new PrintWriter(file);
		writer.print("");
		writer.close();
		
		//
		File filexsd = new File("src/test/resources/xsd/saedroits/saedroits.xsd");
		ClassPathResource ressourceXsd = new ClassPathResource("/xsd/saedroits/saedroits.xsd");
		URL xsdUrl = ressourceXsd.getURL();
		
		// recuperation de type xsd de SaeContratService
		DroitType dType = ObjectFactory.createDroitTypeFromSaeContratService(sae);
		fr.urssaf.image.sae.ihm.web.exploit.droit.ObjectFactory factory = new fr.urssaf.image.sae.ihm.web.exploit.droit.ObjectFactory();
		JAXBElement<DroitType> jaxele = factory.createDroit(dType);
		JAXBUtils.marshal(jaxele, file, filexsd, new IgnoringValidationEventHandler());
		
		// ecriture dans le fichier
		//JAXBUtils.marshal(DroitType.class, file, dType);
		
		FileInputStream inputStreamXml = new FileInputStream(file);
		
		DroitType dTypeFromXmlFile = JAXBUtils.unmarshal(DroitType.class, inputStreamXml, xsdUrl, null);
		
		 Assert.assertEquals("le nombre d'éléments des les deux objet doit être la meme",
                 dType.getListeCs().getCs().size(), dTypeFromXmlFile.getListeCs().getCs().size());
		 
		 Assert.assertEquals("le nombre d'éléments des les deux objet doit être la meme",
                 dType.getListeFormatControlProfil().getFormatControlProfil().size(), 
                 dTypeFromXmlFile.getListeFormatControlProfil().getFormatControlProfil().size());
		 
		 Assert.assertEquals("le nombre d'éléments des les deux objet doit être la meme",
                 dType.getListePrmd().getPrmd().size(), 
                 dTypeFromXmlFile.getListePrmd().getPrmd().size());
		 
	}
	private SaeContratService createSaeContratService() {
		SaeContratService sae  = new SaeContratService();
		sae.setCodeClient("CODE_CLIENT");
		sae.setDescription("Description");
		sae.setLibelle("libelle");
		sae.setViDuree(7000L);
		sae.setVerifNommage(true);
		List<String> listLCC = new ArrayList<>();
		listLCC.add("aaa");
		listLCC.add("bbb");
		listLCC.add("ccc");
		sae.setListCertifsClient(listLCC);
		List<String> listPKI = new ArrayList<>();
		listPKI.add("ddd");
		listPKI.add("eee");
		listPKI.add("fff");
		sae.setListPki(listPKI);
		//
		List<SaePagm> listsaePagms = new ArrayList<>();
		SaePagm saePagm = new SaePagm();
		saePagm.setCode("CODE_SaePagm");
		saePagm.setDescription("description_saePagm");
		saePagm.setCompressionPdfActive(true);
		saePagm.setSeuilCompressionPdf(1);
		SaePagma pagma = new SaePagma();
		pagma.setCode("PAGMA");
		List<String> listactionUnitaires = new ArrayList<>();
		listactionUnitaires.add("archivage");
		listactionUnitaires.add("consultation");
		listactionUnitaires.add("recherche");
		pagma.setActionUnitaires(listactionUnitaires);;
		saePagm.setPagma(pagma);
		SaePagmf pagmf = new SaePagmf();
		pagmf.setCodePagmf("pagmf_codePagmf");
		pagmf.setDescription("pagmf_description");
		pagmf.setFormatProfile("pagmf_formatProfile");
		saePagm.setPagmf(pagmf);
		SaePagmp pagmp = new SaePagmp();
		pagmp.setCode("pagmp_code");
		pagmp.setDescription("pagmp_description");
		pagmp.setPrmd("pagmp_prmd");
		saePagm.setPagmp(pagmp);
		Map<String, String> parametres = new HashMap<>();
		parametres.put("key1", "value1");
		parametres.put("key2", "value2");
		parametres.put("key3", "value3");
		saePagm.setParametres(parametres);
		listsaePagms.add(saePagm);
		sae.setSaePagms(listsaePagms);
		
		//
		List<SaePrmd> saePrmds = new ArrayList<>();
		SaePrmd saePrmd = new SaePrmd();
		Prmd prmd = new Prmd();
		prmd.setBean("bean");
		prmd.setCode("code_prmd");
		prmd.setDescription("description_prmd");
		prmd.setLucene("lucene");
		Map<String, List<String>> parametresp = new HashMap<>();
		parametresp.put("key1", listLCC);
		parametresp.put("key2", listPKI);
		prmd.setMetadata(parametresp);
		saePrmd.setPrmd(prmd);
		saePrmd.setValues(parametres);
		saePrmds.add(saePrmd);
		sae.setSaePrmds(saePrmds);
		
		//
		List<FormatControlProfil> formatCtrlProfils = new ArrayList<>();
		FormatControlProfil fc = new FormatControlProfil();
		fc.setDescription("description_fc");
		fc.setFormatCode("formatCode_fc");
		FormatProfil cp = new  FormatProfil();
		cp.setFileFormat("fileFormat");
		cp.setFormatIdentification(true);
		cp.setFormatValidation(true);
		cp.setFormatValidationMode("formatValidationMode");
		fc.setControlProfil(cp);
		formatCtrlProfils.add(fc);
		sae.setFormatControlProfils(formatCtrlProfils);
		return sae;
	}
}
