package fr.urssaf.image.sae.ihm.web.exploit.test.service.impl;

import static junit.framework.Assert.assertEquals;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import fr.urssaf.image.sae.ihm.web.exploit.exception.AucunDocumentException;
import fr.urssaf.image.sae.ihm.web.exploit.exception.ErreurTechniqueException;
import fr.urssaf.image.sae.ihm.web.exploit.modele.Metadonnee;
import fr.urssaf.image.sae.ihm.web.exploit.modele.SaeDonneesRecherche;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.SaeStubUtils;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ConsultationRequestType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ListeMetadonneeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeCodeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.MetadonneeValeurType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.RechercheRequestType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.ResultatRechercheType;
import fr.urssaf.image.sae.ihm.web.exploit.saeservice.modele.SaeServiceStub.UuidType;
import fr.urssaf.image.sae.ihm.web.exploit.service.RechercherService;
import fr.urssaf.image.sae.ihm.web.exploit.service.impl.RechercherServiceImpl;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "/applicationContext-sae-ihm-web-exploit-test.xml")
public class RechercherServiceImplTest {

   @Autowired
   private SaeStubUtils saeStubUtils;

   @Test(expected = IllegalArgumentException.class)
   public void testArgumentRechercherDocument1()
         throws ErreurTechniqueException, AucunDocumentException {
      RechercherService rs = new RechercherServiceImpl(saeStubUtils);
      String requeteLucene = null;
      List<String> codes = new ArrayList<String>();
      codes.add("code");
      String url = "url";
      String login = "login";
      rs.rechercherDocuments(requeteLucene, codes, url, login);
   }

   @Test(expected = IllegalArgumentException.class)
   public void testArgumentRechercherDocument2()
         throws ErreurTechniqueException, AucunDocumentException {
      RechercherService rs = new RechercherServiceImpl(saeStubUtils);
      String requeteLucene = "requeteLucene";
      List<String> codes = new ArrayList<String>();
      codes.add("code");
      String url = "";
      String login = "login";
      rs.rechercherDocuments(requeteLucene, codes, url, login);
   }

   @Test(expected = IllegalArgumentException.class)
   public void testArgumentConsulterDocument1()
         throws ErreurTechniqueException, AucunDocumentException {
      RechercherService rs = new RechercherServiceImpl(saeStubUtils);
      UUID uuid = null;
      List<String> codes = new ArrayList<String>();
      codes.add("code");
      String url = "url";
      boolean contenu = false;
      String login = "login";
      rs.consulterDocument(uuid, codes, url, contenu, login);
   }

   @Test(expected = IllegalArgumentException.class)
   public void testArgumentConsulterDocument2()
         throws ErreurTechniqueException, AucunDocumentException {
      RechercherService rs = new RechercherServiceImpl(saeStubUtils);
      UUID uuid = UUID.fromString("2412A367-0813-4F92-8FE0-FF4D2F86A20C");
      List<String> codes = new ArrayList<String>();
      codes.add("code");
      String url = "";
      boolean contenu = false;
      String login = "login";
      rs.consulterDocument(uuid, codes, url, contenu, login);
   }

   @Test
   public void testCreationRequeteRecherche() throws SecurityException,
         NoSuchMethodException, IllegalArgumentException,
         IllegalAccessException, InvocationTargetException {

      String requeteLucene = "Sirent=123456789";

      List<String> codesMeta = new ArrayList<String>();
      codesMeta.add("Siren");
      codesMeta.add("DateArchive");

      RechercherServiceImpl rechercherService = new RechercherServiceImpl(
            saeStubUtils);

      // Test de la création de requête
      Method method = RechercherServiceImpl.class.getDeclaredMethod(
            "creationRequeteRecherche", String.class, List.class);
      method.setAccessible(true);
      RechercheRequestType rechReqType = (RechercheRequestType) method.invoke(
            rechercherService, requeteLucene, codesMeta);

      assertEquals("Requete Lucene incorrecte", requeteLucene, rechReqType
            .getRequete().getRequeteRechercheType());
      assertEquals("Code type Meta 1 incorrect", "Siren", rechReqType
            .getMetadonnees().getMetadonneeCode()[0].getMetadonneeCodeType());
      assertEquals("Code type Meta 2 incorrect", "DateArchive", rechReqType
            .getMetadonnees().getMetadonneeCode()[1].getMetadonneeCodeType());

   }

   @Test
   public void testconvertToSdr() throws SecurityException,
         NoSuchMethodException, IllegalArgumentException,
         IllegalAccessException, InvocationTargetException {

      ResultatRechercheType[] resultats = new ResultatRechercheType[1];
      ResultatRechercheType res = new ResultatRechercheType();

      UuidType uuidType = new UuidType();
      uuidType.setUuidType("2412A367-0813-4F92-8FE0-FF4D2F86A20C");
      res.setIdArchive(uuidType);

      ListeMetadonneeType listeMetaType = new ListeMetadonneeType();

      MetadonneeType[] tabMetaType = new MetadonneeType[2];

      MetadonneeType meta1 = new MetadonneeType();
      MetadonneeCodeType codeType = new MetadonneeCodeType();
      codeType.setMetadonneeCodeType("Siren");
      meta1.setCode(codeType);
      MetadonneeValeurType valeurType = new MetadonneeValeurType();
      valeurType.setMetadonneeValeurType("123456789");
      meta1.setValeur(valeurType);
      tabMetaType[0] = meta1;

      MetadonneeType meta2 = new MetadonneeType();
      codeType = new MetadonneeCodeType();
      codeType.setMetadonneeCodeType("ApplicationProductrice");
      meta2.setCode(codeType);
      valeurType = new MetadonneeValeurType();
      valeurType.setMetadonneeValeurType("ADELAIDE");
      meta2.setValeur(valeurType);
      tabMetaType[1] = meta2;

      listeMetaType.setMetadonnee(tabMetaType);
      res.setMetadonnees(listeMetaType);

      resultats[0] = res;

      RechercherServiceImpl rechercherService = new RechercherServiceImpl(
            saeStubUtils);

      // Test de la conversion du résultat
      Method method = RechercherServiceImpl.class.getDeclaredMethod(
            "convertToSdr", ResultatRechercheType[].class);
      method.setAccessible(true);
      List<SaeDonneesRecherche> listeSaeDonRech = (List<SaeDonneesRecherche>) method
            .invoke(rechercherService, (Object) resultats);

      SaeDonneesRecherche saeDonRech = listeSaeDonRech.get(0);

      assertEquals("UUID incorrect", "2412A367-0813-4F92-8FE0-FF4D2F86A20C",
            StringUtils.upperCase(saeDonRech.getUuid().toString()));

      List<Metadonnee> listeMeta = saeDonRech.getMetadonnees();

      // Rem : tri par ordre alphabétique du code, donc les métadonnées sont
      // inversées
      assertEquals("Code meta 1 incorrect", "ApplicationProductrice", listeMeta
            .get(0).getCode());
      assertEquals("Valeur meta 1 incorrect", "ADELAIDE", listeMeta.get(0)
            .getValeur());
      assertEquals("Code meta 2 incorrect", "Siren", listeMeta.get(1).getCode());
      assertEquals("Valeur meta 2 incorrect", "123456789", listeMeta.get(1)
            .getValeur());

   }

   @Test
   public void creationRequeteConsultTest() throws SecurityException,
         NoSuchMethodException, IllegalArgumentException,
         IllegalAccessException, InvocationTargetException {

      UUID uuid = UUID.fromString("2412A367-0813-4F92-8FE0-FF4D2F86A20C");
      List<String> codes = new ArrayList<String>();
      codes.add("Siren");
      codes.add("ApplicationProductive");

      RechercherServiceImpl rechercherService = new RechercherServiceImpl(
            saeStubUtils);

      // Test de la création de requête
      Method method = RechercherServiceImpl.class.getDeclaredMethod(
            "creationRequeteConsult", UUID.class, List.class);
      method.setAccessible(true);
      ConsultationRequestType consultReqType = (ConsultationRequestType) method
            .invoke(rechercherService, uuid, codes);

      assertEquals("UUID incorrect", "2412A367-0813-4F92-8FE0-FF4D2F86A20C",
            StringUtils.upperCase(consultReqType.getIdArchive().getUuidType()));
      assertEquals("Code type Meta 1 incorrect", "Siren", consultReqType
            .getMetadonnees().getMetadonneeCode()[0].getMetadonneeCodeType());
      assertEquals("Code type Meta 2 incorrect", "ApplicationProductive",
            consultReqType.getMetadonnees().getMetadonneeCode()[1]
                  .getMetadonneeCodeType());
   }

}
