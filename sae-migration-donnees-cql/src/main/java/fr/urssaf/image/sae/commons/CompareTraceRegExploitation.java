package fr.urssaf.image.sae.commons;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import fr.urssaf.image.commons.cassandra.cql.dao.IGenericDAO;
import fr.urssaf.image.commons.cassandra.serializer.JacksonSerializer;
import fr.urssaf.image.sae.trace.commons.TraceFieldsName;
import fr.urssaf.image.sae.trace.dao.TraceRegExploitationDao;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitation;
import fr.urssaf.image.sae.trace.dao.model.TraceRegExploitationIndex;
import fr.urssaf.image.sae.trace.dao.modelcql.TraceRegExploitationCql;
import fr.urssaf.image.sae.trace.dao.modelcql.TraceRegExploitationIndexCql;
import fr.urssaf.image.sae.trace.dao.serializer.MapSerializer;
import fr.urssaf.image.sae.trace.dao.serializer.TraceRegExploitationIndexSerializer;
import fr.urssaf.image.sae.trace.daocql.ITraceJournalEvtCqlDao;
import fr.urssaf.image.sae.trace.daocql.ITraceJournalEvtIndexCqlDao;
import fr.urssaf.image.sae.trace.daocql.ITraceRegExploitationCqlDao;
import fr.urssaf.image.sae.trace.daocql.ITraceRegExploitationIndexCqlDao;
import fr.urssaf.image.sae.trace.utils.UtilsTraceMapper;
import me.prettyprint.cassandra.serializers.StringSerializer;
import me.prettyprint.hector.api.Keyspace;
import me.prettyprint.hector.api.beans.HColumn;
import me.prettyprint.hector.api.beans.Row;

@Repository
public class CompareTraceRegExploitation implements ICompareTrace<TraceRegExploitation, TraceRegExploitationCql, TraceRegExploitationIndex, TraceRegExploitationIndexCql> {

	private static final Logger LOGGER = LoggerFactory.getLogger(CompareTraceRegExploitation.class);
	@Autowired
	TraceRegExploitationDao tracethrift;
	
	@Autowired
	ITraceRegExploitationCqlDao tracejdao;
	
	@Autowired
	ITraceRegExploitationIndexCqlDao indexDao;
	
	@Override
	public TraceRegExploitation createNewInstance(UUID idTrace, Date timestamp) {
		return new TraceRegExploitation(idTrace, timestamp);
	}

	@Override
	public void completeTraceFromResult(TraceRegExploitation trace, Row<UUID, String, byte[]> row) {
		  
			///Contexte de la trace 
		   String action;
		   
		   HColumn<String, byte[]> coHl = row.getColumnSlice().getColumnByName(TraceFieldsName.ACTION.getName());
		      if(coHl != null) {
		    	  action = StringSerializer.get().fromBytes(coHl.getValue());
		    	  trace.setAction(action);
		      } 
		      
		  // informations suppl√©mentaires de la trace 
		  Map<String, Object> infos = new HashMap<String, Object>();
		  
	      // COL_INFOS("infos"),
	      HColumn<String, byte[]> iHl = row.getColumnSlice().getColumnByName(TraceFieldsName.COL_INFOS.getName());
	      if(iHl != null) {
		      Map<String, Object> map = MapSerializer.get().fromBytes(iHl.getValue());
		      for (final Map.Entry<String, Object> entry : map.entrySet()) {
		          final String infosKey = entry.getKey();
		          final String value = entry.getValue() != null ? entry.getValue().toString() : "";
		          infos.put(infosKey, value);
		      } 
		      trace.setInfos(infos);
	      }
	}

	@Override
	public TraceRegExploitationCql createTraceFromObjectThrift(TraceRegExploitation traceThrift) {
		return UtilsTraceMapper.createTraceRegExploitationFromThriftToCql(traceThrift);
	}

	@Override
	public TraceRegExploitationIndexCql createIndexFromObjectThrift(TraceRegExploitationIndex index, String key) {
		return UtilsTraceMapper.createTraceRegExploitationIndexFromThriftToCql(index, key);
	}

	@Override
	public TraceRegExploitationIndex createNewInstanceIndex() {
		return new TraceRegExploitationIndex();
	}


	@Override
	public Keyspace getKeySpace() {
		return tracethrift.getKeyspace();
	}

	@Override
	public JacksonSerializer<TraceRegExploitationIndex> getIndexSerializer() {
		return TraceRegExploitationIndexSerializer.get();
	}

	@Override
	public Logger getLogger() {
		return LOGGER;
	}

	@Override
	public IGenericDAO<TraceRegExploitationCql, UUID> getTraceDaoType() {
		return null;
	}

	@Override
	public IGenericDAO<TraceRegExploitationIndexCql, String> getIndexDaoType() {
		return null;
	}

	@Override
	public String getTraceClasseName() {
		return TraceRegExploitation.class.getSimpleName();
	}

	@Override
	public String getIndexClasseName() {
		return TraceRegExploitationIndex.class.getSimpleName();
	}

}
